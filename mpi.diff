diff --git a/.gitignore b/.gitignore
index c23bb6bd..c55afcb4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -101,6 +101,7 @@ ucli.key
 *.h.tmp
 *.tmp.v
 *.tmp.h
+*.tmp.sv
 
 # Ignore generated .pyc files (specifically for pyhplib)
 *.pyc
diff --git a/.gitmodules b/.gitmodules
index f7a5e18c..6e73c6ca 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -24,3 +24,6 @@
 [submodule "piton/design/chip/tile/lagarto_ox"]
 	path = piton/design/chip/tile/lagarto_ox
 	url = ../../core-tile/lagarto_ox_tile.git
+[submodule "piton/tools/metro_mpi"]
+	path = piton/tools/metro_mpi
+	url = ../../../fpga/third-party/bsc_metrompi.git
diff --git a/piton/ariane_setup.sh b/piton/ariane_setup.sh
index c434873e..f0374249 100755
--- a/piton/ariane_setup.sh
+++ b/piton/ariane_setup.sh
@@ -80,14 +80,18 @@ if [ "$RISCV" ==  "" ]
 then
   export RISCV=$HOME/scratch/riscv_install
 fi
-export VERILATOR_ROOT=$ARIANE_ROOT/tmp/verilator-4.014/
+
+if [ "$VERILATOR_ROOT" ==  "" ]
+then
+  export VERILATOR_ROOT=$SARG_ROOT/tmp/verilator-4.014/
+fi
 
 # setup paths
 export PATH=$RISCV/bin:$VERILATOR_ROOT/bin:$PATH
-export LIBRARY_PATH=$RISCV/lib
-export LD_LIBRARY_PATH=$RISCV/lib
-export C_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include
-export CPLUS_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include
+export LIBRARY_PATH=$RISCV/lib:$LIBRARY_PATH
+export LD_LIBRARY_PATH=$RISCV/lib:$LD_LIBRARY_PATH
+export C_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include:$C_INCLUDE_PATH
+export CPLUS_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include:$CPLUS_INCLUDE_PATH
 export HPDCACHE_ROOT=$ARIANE_ROOT/cv-hpdcache
 export HPDCACHE_DIR=../
 # source OpenPiton setup script
diff --git a/piton/design/chip/rtl/chip.v.pyv b/piton/design/chip/rtl/chip.v.pyv
index cc817360..0c20c822 100644
--- a/piton/design/chip/rtl/chip.v.pyv
+++ b/piton/design/chip/rtl/chip.v.pyv
@@ -139,6 +139,17 @@ module chip (
    output                                       offchip_processor_noc3_yummy
 `endif // endif PITON_NO_CHIP_BRIDGE
 
+ `ifdef PITON_EXTRA_MEMS
+    ,
+    output [`PITON_EXTRA_MEMS * `PITON_NOC2_WIDTH -1:0] processor_mcx_noc2_data,
+    output [`PITON_EXTRA_MEMS-1:0]                    processor_mcx_noc2_valid,
+    input  [`PITON_EXTRA_MEMS-1:0]                    processor_mcx_noc2_yummy,
+
+    input  [`PITON_EXTRA_MEMS * `PITON_NOC3_WIDTH -1:0] mcx_processor_noc3_data,
+    input  [`PITON_EXTRA_MEMS-1:0]                    mcx_processor_noc3_valid,
+    output [`PITON_EXTRA_MEMS-1:0]                    mcx_processor_noc3_yummy
+  `endif
+
 `ifdef PITON_RV64_PLATFORM
 `ifdef PITON_RV64_DEBUGUNIT
     // Debug
@@ -1049,6 +1060,15 @@ module chip (
     assign default_total_num_tiles = `PITON_NUM_TILES;
     // Generate tile instances
 <%
+    sub_assign = r'''
+            assign default_coreid_x [_FLAT_ID_] =COREIDX;
+            assign default_coreid_y [_FLAT_ID_] =COREIDY;
+            assign flat_tileid  [_FLAT_ID_] =   _FLAT_ID_; 
+    '''
+    assign = r'''
+    
+    
+    '''
     template = r'''
     tile #(.TILE_TYPE(TYPE_OF_TILE), .L15_L1D_LINE_SIZE(L15_L1D_LINE_SIZE_VALUE))
     tile0 (
@@ -1127,6 +1147,32 @@ module chip (
     );
     '''
 
+    
+    edge_sub1=r'''    
+    assign default_coreid_x [ENDP] = COREIDX;
+    assign default_coreid_y [ENDP] = COREIDY;
+    assign flat_tileid [ENDP]= ENDP;
+  
+    assign dataOut_NN [ENDP] = endp_DatOut_NN;
+    assign validOut_NN[ENDP] = endp_ValidOut_NN;    
+    assign endp_YummyIn_NN = yummyIn_NN[ENDP];
+    '''
+    edge_sub2=r'''  
+    assign endp_DatIn_NN = dataIn_NN [ENDP];
+    assign endp_ValidIn_NN = validIn_NN[ENDP];
+    assign yummyOut_NN[ENDP] = endp_YummyOut_NN;
+    
+    '''
+    edge_assign=r'''
+    
+    '''   
+
+
+    MC_POS=get_mc_mapping(PITON_X_TILES,PITON_Y_TILES,PITON_MC_INDICES,PITON_EXTRA_MEMS,PITON_NETWORK_CONFIG)
+    edge_idx=len(MC_POS)
+    
+      
+
     # generate the tiles
     for i in range(PITON_X_TILES):
         for j in range(PITON_Y_TILES):
@@ -1134,10 +1180,67 @@ module chip (
             flatid = i + (j * PITON_X_TILES);
             # print template
             currenttile = template.replace("tile0", "tile%d" % (flatid));
+            # special case for core 0
+            if i == 0 and j == 0:
+               for k in [1,2,3]:
+                  tmp = edge_sub1 + edge_sub2;
+                  tmp = tmp.replace("endp_DatOut_NN","offchip_out_E_noc%d_data" %k);
+                  tmp = tmp.replace("endp_ValidOut_NN","offchip_out_E_noc%d_valid" %k);
+                  tmp = tmp.replace("endp_YummyOut_NN","offchip_out_E_noc%d_yummy" %k);
+                  tmp = tmp.replace("endp_DatIn_NN","tile_0_0_out_W_noc%d_data" %k);
+                  tmp = tmp.replace("endp_ValidIn_NN","tile_0_0_out_W_noc%d_valid" %k);
+                  tmp = tmp.replace("endp_YummyIn_NN","tile_0_0_out_W_noc%d_yummy" %k);                  
+                  tmp = tmp.replace("_NN", str(k))
+                  tmp = tmp.replace("ENDP","CHIP_SET_ID");
+                  tmp = tmp.replace("COREIDX", "8'd" + repr(i));
+                  tmp = tmp.replace("COREIDY", "8'd" + repr(j));
+                  
+                  edge_assign=edge_assign + tmp; 
+            # place the memory controllers           
+            for k in range(edge_idx):
+                ax = MC_POS[k]['x']
+                ay = MC_POS[k]['y']  
+                ap = MC_POS[k]['p']
+                id = MC_POS[k]['endp']                 
+                if(i==ax and j==ay):                    
+                    currenttile = currenttile.replace("out_%s_noc2_data"  % MC_POS[k]['p'], "processor_mcx_noc2_data [%d * `PITON_NOC2_WIDTH +: `PITON_NOC2_WIDTH]" % k);
+                    currenttile = currenttile.replace("out_%s_noc2_valid" % MC_POS[k]['p'], "processor_mcx_noc2_valid[%d]" % k);
+                    currenttile = currenttile.replace("in_%s_noc2_yummy"  % MC_POS[k]['p'], "processor_mcx_noc2_yummy[%d]" % k);
+                    currenttile = currenttile.replace("in_%s_noc3_data"   % MC_POS[k]['p'], "mcx_processor_noc3_data [%d * `PITON_NOC3_WIDTH +: `PITON_NOC3_WIDTH]" % k);
+                    currenttile = currenttile.replace("in_%s_noc3_valid"  % MC_POS[k]['p'], "mcx_processor_noc3_valid[%d]" % k);
+                    currenttile = currenttile.replace("out_%s_noc3_yummy" % MC_POS[k]['p'], "mcx_processor_noc3_yummy[%d]" % k);
+                    tmp = ("//Connect MC %d to enp %d:\n" % (k,id)) 
+                    tmp = tmp + edge_sub1;                    
+                    tmp = tmp.replace("ENDP",str(id));
+                    tmp = tmp.replace("COREIDX", "8'd" + repr(i));
+                    tmp = tmp.replace("COREIDY", "8'd" + repr(j));
+                    tmp = tmp.replace("endp_DatOut_NN","mcx_processor_noc3_data [%d * `PITON_NOC3_WIDTH +: `PITON_NOC3_WIDTH]" % k);
+                    tmp = tmp.replace("endp_ValidOut_NN","mcx_processor_noc3_valid[%d]" % k);
+                    tmp = tmp.replace("endp_YummyIn_NN","mcx_processor_noc3_yummy[%d]" % k);
+                    tmp = tmp.replace("_NN", "3");
+                    edge_assign=edge_assign + tmp;
+                    tmp = edge_sub2 ;   
+                    tmp = tmp.replace("ENDP",str(id));
+                    tmp = tmp.replace("COREIDX", "8'd" + repr(i));
+                    tmp = tmp.replace("COREIDY", "8'd" + repr(j)); 
+                    tmp = tmp.replace("endp_DatIn_NN","processor_mcx_noc2_data [%d * `PITON_NOC2_WIDTH +: `PITON_NOC2_WIDTH]" % k);
+                    tmp = tmp.replace("endp_ValidIn_NN","processor_mcx_noc2_valid[%d]" % k); 
+                    tmp = tmp.replace("endp_YummyOut_NN", "processor_mcx_noc2_yummy[%d]" % k); 
+                    tmp = tmp.replace("_NN", "2");
+                    edge_assign=edge_assign + tmp;
+
             currenttile = currenttile.replace("COREIDX", "8'd" + repr(i));
             currenttile = currenttile.replace("COREIDY", "8'd" + repr(j));
             currenttile = currenttile.replace("out_", "tile_%d_%d_out_" % (j,i));
             currenttile = currenttile.replace("_FLAT_ID_", repr(flatid));
+            
+            assign_tmp = sub_assign
+            assign_tmp = assign_tmp.replace("COREIDX", "8'd" + repr(i));
+            assign_tmp = assign_tmp.replace("COREIDY", "8'd" + repr(j));
+            assign_tmp = assign_tmp.replace("_FLAT_ID_", repr(flatid));
+            
+            assign = assign + assign_tmp;
+            
             currenttype = "`SPARC_TILE"
 
             if (PITON_PICO_HET):
diff --git a/piton/design/chip/tile/l2/rtl/Flist.l2 b/piton/design/chip/tile/l2/rtl/Flist.l2
index f523c2ee..e124acdd 100644
--- a/piton/design/chip/tile/l2/rtl/Flist.l2
+++ b/piton/design/chip/tile/l2/rtl/Flist.l2
@@ -58,6 +58,7 @@ l2_config_regs.v
 l2_priority_encoder.v
 l2_broadcast_counter.v
 l2_broadcast_counter_wrap.v
+l2_to_mc.v
 
 sram_wrappers/sram_l2_tag.v
 sram_wrappers/sram_l2_data.v
diff --git a/piton/design/chip/tile/l2/rtl/l2.core b/piton/design/chip/tile/l2/rtl/l2.core
index b5512a2c..e07b4ad8 100644
--- a/piton/design/chip/tile/l2/rtl/l2.core
+++ b/piton/design/chip/tile/l2/rtl/l2.core
@@ -66,6 +66,7 @@ generate:
                           [l2_pipe2_dpath.v.pyv, l2_pipe2_dpath.tmp.v],      
                           [l2_priority_encoder.v.pyv, l2_priority_encoder.tmp.v], 
                           [l2_smc.v.pyv, l2_smc.tmp.v],              
+			   [l2_to_mc.v.pyv, l2_to_mc.v],              
                           [l2_state.v.pyv, l2_state.tmp.v]]            
                           
    
diff --git a/piton/design/chip/tile/l2/rtl/l2.v b/piton/design/chip/tile/l2/rtl/l2.v
index abded986..c4f29cc9 100644
--- a/piton/design/chip/tile/l2/rtl/l2.v
+++ b/piton/design/chip/tile/l2/rtl/l2.v
@@ -668,6 +668,12 @@ l2_pipe1 pipe1(
     .smc_tag_out            (smc_tag_out),
     `endif
 
+`ifdef PITON_EXTRA_MEMS
+    .chipid                 (chipid),
+    .coreid_x               (coreid_x),
+    .coreid_y               (coreid_y),
+`endif
+
     .data_clk_en            (data_clk_en_p1),
     .data_rdw_en            (data_rdw_en_p1),
     .data_addr              (data_addr_p1),
diff --git a/piton/design/chip/tile/l2/rtl/l2_encoder.v b/piton/design/chip/tile/l2/rtl/l2_encoder.v
index ca170487..4995bfea 100644
--- a/piton/design/chip/tile/l2/rtl/l2_encoder.v
+++ b/piton/design/chip/tile/l2/rtl/l2_encoder.v
@@ -66,10 +66,90 @@ module l2_encoder(
     input wire [`MSG_SDID_WIDTH-1:0] msg_sdid,
     input wire [`MSG_LSID_WIDTH-1:0] msg_lsid,
 
+`ifdef PITON_EXTRA_MEMS
+    input wire [`NOC_CHIPID_WIDTH-1:0] chipid,
+    input wire [`NOC_X_WIDTH-1:0] coreid_x,
+    input wire [`NOC_Y_WIDTH-1:0] coreid_y,
+`endif
+
 
     output reg [`MSG_HEADER_WIDTH-1:0] msg_header
 );
 
+
+
+
+
+
+
+
+`ifdef PITON_EXTRA_MEMS
+   
+    localparam EXTRA_MEMS = `PITON_EXTRA_MEMS;
+    
+    wire [`MSG_SRC_X_WIDTH-1:0] mc_dst_x;
+	wire [`MSG_SRC_Y_WIDTH-1:0] mc_dst_y;
+	wire [`MSG_SRC_FBITS_WIDTH-1:0] mc_dst_fbits;
+	
+	wire [`MSG_SRC_CHIPID_WIDTH-1:0] msg_dst_chipid_tmp;
+	reg [`MSG_SRC_X_WIDTH-1:0] msg_dst_x_tmp;
+	reg [`MSG_SRC_Y_WIDTH-1:0] msg_dst_y_tmp;
+	reg [`MSG_SRC_FBITS_WIDTH-1:0] msg_dst_fbits_tmp;
+    
+    l2_to_mc mc_map(
+        .msg_addr(msg_addr),
+		.coreid_x(coreid_x),
+     	.coreid_y(coreid_y),
+    	.mc_dst_x(mc_dst_x),
+		.mc_dst_y(mc_dst_y),	
+		.mc_dst_fbits(mc_dst_fbits)
+	);
+    
+   reg off_chip; 
+    
+   always @ (*) begin 
+	   if(!msg_dst_chipid [`CHIP_ID_WIDTH-1]) begin  // it is not goinig to offchip 
+           msg_dst_x_tmp = msg_dst_x;
+           msg_dst_y_tmp = msg_dst_y;
+           msg_dst_fbits_tmp=msg_dst_fbits;  
+           off_chip=1'b0;
+	   end else if (msg_addr[`PHY_ADDR_WIDTH-1]) begin // it is IO. not goinig to mmc
+           msg_dst_fbits_tmp=msg_dst_fbits;// abs_mmc = `W_EDGE;
+           msg_dst_x_tmp = `OFF_CHIP_NODE_X;
+           msg_dst_y_tmp = `OFF_CHIP_NODE_Y;
+           off_chip=1'b1;
+	   end else begin // It is a message to MC
+           msg_dst_fbits_tmp=mc_dst_fbits;
+           msg_dst_x_tmp = mc_dst_x;
+           msg_dst_y_tmp = mc_dst_y;
+           off_chip=1'b0; //TODO should be asserted it if the mc is in another chip
+	   end  
+   end
+  
+
+   
+                     
+    assign msg_dst_chipid_tmp = {off_chip,msg_dst_chipid[`CHIP_ID_WIDTH-2:0]}; 
+
+
+                
+`else 
+   wire [`MSG_SRC_CHIPID_WIDTH-1:0] msg_dst_chipid_tmp;
+   wire [`MSG_SRC_X_WIDTH-1:0] msg_dst_x_tmp;
+   wire [`MSG_SRC_Y_WIDTH-1:0] msg_dst_y_tmp;
+   wire [`MSG_SRC_FBITS_WIDTH-1:0] msg_dst_fbits_tmp;
+   
+   assign  msg_dst_fbits_tmp=msg_dst_fbits;
+   assign  msg_dst_chipid_tmp = msg_dst_chipid;
+   assign  msg_dst_x_tmp = msg_dst_x;
+   assign  msg_dst_y_tmp = msg_dst_y;
+
+
+`endif
+
+
+
+
 always @ *
 begin
     msg_header = {msg_src_chipid,
@@ -87,10 +167,10 @@ begin
                   msg_data_size,
                   8'd0,
 
-                  msg_dst_chipid,
-                  msg_dst_x,
-                  msg_dst_y,
-                  msg_dst_fbits,
+                  msg_dst_chipid_tmp,
+                  msg_dst_x_tmp,
+                  msg_dst_y_tmp,
+                  msg_dst_fbits_tmp,
                   msg_length,
                   msg_type,
                   msg_mshrid,
diff --git a/piton/design/chip/tile/l2/rtl/l2_pipe1.v b/piton/design/chip/tile/l2/rtl/l2_pipe1.v
index a2a8d2cf..2e17aa51 100644
--- a/piton/design/chip/tile/l2/rtl/l2_pipe1.v
+++ b/piton/design/chip/tile/l2/rtl/l2_pipe1.v
@@ -178,6 +178,14 @@ module l2_pipe1(
     output wire [`L2_DATA_INDEX_WIDTH-1:0] data_ecc_addr,
     output wire [`PHY_ADDR_WIDTH-1:0] error_addr,
 
+`ifdef PITON_EXTRA_MEMS
+    input wire [`NOC_CHIPID_WIDTH-1:0] chipid,
+    input wire [`NOC_X_WIDTH-1:0] coreid_x,
+    input wire [`NOC_Y_WIDTH-1:0] coreid_y,
+`endif
+
+
+
     output wire reg_rd_en,
     output wire reg_wr_en,
     output wire [`L2_ADDR_TYPE_WIDTH-1:0] reg_rd_addr_type,
@@ -969,6 +977,11 @@ l2_pipe1_dpath dpath(
 );
 
 l2_encoder encoder(
+`ifdef PITON_EXTRA_MEMS
+    .chipid                 (chipid),
+    .coreid_x               (coreid_x),
+    .coreid_y               (coreid_y),
+`endif
     .msg_dst_chipid             (msg_send_dst_chipid),
     .msg_dst_x                  (msg_send_dst_x),
     .msg_dst_y                  (msg_send_dst_y),
diff --git a/piton/design/chip/tile/l2/rtl/l2_to_mc.v.pyv b/piton/design/chip/tile/l2/rtl/l2_to_mc.v.pyv
new file mode 100644
index 00000000..03f043f6
--- /dev/null
+++ b/piton/design/chip/tile/l2/rtl/l2_to_mc.v.pyv
@@ -0,0 +1,82 @@
+`include "define.tmp.h"
+
+
+
+module l2_to_mc (
+
+    input wire [`PHY_ADDR_WIDTH-1:0] msg_addr,
+    input wire [`NOC_X_WIDTH-1:0] coreid_x,
+    input wire [`NOC_Y_WIDTH-1:0] coreid_y,
+
+   
+    output reg [`MSG_SRC_X_WIDTH-1:0] mc_dst_x,
+    output reg [`MSG_SRC_Y_WIDTH-1:0] mc_dst_y,
+    output reg [`MSG_SRC_FBITS_WIDTH-1:0] mc_dst_fbits
+
+);
+
+   
+// The destination MC should be selected according to msg_addr or L2 id. Currently its selected based on min Manhattan distance from L2
+
+<%
+import math
+import sys
+
+import pyhplib
+from pyhplib import *
+
+mmc=PITON_EXTRA_MEMS
+if(mmc==0):
+    mmc=1
+    PITON_MC_INDICES="0"
+    
+lc_num=PITON_X_TILES*PITON_Y_TILES
+lc_per_mmc=lc_num//mmc
+if(lc_per_mmc*mmc !=lc_num):
+    lc_per_mmc+=1
+
+print("//fbit declarations\n\t`define FBIT_NONE    4'b0000\n\t`define FBIT_W    4'b0010\n\t`define FBIT_S    4'b0011\n\t`define FBIT_E    4'b0100\n\t`define FBIT_N    4'b0101\n")
+print("\t`define LC_NUM_PER_MC %d\n" %lc_per_mmc)
+
+
+
+MC_POS=get_mc_mapping(PITON_X_TILES,PITON_Y_TILES,PITON_MC_INDICES,mmc,PITON_NETWORK_CONFIG)
+edge_idx=len(MC_POS)
+
+print("/*\n\tMC mapping table:\n \tMC# \tTile# \tTile_x \tTile_y \tPort\n")    
+for k in range(edge_idx):   
+     print("\t%d \t%d \t%d \t%d \t%s" % (k, MC_POS[k]['id'], MC_POS[k]['x'], MC_POS[k]['y'],MC_POS[k]['p']  ))     
+print("*/")
+
+
+                 
+            
+
+
+
+print ("always @ (*) begin\n \tmc_dst_fbits='b000;\tmc_dst_x=0;\tmc_dst_y=0;")
+
+#take the MC with minimum manhatan distance 
+for j in range(PITON_Y_TILES): 
+    for i in range(PITON_X_TILES):
+        mind=1000000
+        min_index=100000
+        for k in range(edge_idx):
+            a = (MC_POS[k]['x'], MC_POS[k]['y'])
+            b = (i , j)
+            d = get_manhattan_distance(a, b)  
+            
+            if(MC_POS[k]['n'] < lc_per_mmc and d < mind):
+                mind=d
+                min_index=k
+             
+        MC_POS[min_index]['n']+=1
+        mc=j*PITON_X_TILES+i
+        print("//\tL2_id%d -> MC_id%d ;  L2(%d,%d) -> MC(%d,%d) manhattan_dst %d" % (mc,min_index, i, j, MC_POS[min_index]['x'], MC_POS[min_index]['y'],mind))
+        print("\tif (coreid_x == %d && coreid_y == %d) begin mc_dst_x = %d; mc_dst_y = %d; mc_dst_fbits = `FBIT_%s; end" %(i, j, MC_POS[min_index]['x'], MC_POS[min_index]['y'],  MC_POS[min_index]['p']))
+    
+%>
+
+end //always
+
+endmodule
diff --git a/piton/design/chip/tile/rtl/tile.v.pyv b/piton/design/chip/tile/rtl/tile.v.pyv
index 8059866a..fb89ee7c 100644
--- a/piton/design/chip/tile/rtl/tile.v.pyv
+++ b/piton/design/chip/tile/rtl/tile.v.pyv
@@ -678,6 +678,7 @@ NIB_SIZE = pow(2, NIB_SIZE_LOG2)
         .ready_out(processor_router_ready_noc3)    // Rdy signal from processor to dynamic network
     );
 
+
 `ifdef PITON_PCK_MON
 
     piton_pck_monitor #(
@@ -768,7 +769,6 @@ NIB_SIZE = pow(2, NIB_SIZE_LOG2)
 
 
 
-
 `ifdef EXTERNAL_HPM_EVENT_NUM
 
     localparam 
@@ -819,9 +819,9 @@ NIB_SIZE = pow(2, NIB_SIZE_LOG2)
         end
     end
     endgenerate
-    
 `endif
 
+
 ///////////////////////
 // Instantiate Cores //
 ///////////////////////
@@ -1109,6 +1109,7 @@ if (TILE_TYPE == `ARIANE_RV64_TILE) begin : g_ariane_core
              transducer_l15_amo_op,
              transducer_l15_be} = l15_req;
 
+
     wire [63:0] ariane_bootaddr;
 
 <%
@@ -1269,14 +1270,24 @@ if (TILE_TYPE == `SARGANTANA_RV64_TILE) begin : g_sarg_core
    
 
 
+`ifdef PITON_CUSTOM_IO_INIT_BASE
+    localparam [39: 0] IO_INIT_BASE = 40'h80_0000_0000;
+`else 
+    localparam [39: 0] IO_INIT_BASE = 40'hFF_F000_0000;   
+`endif
+   
+   
     drac_openpiton_wrapper #(
 <%
+
+
+
 str = '''
-        .NIOSections     ( 1 ),
-        .InitIOBase      ( {40'hFF_F000_0000} ),
+        .NIOSections     ( 1 ),      
+        .InitIOBase      ( {IO_INIT_BASE} ),
         .InitIOEnd       ( {40'hFF_F200_0000} ),
         .NMappedSections ( 2 ),
-        .InitMappedBase  ( {40'h00_8000_0000, 40'hFF_F000_0000}   ),
+        .InitMappedBase  ( {40'h00_8000_0000, IO_INIT_BASE}   ),
         .InitMappedEnd   ( {40'h24_0000_0000, 40'hFF_F200_0000}  ),
         .InitBROMBase    ( 40'hFF_F101_0000  ),
         .InitBROMEnd     ( 40'hFF_F200_0000 )
diff --git a/piton/design/chipset/bsc/rtl/bsc_riscv_peripherals.sv b/piton/design/chipset/bsc/rtl/bsc_riscv_peripherals.sv
index a17c0671..378e87aa 100644
--- a/piton/design/chipset/bsc/rtl/bsc_riscv_peripherals.sv
+++ b/piton/design/chipset/bsc/rtl/bsc_riscv_peripherals.sv
@@ -111,7 +111,8 @@ module bsc_riscv_peripherals #(
 
   axiu_axilite_to_memport #(
     .ADDR_WIDTH ( AxiAddrWidth  ),
-    .DATA_WIDTH ( AxiDataWidth  )
+    .DATA_WIDTH ( AxiDataWidth  ),
+    .ADDR_SHIFT (0)
   ) i_axi2rom (
     .clk          (clk_i       ),
     .rst          (~rst_ni     ),
diff --git a/piton/design/chipset/io_ctrl/rtl/fake_boot_ctrl.v b/piton/design/chipset/io_ctrl/rtl/fake_boot_ctrl.v
index db2d2676..7e1369cd 100644
--- a/piton/design/chipset/io_ctrl/rtl/fake_boot_ctrl.v
+++ b/piton/design/chipset/io_ctrl/rtl/fake_boot_ctrl.v
@@ -194,6 +194,12 @@ wire    bram_rdwen;
 
 
 l2_decoder decoder(
+
+`ifdef PITON_EXTRA_MEMS
+    .chipid                 ({`NOC_CHIPID_WIDTH{1'b0}}),
+    .coreid_x               ({`NOC_X_WIDTH{1'b0}}),
+    .coreid_y               ({`NOC_Y_WIDTH{1'b0}}),
+`endif
     .msg_header         (mem_header_in),
     .msg_type           (msg_type),
     .msg_length         (),
diff --git a/piton/design/chipset/rtl/Flist.chipset b/piton/design/chipset/rtl/Flist.chipset
index ee15ffe5..ac250327 100644
--- a/piton/design/chipset/rtl/Flist.chipset
+++ b/piton/design/chipset/rtl/Flist.chipset
@@ -5,3 +5,4 @@ storage_addr_trans.v
 storage_addr_trans_unified.v
 packet_filter.v
 noc_width_adaptor.v
+
diff --git a/piton/design/chipset/rtl/chipset.v b/piton/design/chipset/rtl/chipset.v
index d033dad1..8633dbcf 100644
--- a/piton/design/chipset/rtl/chipset.v
+++ b/piton/design/chipset/rtl/chipset.v
@@ -217,6 +217,16 @@ module chipset(
     output [2:0]                                chip_intf_credit_back,
 `endif // endif PITON_NO_CHIP_BRIDGE PITONSYS_INC_PASSTHRU
 
+  `ifdef PITON_EXTRA_MEMS
+    input   [`PITON_EXTRA_MEMS * `PITON_NOC2_WIDTH -1:0] processor_mcx_noc2_data,
+    input   [`PITON_EXTRA_MEMS-1:0]                    processor_mcx_noc2_valid,
+    output  [`PITON_EXTRA_MEMS-1:0]                    processor_mcx_noc2_yummy,
+
+    output  [`PITON_EXTRA_MEMS * `PITON_NOC3_WIDTH -1:0] mcx_processor_noc3_data,
+    output  [`PITON_EXTRA_MEMS-1:0]                    mcx_processor_noc3_valid,
+    input   [`PITON_EXTRA_MEMS-1:0]                    mcx_processor_noc3_yummy,
+  `endif
+
     // DRAM and I/O interfaces
 `ifndef PITONSYS_NO_MC
 `ifdef PITON_FPGA_MC_DDR3
@@ -702,10 +712,10 @@ end
     `ifndef PITONSYS_INC_PASSTHRU
     `ifndef PITON_NO_CHIP_BRIDGE
         assign io_clk_loopback = io_clk;
+
     `endif  // PITON_NO_CHIP_BRIDGE
     `endif  // PITONSYS_INC_PASSTHRU
 
-
     `ifdef PITON_CLKS_CHIPSET
         // If we are generating clocks, they are just the same as
         // this chipset clocks. This means everything is synchronous
@@ -1236,6 +1246,53 @@ credit_to_valrdy #(.FLIT_WIDTH(`PITON_NOC3_WIDTH)) processor_offchip_noc3_c2v(
     .ready_out(intf_chipset_rdy_noc3)
 );
 
+
+`ifdef PITON_EXTRA_MEMS
+  wire  [`PITON_EXTRA_MEMS * `PITON_NOC3_WIDTH -1:0] mcx_intf_data_noc3;
+  wire  [`PITON_EXTRA_MEMS-1:0]                    mcx_intf_val_noc3;
+  wire  [`PITON_EXTRA_MEMS-1:0]                    mcx_intf_rdy_noc3;
+
+  wire  [`PITON_EXTRA_MEMS * `PITON_NOC2_WIDTH -1:0] intf_mcx_data_noc2;
+  wire  [`PITON_EXTRA_MEMS-1:0]                    intf_mcx_val_noc2;
+  wire  [`PITON_EXTRA_MEMS-1:0]                    intf_mcx_rdy_noc2;
+
+  genvar idx;
+  generate
+  for(idx=0; idx<`PITON_EXTRA_MEMS; idx=idx+1) begin: ifconv
+    valrdy_to_credit #(
+        .BUFFER_SIZE(4),
+        .BUFFER_BITS(3),
+        .FLIT_WIDTH(`PITON_NOC3_WIDTH)
+    ) mcx_processor_noc3_v2c( 
+      .clk(chipset_clk),
+      .reset(~chipset_rst_n_ff),
+
+      .data_in (mcx_intf_data_noc3[idx * `PITON_NOC3_WIDTH +: `PITON_NOC3_WIDTH]),
+      .valid_in(mcx_intf_val_noc3 [idx]), 
+      .ready_in(mcx_intf_rdy_noc3 [idx]),
+
+      .data_out (mcx_processor_noc3_data [idx * `PITON_NOC3_WIDTH +: `PITON_NOC3_WIDTH]),
+      .valid_out(mcx_processor_noc3_valid[idx]),
+      .yummy_out(mcx_processor_noc3_yummy[idx])
+    );
+
+    credit_to_valrdy #(.FLIT_WIDTH(`PITON_NOC2_WIDTH))  processor_mcx_noc2_c2v(
+      .clk(chipset_clk),
+      .reset(~chipset_rst_n_ff),
+
+      .data_in (processor_mcx_noc2_data [idx * `PITON_NOC2_WIDTH +: `PITON_NOC2_WIDTH]),
+      .valid_in(processor_mcx_noc2_valid[idx]),
+      .yummy_in(processor_mcx_noc2_yummy[idx]),
+
+      .data_out (intf_mcx_data_noc2[idx * `PITON_NOC2_WIDTH +: `PITON_NOC2_WIDTH]),
+      .valid_out(intf_mcx_val_noc2 [idx]),
+      .ready_out(intf_mcx_rdy_noc2 [idx])
+    );
+  end
+  endgenerate
+`endif
+
+
 `ifdef PITON_BOARD
     // Bootup reset sequence
     chip_rst_seq rst_seq(
@@ -1305,6 +1362,17 @@ chipset_impl_noc_power_test  chipset_impl (
     .intf_chipset_rdy_noc2(intf_chipset_rdy_noc2),
     .intf_chipset_rdy_noc3(intf_chipset_rdy_noc3)
 
+  `ifdef PITON_EXTRA_MEMS    
+   ,
+    .mcx_intf_data_noc3(mcx_intf_data_noc3),
+    .mcx_intf_val_noc3 (mcx_intf_val_noc3),
+    .mcx_intf_rdy_noc3 (mcx_intf_rdy_noc3 ),
+
+    .intf_mcx_data_noc2(intf_mcx_data_noc2),
+    .intf_mcx_val_noc2 (intf_mcx_val_noc2),
+    .intf_mcx_rdy_noc2 (intf_mcx_rdy_noc2)
+  `endif
+
     // DRAM and I/O interfaces
     `ifndef PITONSYS_NO_MC
         `ifdef PITON_FPGA_MC_DDR3 
diff --git a/piton/design/chipset/rtl/chipset_impl.v.pyv b/piton/design/chipset/rtl/chipset_impl.v.pyv
index 6dde74b6..a6519b2b 100644
--- a/piton/design/chipset/rtl/chipset_impl.v.pyv
+++ b/piton/design/chipset/rtl/chipset_impl.v.pyv
@@ -121,6 +121,17 @@ module chipset_impl(
     output                                      intf_chipset_rdy_noc2,
     output                                      intf_chipset_rdy_noc3
 
+  `ifdef PITON_EXTRA_MEMS  
+  , 
+    input  [`PITON_EXTRA_MEMS * `PITON_NOC2_WIDTH -1:0] intf_mcx_data_noc2,
+    input  [`PITON_EXTRA_MEMS-1:0]                    intf_mcx_val_noc2,
+    output [`PITON_EXTRA_MEMS-1:0]                    intf_mcx_rdy_noc2,
+
+    output [`PITON_EXTRA_MEMS * `PITON_NOC3_WIDTH -1:0] mcx_intf_data_noc3,
+    output [`PITON_EXTRA_MEMS-1:0]                    mcx_intf_val_noc3,
+    input  [`PITON_EXTRA_MEMS-1:0]                    mcx_intf_rdy_noc3
+  `endif
+
     // DRAM and I/O interfaces
 `ifndef PITONSYS_NO_MC
 `ifdef PITON_FPGA_MC_DDR3
@@ -793,6 +804,16 @@ credit_to_valrdy #(.FLIT_WIDTH(`PITON_NOC3_WIDTH)) noc3_xbar_to_%s(
             .mc_flit_out_data(mem_buf_noc3_data),
             .mc_flit_out_rdy(buf_mem_noc3_ready),
 
+          `ifdef PITON_EXTRA_MEMS
+            .mcx_flit_in_val (intf_mcx_val_noc2 ),
+            .mcx_flit_in_data(intf_mcx_data_noc2),
+            .mcx_flit_in_rdy (intf_mcx_rdy_noc2 ),
+
+            .mcx_flit_out_val (mcx_intf_val_noc3 ),
+            .mcx_flit_out_data(mcx_intf_data_noc3),
+            .mcx_flit_out_rdy (mcx_intf_rdy_noc3 ),
+           `endif
+
             .uart_boot_en(uart_boot_en),
             .init_calib_complete_out(init_calib_complete),
 
@@ -845,6 +866,25 @@ fake_mem_ctrl fake_mem_ctrl(
     .noc_ready_out      ( buf_mem_noc3_ready )
 );
 
+`ifdef PITON_EXTRA_MEMS
+genvar i;
+generate
+for(i=0;i<`PITON_EXTRA_MEMS;i=i+1) begin: MC_
+   fake_mem_ctrl #(
+    .HMB_CHAN_NUM(i)
+   ) fake_mc ( 
+    .clk                ( chipset_clk        ), 
+    .rst_n              ( chipset_rst_n      ), 
+    .noc_valid_in       ( intf_mcx_val_noc2 [i] ), 
+    .noc_data_in        ( intf_mcx_data_noc2[i * `PITON_NOC2_WIDTH +: `PITON_NOC2_WIDTH]  ), 
+    .noc_ready_in       ( intf_mcx_rdy_noc2 [i] ), 
+    .noc_valid_out      ( mcx_intf_val_noc3 [i] ), 
+    .noc_data_out       ( mcx_intf_data_noc3[i * `PITON_NOC3_WIDTH +: `PITON_NOC3_WIDTH]  ), 
+    .noc_ready_out      ( mcx_intf_rdy_noc3 [i] ) 
+	); 
+end
+endgenerate
+`endif
 `endif // endif PITON_FPGA_MC_DDR3
 
 `else
diff --git a/piton/design/common/rtl/bram_1rw_wrapper.v b/piton/design/common/rtl/bram_1rw_wrapper.v
index 35baafbc..45171c68 100644
--- a/piton/design/common/rtl/bram_1rw_wrapper.v
+++ b/piton/design/common/rtl/bram_1rw_wrapper.v
@@ -176,4 +176,23 @@ end
 `endif
 
 
+//`define REPORT_CACHE_ST
+
+`ifdef REPORT_CACHE_ST
+
+
+	
+cache_st #(
+		.NAME(NAME),
+		.Aw(ADDR_WIDTH)
+	)
+	st
+	(
+		.addr(A),
+		.wr_en(write_en),
+		.rd_en(read_en),
+		.clk (MEMCLK)
+	);
+
+`endif
 endmodule
diff --git a/piton/design/include/define.h.pyv b/piton/design/include/define.h.pyv
index 2f818da9..a4f242d6 100644
--- a/piton/design/include/define.h.pyv
+++ b/piton/design/include/define.h.pyv
@@ -58,9 +58,24 @@ print("`define PITON_NUM_TILES %d" % PITON_NUM_TILES)
 print("`define PITON_X_TILES %d"   % PITON_X_TILES)
 print("`define PITON_Y_TILES %d"   % PITON_Y_TILES)
 
+
 print("`define PITON_NOC1_WIDTH %d" % NOC1_WIDTH)
 print("`define PITON_NOC2_WIDTH %d" % NOC2_WIDTH)
 print("`define PITON_NOC3_WIDTH %d" % NOC3_WIDTH)
+
+if PITON_EXTRA_MEMS > 0:
+  print("`define PITON_EXTRA_MEMS %d" % PITON_EXTRA_MEMS)
+
+if PITON_HBM_LAT > 0:
+  print("`define PITON_HBM_LAT %d" % PITON_HBM_LAT)  
+  print("`define PITON_LAT_MODULE ")  
+
+if PITON_LAT_FILE != "-1":
+  print("`define PITON_LAT_FILE \"%s\"" % PITON_LAT_FILE)
+  print("`define PITON_LAT_MODULE ")  
+  print("`define PITON_LAT_FREQ  1500") 
+   
+
 %>
 
 // NoC interface
diff --git a/piton/design/rtl/system.v b/piton/design/rtl/system.v
index 916c1eb2..52d1e784 100644
--- a/piton/design/rtl/system.v
+++ b/piton/design/rtl/system.v
@@ -474,6 +474,16 @@ wire                         offchip_processor_noc3_valid;
 wire [`PITON_NOC3_WIDTH-1:0] offchip_processor_noc3_data;
 wire                         offchip_processor_noc3_yummy;
 
+`ifdef PITON_EXTRA_MEMS
+  wire [`PITON_EXTRA_MEMS * `PITON_NOC2_WIDTH -1:0] processor_mcx_noc2_data;
+  wire [`PITON_EXTRA_MEMS-1:0]                    processor_mcx_noc2_valid;
+  wire [`PITON_EXTRA_MEMS-1:0]                    processor_mcx_noc2_yummy;
+
+  wire [`PITON_EXTRA_MEMS * `PITON_NOC3_WIDTH -1:0] mcx_processor_noc3_data;
+  wire [`PITON_EXTRA_MEMS-1:0]                    mcx_processor_noc3_valid;
+  wire [`PITON_EXTRA_MEMS-1:0]                    mcx_processor_noc3_yummy;
+`endif
+
 // Passthru<->chipset source synchronous differential clocks
 `ifdef PITON_CHIPSET_CLKS_GEN
 wire                chipset_passthru_clk_p;
@@ -810,6 +820,19 @@ chip chip(
     .offchip_processor_noc3_data    (offchip_processor_noc3_data),
     .offchip_processor_noc3_yummy   (offchip_processor_noc3_yummy)
 `endif // endif PITON_NO_CHIP_BRIDGE
+
+`ifdef PITON_EXTRA_MEMS
+    ,
+    .processor_mcx_noc2_data (processor_mcx_noc2_data),
+    .processor_mcx_noc2_valid(processor_mcx_noc2_valid),
+    .processor_mcx_noc2_yummy(processor_mcx_noc2_yummy),
+
+    .mcx_processor_noc3_data (mcx_processor_noc3_data),
+    .mcx_processor_noc3_valid(mcx_processor_noc3_valid),
+    .mcx_processor_noc3_yummy(mcx_processor_noc3_yummy)
+  `endif
+
+
 `ifdef PITON_RV64_PLATFORM
 `ifdef PITON_RV64_DEBUGUNIT
     // Debug
@@ -1042,6 +1065,16 @@ chipset chipset(
     .chip_intf_credit_back(chip_intf_credit_back),
 `endif // endif PITON_NO_CHIP_BRIDGE PITON_SYS_INC_PASSTHRU
 
+  `ifdef PITON_EXTRA_MEMS
+    .processor_mcx_noc2_data (processor_mcx_noc2_data),
+    .processor_mcx_noc2_valid(processor_mcx_noc2_valid),
+    .processor_mcx_noc2_yummy(processor_mcx_noc2_yummy),
+
+    .mcx_processor_noc3_data (mcx_processor_noc3_data),
+    .mcx_processor_noc3_valid(mcx_processor_noc3_valid),
+    .mcx_processor_noc3_yummy(mcx_processor_noc3_yummy),
+  `endif
+
     // DRAM and I/O interfaces
 `ifndef PITONSYS_NO_MC
 `ifdef PITON_FPGA_MC_DDR3
diff --git a/piton/lox_setup.sh b/piton/lox_setup.sh
index f046df16..dc00be96 100755
--- a/piton/lox_setup.sh
+++ b/piton/lox_setup.sh
@@ -80,10 +80,10 @@ fi
 
 # setup paths
 export PATH=$RISCV/bin:$VERILATOR_ROOT/bin:$PATH
-export LIBRARY_PATH=$RISCV/lib
-export LD_LIBRARY_PATH=$RISCV/lib
-export C_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include
-export CPLUS_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include
+export LIBRARY_PATH=$RISCV/lib:$LIBRARY_PATH
+export LD_LIBRARY_PATH=$RISCV/lib:$LD_LIBRARY_PATH
+export C_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include:$C_INCLUDE_PATH
+export CPLUS_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include:$CPLUS_INCLUDE_PATH
 export HPDCACHE_ROOT=$LOX_ROOT/rtl/dcache
 export HPDCACHE_DIR=$HPDCACHE_ROOT
 
diff --git a/piton/sargantana_setup.sh b/piton/sargantana_setup.sh
index b4625273..d633a436 100755
--- a/piton/sargantana_setup.sh
+++ b/piton/sargantana_setup.sh
@@ -78,10 +78,10 @@ fi
 
 # setup paths
 export PATH=$RISCV/bin:$VERILATOR_ROOT/bin:$PATH
-export LIBRARY_PATH=$RISCV/lib
-export LD_LIBRARY_PATH=$RISCV/lib
-export C_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include
-export CPLUS_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include
+export LIBRARY_PATH=$RISCV/lib:$LIBRARY_PATH
+export LD_LIBRARY_PATH=$RISCV/lib:$LD_LIBRARY_PATH
+export C_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include:$C_INCLUDE_PATH
+export CPLUS_INCLUDE_PATH=$RISCV/include:$VERILATOR_ROOT/include:$CPLUS_INCLUDE_PATH
 export HPDCACHE_ROOT=$SARG_ROOT/rtl/dcache
 export HPDCACHE_DIR=$HPDCACHE_ROOT
 
diff --git a/piton/tools/bin/pyhplib.py b/piton/tools/bin/pyhplib.py
index 079809f7..e68b8f2b 100644
--- a/piton/tools/bin/pyhplib.py
+++ b/piton/tools/bin/pyhplib.py
@@ -43,6 +43,12 @@ PITON_Y_TILES = int(os.environ.get('PITON_Y_TILES', '-1'))
 PITON_NUM_TILES = int(os.environ.get('PITON_NUM_TILES', '-1'))
 #print "//num_tiles:", num_tiles
 
+PITON_EXTRA_MEMS = int(os.environ.get('PITON_EXTRA_MEMS', '-1'))
+PITON_MC_INDICES = (os.environ.get('PITON_MC_INDICES', '0'))
+
+PITON_HBM_LAT = int(os.environ.get('PITON_HBM_LAT', '-1'))
+PITON_LAT_FILE = (os.environ.get('PITON_LAT_FILE', '-1'))
+
 PITON_NETWORK_CONFIG = (os.environ.get("PITON_NETWORK_CONFIG", "2dmesh_config"))
 
 if PITON_X_TILES == -1:
@@ -382,3 +388,57 @@ def GenBramFPGA(depth, width):
         end
       endmodule
     """ % (depth, width, depth_log2, width, depth_log2, width, width, depth, width))
+    
+    
+def get_manhattan_distance(p, q):
+    """ 
+    Return the manhattan distance between points p and q
+    assuming both to have the same number of dimensions
+    """
+    # sum of absolute difference between coordinates
+    distance = 0
+    for p_i,q_i in zip(p,q):
+        distance += abs(p_i - q_i)    
+    return distance   
+    
+#this function in also existed in sims,2. make sure both behave the same     
+def get_mc_mapping(piton_X,piton_Y,indices,mc_num,net_conf):
+    mc_list = indices.split(",")   
+    edge_idx = 0;
+    mc_map=[]
+    for i in range(piton_X):
+        for j in range(piton_Y):
+            currentid = (i, j);
+            flatid = i + (j * piton_X);
+            exists = str(flatid) in mc_list
+            endp = piton_X * piton_Y;            
+            if (net_conf != "xbar_config" and edge_idx < mc_num and exists == True):
+                index= mc_list.index(str(flatid))
+                if (i == 0 and j != 0): # Tile 0 west port is occupied by "offchip" connection
+                    endp = endp + piton_X + piton_X + j;
+                    mc_map.insert(index,{'id':flatid,'x':i,'y':j,'n':0,'p':'W','endp':endp})
+                    edge_idx += 1
+                elif (j == 0 ): 
+                    endp = endp + i;
+                    mc_map.insert(index,{'id':flatid,'x':i,'y':j,'n':0,'p':'N','endp':endp})
+                    edge_idx += 1           
+               
+                elif (j == piton_Y-1): #  and i != 0
+                    endp = endp + piton_X + i;
+                    mc_map.insert(index,{'id':flatid,'x':i,'y':j,'n':0,'p':'S','endp':endp})
+                    edge_idx += 1
+
+                elif (i == piton_X-1): # and j != PITON_Y_TILES-1
+                    endp = endp + piton_X + piton_X + piton_Y + j;
+                    mc_map.insert(index,{'id':flatid,'x':i,'y':j,'n':0,'p':'E','endp':endp})
+                    edge_idx += 1                
+                else: 
+                    sys.stderr.write("Fatal: %s is not an edge router\n" % flatid)    
+    return mc_map
+    
+    
+     
+                
+    
+    
+    
diff --git a/piton/tools/metro_mpi b/piton/tools/metro_mpi
new file mode 160000
index 00000000..8d7168d3
--- /dev/null
+++ b/piton/tools/metro_mpi
@@ -0,0 +1 @@
+Subproject commit 8d7168d36f3a2310fd7256407d0c7b7bdde8f337
diff --git a/piton/tools/pli/Makefile b/piton/tools/pli/Makefile
index 463558f6..1fd03694 100644
--- a/piton/tools/pli/Makefile
+++ b/piton/tools/pli/Makefile
@@ -60,7 +60,8 @@ LIB_A_ICARUS=	$(TOOL_PLI_DIR)/mem/libmem_pli_icarus.a \
 
 LIB_A_MODELSIM=	$(TOOL_PLI_DIR)/mem/libmem_pli_modelsim.a \
 		$(TOOL_PLI_DIR)/socket/libsocket_pli_modelsim.a \
-		$(TOOL_PLI_DIR)/iop/libiob_modelsim.a
+		$(TOOL_PLI_DIR)/iop/libiob_modelsim.a \
+		$(TOOL_PLI_DIR)/Realistic_lat/liblat_pli_modelsim.a
 		
 # riviera .a libraries
 
@@ -160,6 +161,10 @@ $(TOOL_PLI_DIR)/iop/libiob_modelsim.a:
 	(rm -f $(LIB_PATH)/libiob_modelsim.a)
 	cp $@ $(LIB_PATH)
 	
+$(TOOL_PLI_DIR)/Realistic_lat/liblat_pli_modelsim.a:
+	(cd $(TOOL_PLI_DIR)/Realistic_lat; make -f Makefile.modelsim)
+	(rm -f $(LIB_PATH)/liblat_pli_modelsim.a)
+	cp $@ $(LIB_PATH)
 # Riviera .a libraries
 
 $(TOOL_PLI_DIR)/mem/libmem_pli_riviera.a:
@@ -284,6 +289,7 @@ libmodelsimpli.so: $(LIB_A_MODELSIM) veriuser_modelsim.o
 	$(CXX) -shared -o $@ veriuser_modelsim.o \
 	-L$(LIB_PATH) -lsocket_pli_modelsim \
 	-lmem_pli_modelsim \
+	-llat_pli_modelsim \
 	-liob_modelsim \
         $(ADDITIONAL_ARGS)
 	(rm -f $(LIB_PATH)/$@)
diff --git a/piton/tools/pli/Realistic_lat/Makefile b/piton/tools/pli/Realistic_lat/Makefile
new file mode 100644
index 00000000..76121448
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/Makefile
@@ -0,0 +1,18 @@
+CC=g++
+
+
+
+
+all: 
+	$(CC) -O3 -std=c++11 -o main main.c bw_lat_mem_ctrl.cc
+
+
+
+clean:
+
+
+
+
+
+
+
diff --git a/piton/tools/pli/Realistic_lat/Makefile.modelsim b/piton/tools/pli/Realistic_lat/Makefile.modelsim
new file mode 100644
index 00000000..e8c8b33e
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/Makefile.modelsim
@@ -0,0 +1,24 @@
+# Derived from piton/tools/pli/iop/Makefile
+
+include ${DV_ROOT}/tools/env/Makefile.system
+
+CPPFLAGS = -std=c++11
+CFLAGS += -I../ -fpic -DLINUX -DUSE_ACC -I${MODELSIM_HOME}/include
+
+LIB = liblat_pli_modelsim.a
+
+
+CSRCC =  bw_lat_mem_ctrl.cc lat.cc
+LIB_OBJC = ${CSRCC:%.cc=%.o}
+
+all: $(LIB)
+	rm -rf *.o
+
+$(LIB_OBJC):
+	$(CCC) $(CPPFLAGS) -c  $(CFLAGS)  -o $*.o $*.cc
+
+$(LIB): $(LIB_OBJC)
+	ar rv $(LIB) $(LIB_OBJC)
+
+clean:
+	rm -rf *.o ${LIB}
diff --git a/piton/tools/pli/Realistic_lat/bw_lat_mem_ctrl.cc b/piton/tools/pli/Realistic_lat/bw_lat_mem_ctrl.cc
new file mode 100644
index 00000000..cd0c6385
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/bw_lat_mem_ctrl.cc
@@ -0,0 +1,401 @@
+#include "bw_lat_mem_ctrl.h"
+
+
+BwLatMemCtrl::BwLatMemCtrl(string _curveAddress, uint32_t _curveWindowSize, double _MaxTheoreticalBW, double frequencyRate) 
+{
+	curveAddress = _curveAddress;
+	curveWindowSize = _curveWindowSize;
+
+	frequencyCPU = frequencyRate;
+
+	// change the bandwidth to access per cycles (double checked)
+	MaxTheoreticalBW =  (_MaxTheoreticalBW  / 64) / 2.1;
+
+	leadOffLatency = 100000;
+	maxBandwidth = 0;
+	maxLatency = 0;
+	// curves_data
+	for (uint32_t i=0; i<101; i+=2) {
+		string fileAddress;
+		ifstream curveFiles;
+		double inputBandwidth, inputLatency; 
+
+		// generate the address of the files
+		if (i<10)
+			fileAddress = curveAddress + "/bwlat_" + to_string(i) + ".txt";
+		else
+			fileAddress = curveAddress + "/bwlat_" + to_string(i) + ".txt";
+		
+		// cout << fileAddress << endl;
+
+		curveFiles.open(fileAddress, std::ifstream::in);
+		
+		// sanity check to make sure input curves exists
+		// cout << "checking curve address at: " << fileAddress << endl;
+		assert(curveFiles.is_open());
+		
+
+		// read the curve file into the curves_date
+		// also set leadOffLatency, maxBandwidth, maxLatency
+		
+
+		double maxBandwidthTemp = 0;
+		double maxLatencyTemp = 0;
+
+		vector<vector<double>> curve_data;
+		while(curveFiles >> inputBandwidth >> inputLatency) {
+			vector<double> dataPoint;
+			// change the bandwidth to access per cycles
+			// this is hard coded for skylake it should read the config frecuency
+			inputBandwidth = (inputBandwidth / 64) / (2.1*1000)  ;
+			// decrease LLC latency; this is hard coded for skylake. it should read all parent 
+			// cache latency and sum them at the end. for Skylake this value is 37 (L3) + 10 (L2) + 4 (L1) = 51
+			// we need this 12 more offset. idk why to achieve correct lead-off latency
+			
+			// this is for skylake+DDR$
+			// inputLatency = inputLatency - 51 - 12;
+			
+			// this is for skylake+CXL (still we are 152 ns lead of. 36 ns more!)
+			// inputLatency = inputLatency;
+
+			dataPoint.push_back(inputBandwidth);
+			dataPoint.push_back(inputLatency);			
+			// cout << dataPoint[0] << " " << dataPoint[1] << endl;
+
+			if (leadOffLatency > inputLatency)
+				leadOffLatency = inputLatency;
+			if (maxLatency < inputLatency)
+				maxLatency = inputLatency;
+			if (maxLatencyTemp < inputLatency)
+				maxLatencyTemp = inputLatency;
+			if (maxBandwidth < inputBandwidth)
+				maxBandwidth = inputBandwidth;
+			if (maxBandwidthTemp < inputBandwidth)
+				maxBandwidthTemp = inputBandwidth;
+
+
+			curve_data.push_back(dataPoint);
+		}
+		maxBandwidthPerRdRatio.push_back(maxBandwidthTemp);
+		maxLatencyPerRdRatio.push_back(maxLatencyTemp); 
+		curves_data.push_back(curve_data);
+		curveFiles.close();
+	}
+
+	cout << "Curve files are opened successfully" << endl;
+
+	// cout << "leadOffLatency: " << (leadOffLatency + 51) / 2.1 << " ns, cycles: " << (leadOffLatency + 51) << endl;
+	// cout << "maxLatency: " << (maxLatency + 51) / 2.1 << " ns"<< endl;
+	// cout << "maxBandwidth: " << maxBandwidth * 64  * 2.1 << " GB/s" << endl;
+	// cout << "MaxTheoreticalBW: " << MaxTheoreticalBW * 64 * 2.1 << " GB/s" << endl;
+
+	// test to see if the data is loaded correctly.
+	// for (uint32_t i=0; i< curves_data.size(); i++)
+	// {
+	// 	cout << "read percentage is: " << i*2 << endl;
+	// 	for (uint32_t j = 0; j < curves_data[i].size(); ++j)
+	// 	{
+	// 		cout << curves_data[i][j][0] << " " << curves_data[i][j][1] << endl;
+	// 	}
+	// }
+
+	// cout << "maxBandwidth: " << endl;
+	// for (uint32_t j = 0; j < maxBandwidthPerRdRatio.size(); ++j) {
+	// 	cout << maxBandwidthPerRdRatio[j] << endl;
+	// }
+
+	// cout << "maxlatency: " << endl;
+	// for (uint32_t j = 0; j < maxLatencyPerRdRatio.size(); ++j) {
+	// 	cout << maxLatencyPerRdRatio[j] << endl;
+	// }
+
+	// initialization of the counters
+	currentWindowAccessCount = 0;
+	currentWindowAccessCount_wr = 0;
+	currentWindowAccessCount_rd = 0;
+
+	// initialize the state
+	lastEstimatedBandwidth = 0;
+	lastEstimatedLatency = leadOffLatency;
+	latency = (uint32_t) lastEstimatedLatency;
+
+	// initial the overflow factor
+	overflowFactor = 0;
+
+}
+
+uint32_t BwLatMemCtrl::getLeadOffLatency() {
+	return (uint32_t) leadOffLatency;
+}
+
+double BwLatMemCtrl::getBandwidth() {
+	// GB/s
+	//return (frequencyCPU*outputBW/2.1);     
+	return outputBW;
+}
+
+double round(double d) {
+	return std::floor(d + 0.5);
+}
+
+uint32_t BwLatMemCtrl::searchForLatencyOnCurve(double bandwidth, double readPercentage) {
+
+	double convergeSpeed = 0.05;
+	// factor of latency over max latency when the bandwidth is maxed out.
+	double measuredBandwidth = bandwidth;
+
+	// curves_data
+	// first select the correct read to write ratio. an even number between 0 and 100
+	uint32_t intReadPercentage;
+	intReadPercentage = round( (100*readPercentage) * 0.5f ) * 2;
+	lastIntReadPercentage = intReadPercentage;
+
+	assert(intReadPercentage >= 0);
+	assert(intReadPercentage <= 100);
+	assert(intReadPercentage % 2 == 0);
+
+	uint32_t curveDataIndex = intReadPercentage/2;
+
+	// estimated data points
+	double finalLatency=leadOffLatency;
+	double finalBW=0;
+
+	// TODO...
+	// sanity check should be added later
+	// cout << endl << "new" << endl;
+	// cout << "MaxTheoreticalBW: " << MaxTheoreticalBW  << " acesses/cycles" << endl;
+	// cout << "maxBandwidth in all the curves : " << maxBandwidth  << " acesses/cycles" << endl;
+	// cout << "measured bandwidth: " << bandwidth << " max from curve: "<< maxBandwidthPerRdRatio[curveDataIndex] << endl;
+	// cout << "rd percentage: " << intReadPercentage << endl;
+
+	// cout << "lastEstimatedLatency " << lastEstimatedLatency << endl;
+	// cout << "lastEstimatedBandwidth: " << lastEstimatedBandwidth << endl;
+
+	// do not jump. slowly converge. PID-like controller 
+	bandwidth = convergeSpeed * bandwidth + (1-convergeSpeed) * lastEstimatedBandwidth;
+
+
+	// check if we overflow the maximum bandwidth. We need to add latency penaly for very high bandwidth applications
+	// bool overflow=false;
+	// if (MaxTheoreticalBW < bandwidth) {
+	// if (maxBandwidth < bandwidth) {	
+	if (maxBandwidthPerRdRatio[curveDataIndex]*0.985 < measuredBandwidth) {
+		
+
+		// bandwidth =  maxBandwidthPerRdRatio[curveDataIndex];
+		// cout << "more than max! bandwidth: " << bandwidth << " max from curve: "<< maxBandwidthPerRdRatio[curveDataIndex] << endl;
+		// overflow=true;
+		// let's converge slowly
+		finalBW = convergeSpeed * maxBandwidthPerRdRatio[curveDataIndex] + (1-convergeSpeed) * lastEstimatedBandwidth;
+		// simulate the wave form at least for a very high bandwidth
+		// finalLatency = maxLatencyPerRdRatio[curveDataIndex];
+		
+		// add penalty for the wave form section...
+		overflowFactor = overflowFactor + 0.02;
+		finalLatency = (1+overflowFactor) * maxLatencyPerRdRatio[curveDataIndex];		
+		finalLatency = convergeSpeed * finalLatency + (1-convergeSpeed) * lastEstimatedLatency;
+		
+
+		lastEstimatedBandwidth = finalBW;
+		lastEstimatedLatency = finalLatency;
+
+		outputBW = finalBW * 64  * 2.1;
+		// finalLatency = finalLatency + overflowFactor*(double)(finalLatency);
+		// cout << "overflow..." << endl;
+		
+		// cout << "finalLatency " << finalLatency << endl;
+
+		if(finalLatency<(uint32_t)leadOffLatency)
+			finalLatency=(uint32_t)leadOffLatency;
+		// put more assert
+		assert(finalLatency>= (uint32_t)leadOffLatency);
+
+		return (uint32_t) finalLatency;
+
+		// cout << "more than max! bandwidth: " << bandwidth << " max from curve: "<< maxBandwidthPerRdRatio[curveDataIndex] << endl;
+	}
+
+	
+
+	// find the latency that corresponds to the updated measured bandwidth: 
+	// use j later for extrapolation
+	uint32_t j;
+	for (j = 0; j < curves_data[curveDataIndex].size(); ++j)
+	{
+		// cout << "finalLatency " << finalLatency << " finalBW: " << finalBW << endl;
+		// cout << "curves_data[curveDataIndex][j][0]: " << curves_data[curveDataIndex][j][0] << " bandwidth " << bandwidth << endl;
+		if (finalBW == 0) {
+			finalBW = curves_data[curveDataIndex][j][0];
+			finalLatency = curves_data[curveDataIndex][j][1];
+		}
+		if (curves_data[curveDataIndex][j][0] >= bandwidth) {
+			finalBW = curves_data[curveDataIndex][j][0];
+			finalLatency = curves_data[curveDataIndex][j][1];
+		}
+		else {
+			break;
+		}
+		// cout << curves_data[curveDataIndex][j][0] << " " << curves_data[curveDataIndex][j][1] << endl;
+	}
+	// just a hack to see WTF is going on:
+	if(j==curves_data[curveDataIndex].size())
+		j--;
+
+	if (j!=0) {
+
+		// for easier readability
+		double x1 = curves_data[curveDataIndex][j][0];
+		double y1 = curves_data[curveDataIndex][j][1];
+		double x2 = curves_data[curveDataIndex][j-1][0];
+		double y2 = curves_data[curveDataIndex][j-1][1];
+		double x = bandwidth;
+		// cout << "bandwidth: " << bandwidth << endl;
+		// cout << "x1: " << x1 << "x2: " << x2 <<endl;
+		// cout << "y1: " << y1 << "y2: " << y2 <<endl;
+		// if we map between two data point, we draw a line between the two points
+		// and then map find corresponding latency on the line that connected the two points.
+		finalLatency = y1 + ((x - x1) / (x2 - x1)) * (y2 - y1);
+		// cout << "final y " << finalLatency << endl;
+		// overflow factor helps to stablize the system. maybe we do not need it after all. 
+		// double check its importance at the end of the debugging... 
+		// PID is a better idea
+		finalLatency += overflowFactor*finalLatency;
+
+		finalLatency = convergeSpeed * finalLatency + (1-convergeSpeed) * lastEstimatedLatency;
+		
+		// decrease overflow factor if we are not in that mood
+		if (overflowFactor>0.01) // never let the overflowFactor to overflow
+			overflowFactor = overflowFactor - 0.01;		
+	}
+	else {
+		// cout << "bandwidth: " << bandwidth << endl;
+		finalLatency += overflowFactor*finalLatency;
+		finalLatency = convergeSpeed * finalLatency + (1-convergeSpeed) * lastEstimatedLatency;
+		
+		// decrease overflow factor if we are not in that mood
+		if (overflowFactor>0.01) // never let the overflowFactor to overflow
+			overflowFactor = overflowFactor - 0.01;
+		// never let the overflowFactor to overflow
+		if (overflowFactor<0)
+		{
+			overflowFactor=0;
+		}
+	}
+	
+	// update the last estimated point to new values
+	lastEstimatedBandwidth = bandwidth;
+	lastEstimatedLatency = finalLatency;
+	outputBW = bandwidth * 64  * 2.1;
+	// cout << "lastEstimatedBandwidth: " << lastEstimatedBandwidth << endl;
+	// cout << "finalLatency " << finalLatency << "  leadOffLatency: " << leadOffLatency << endl;
+
+	if(finalLatency<= (uint32_t)leadOffLatency)
+		finalLatency = (uint32_t)leadOffLatency;
+	// sanity check
+	assert(finalLatency>= (uint32_t)leadOffLatency);
+
+
+	return finalLatency;
+
+
+}
+
+void BwLatMemCtrl::updateLatency(uint64_t currentWindowEndCyclen) {
+	// bandwidth unit is accesses per cycles
+	
+	// calculate bandwidth and rd_percentage
+	//double bandwidth = ((double)currentWindowAccessCount) / (double)(currentWindowEndCyclen - currentWindowStartCycle);
+	double bandwidth = (frequencyCPU/2.1) * ((double)currentWindowAccessCount) / (double)(currentWindowEndCyclen - currentWindowStartCycle);
+	double readPercentage = ((double)(currentWindowAccessCount_rd))/ (currentWindowAccessCount_rd+currentWindowAccessCount_wr);
+
+	latency = searchForLatencyOnCurve(bandwidth, readPercentage);
+	assert(latency>=0); 
+	// below sanity check is not correct. we cannot be that accurate. remember !!!
+	// assert(lastEstimatedLatency<=maxLatency);
+
+	// cout << "latency: " << latency << " cycles. readPercentage: " << readPercentage << endl;
+
+}
+
+uint64_t BwLatMemCtrl::access(uint64_t accessCycle, bool isWrite) {
+	
+	// bool isWrite;
+	// if(req.type == PUTS) {
+	// 	// clean write should not go to memory
+	// 	*req.state = I;
+	// 	return req.cycle + 1;
+	// }
+
+
+
+
+    // start cycle of our measuremnt window
+    if (currentWindowAccessCount==0) {
+    	currentWindowStartCycle = accessCycle;
+    	// cout << "currentWindowStartCycle: " << currentWindowStartCycle << endl;
+    }
+
+    // counting the number of accesses, reads and writes 
+    currentWindowAccessCount++;
+    if (isWrite) {
+    	currentWindowAccessCount_wr++;
+    	// isWrite = true;
+    }
+    else {
+    	currentWindowAccessCount_rd++;
+    	// isWrite = false;
+    }
+
+    // check if we are an the end of our measurment window
+    if(currentWindowAccessCount==curveWindowSize) {
+    	updateLatency(accessCycle);
+    	// cout << "currentWindowEndCycle: " << accessCycle << endl; 
+    	currentWindowAccessCount = 0; // reset the access as we enter a new window
+    	currentWindowAccessCount_wr = 0; // reset the access as we enter a new window
+    	currentWindowAccessCount_rd = 0; // reset the access as we enter a new window
+    }
+
+
+	// switch (req.type) {
+    //     case PUTS:
+    //     case PUTX:
+    //         *req.state = I;
+    //         break;
+    //     case GETS:
+    //         *req.state = req.is(MemReq::NOEXCL)? S : E;
+    //         break;
+    //     case GETX:
+    //         *req.state = M;
+    //         break;
+
+    //     default: panic("!?");
+    // }
+
+    // uint64_t respCycle = req.cycle + (uint64_t)latency;
+
+    // profile access latency
+    // if (isWrite)
+    // {
+    // 	profWrites.inc();
+    // 	profTotalWrLat.inc(latency);
+    // }
+    // else {
+    // 	profReads.inc();
+    // 	profTotalRdLat.inc(latency);
+    // }
+    // sanity check
+    // assert(respCycle > req.cycle);
+
+    // devide freq by 2.1 to get ns then translate to clock frequency
+    return (uint64_t) (frequencyCPU*latency/2.1);
+}
+
+uint64_t BwLatMemCtrl::GetQsMemLoadCycleLimit() {
+	uint32_t curveDataIndex = lastIntReadPercentage/2;
+	if(latency> (uint32_t)maxLatencyPerRdRatio[curveDataIndex])
+		return latency - (uint32_t)maxLatencyPerRdRatio[curveDataIndex];
+	else
+		return 0;
+}
+
+
diff --git a/piton/tools/pli/Realistic_lat/bw_lat_mem_ctrl.h b/piton/tools/pli/Realistic_lat/bw_lat_mem_ctrl.h
new file mode 100644
index 00000000..d58a0208
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/bw_lat_mem_ctrl.h
@@ -0,0 +1,96 @@
+#ifndef BW_LAT_MEM_CTRL_H_
+#define BW_LAT_MEM_CTRL_H_
+
+#include <fstream>
+#include <iostream>
+
+#include <cmath> // for floor function on implement round
+#include <stdint.h> // for uint32_t
+#include <cassert>
+#include <vector>
+#include <string>
+
+
+using namespace std;
+
+
+class BwLatMemCtrl {
+	private:
+		// bound latency
+		uint32_t latency;
+		// output bandwidth of the model GB/s
+		double outputBW;
+
+		double leadOffLatency, maxBandwidth, maxLatency;
+		// maximum theoritical bandwidth. We should get this from config file later 
+		// or we can remove it at the end. it is good for debugging but no use in our memory model
+		double MaxTheoreticalBW;
+
+		// we need this two numbers to define a PID-like controller to converge smoothly.
+		double lastEstimatedBandwidth;
+		double lastEstimatedLatency;
+
+		// overflow factor needs to be play with
+		double overflowFactor;
+
+
+		double frequencyCPU;
+		
+		// fisrt dimention: read percentafe
+		// second dimention data for each read percentage
+		// second dimention has two value 
+		// [0]: bandwidth (accesses/cycles) 
+		// [1]: latency (cycles)
+		vector<vector<vector<double> > > curves_data;
+
+		// maximum bandwidth and latency for the corresponding rd_percentage
+		vector<double> maxBandwidthPerRdRatio;
+		vector<uint32_t> maxLatencyPerRdRatio;
+
+		// address of the curve data
+		string curveAddress;
+		// 
+		uint32_t currentWindowAccessCount;
+		uint32_t currentWindowAccessCount_wr;
+		uint32_t currentWindowAccessCount_rd;
+		
+		uint32_t curveWindowSize;
+		
+		uint64_t currentWindowStartCycle;
+
+
+		uint32_t lastIntReadPercentage;
+
+
+
+		// // profiling counters
+        // Counter profReads;
+        // Counter profWrites;
+        // Counter profTotalRdLat;
+        // Counter profTotalWrLat;
+
+
+
+        // update the bound phase
+        void updateLatency(uint64_t currentWindowEndCyclen);
+        // a hack to make lead-off latency of all rd_percentage equal. 
+        void fitTheCurves();
+        // use the data of the curves to find appropriate latency
+        uint32_t searchForLatencyOnCurve(double bandwidth, double readPercentage);
+
+
+	public:
+		BwLatMemCtrl(string curveAddress, uint32_t curveWindowSize, double MaxTheoreticalBW, double frequencyRate);
+
+		uint64_t access(uint64_t accessCycle, bool isWrite);
+		// for ensuring the quality of service of memory system 
+		uint64_t GetQsMemLoadCycleLimit();
+		uint32_t getLeadOffLatency();
+		double getBandwidth();
+		
+};
+
+
+
+
+#endif  // BW_LAT_MEM_CTRL_H_
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/._bwlat_0.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/._bwlat_0.txt
new file mode 100644
index 0000000000000000000000000000000000000000..ff7e2d522a3a8657bcabca4af3f6c3bd3b6880f8
GIT binary patch
literal 4096
zcmZQz6=P>$Vqox1Ojhs@R)|o50+1L3ClDJkFz{^v(m+1nBL)UWIUt(=a103v0xH=8
z(ZR3)$QD4;!U*I;#if$-bM+Dn3UX5QauSP6N{drdQW8s2l>>r7dam_mr+{c7w?IJ<
zJqkucU^E0qLtr!nMnhmU1V%$(Gz3ONU^E0qLtr!nMneEs2!J}9APfd_AsLy)3Pq{K
z`K3k4sS0WNMcE3Oc_pcNC7Jnoi8(oy3OT81B??J7iFw(;zA#kRkfu=m5BG`;gWUiB
E0N$M`p8x;=

literal 0
HcmV?d00001

diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/._bwlat_6.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/._bwlat_6.txt
new file mode 100644
index 0000000000000000000000000000000000000000..9db1541053d4ea92a2721b3c0a7d7e10f06d4fa2
GIT binary patch
literal 4096
zcmZQz6=P>$Vqox1Ojhs@R)|o50+1L3ClDJkFz{^v(m+1nBL)UWIUt(=a103v0xH=G
z(ZR3)$QD4;!U*I;#if$-bM+Dn3UX5QauSP6N{drdQW8s2l>>r7dS-6QNCDB-=1Ni^
zdK8R?z-S1JhQMeDjE2By2#kinXb6mkz-S1JhQMeDjD`TN5CC;HK^P3=LNYRo6^c@e
z^Gl18Qx($ki?S6m^GZ_lN;32F5_57Y6>?J3N)(cE67#ZwePO7sAx)wBAMO<y2D$(L
E0hbpkc>n+a

literal 0
HcmV?d00001

diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_0.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_0.txt
new file mode 100644
index 00000000..bd1377a6
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_0.txt
@@ -0,0 +1,37 @@
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+24084.440749999998	
+23694.34219	
+22848.4349	
+22060.844800000003	
+21325.74222	
+18280.13816	
+15995.73161	
+14218.857469999999	
+12797.27576	
+8532.125320000001	
+6399.322068	
+4266.3667749999995	
+3199.832108	
+2559.89306	
+1279.973904	
+639.993796	
+319.998609	
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_10.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_10.txt
new file mode 100644
index 00000000..c187ee8a
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_10.txt
@@ -0,0 +1,37 @@
+26173.617	329.10360000000003
+26173.617	329.10360000000003
+26173.662490000002	329.14140000000003
+26173.662490000002	329.1435
+26173.662490000002	329.1435
+26173.662490000002	329.14140000000003
+26173.662490000002	329.1435
+26173.662490000002	329.1435
+26173.662490000002	329.13930000000005
+26173.662490000002	329.14140000000003
+26173.662490000002	329.1456
+26173.662490000002	329.13930000000005
+26173.662490000002	329.13930000000005
+26173.662490000002	329.1435
+26173.662490000002	329.1456
+26173.662490000002	329.1288
+26173.662490000002	329.1372
+26173.662490000002	329.09310000000005
+26173.54609	328.88730000000004
+25588.471729999997	288.498
+24604.65851	280.09170000000006
+23693.84507	276.38730000000004
+22847.981659999998	274.27049999999997
+22060.42795	272.5611
+21325.28443	270.0264
+18280.05636	263.4072
+15995.616849999999	258.2601
+14218.827940000001	251.6619
+12797.259900000001	248.8857
+8532.125320000001	238.99470000000002
+6399.322068	235.1412
+4266.3667749999995	231.01470000000003
+3199.832108	228.9483
+2559.89306	227.6568
+1279.973904	226.4682
+639.993796	225.7752
+319.998609	225.64079999999998
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_100.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_100.txt
new file mode 100644
index 00000000..93aa55f8
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_100.txt
@@ -0,0 +1,37 @@
+26758.8658	1285.0047000000002
+26758.8658	1285.0047000000002
+26758.8658	1285.0047000000002
+26758.8658	1285.0047000000002
+26758.8658	1285.0047000000002
+26758.8658	1285.0047000000002
+26758.8658	1285.0047000000002
+26758.8658	1285.0047000000002
+26758.8658	1284.9669000000001
+26758.8658	1284.8997
+26758.8658	1284.864
+26758.8658	1284.8136000000002
+26758.8658	1284.7485
+26758.8658	1284.6561
+26758.8658	1284.5175
+26758.8658	1284.2844
+26758.84202	1283.8182
+26758.7707	1282.3587000000002
+26654.091699999997	285.46560000000005
+25588.02614	259.1358
+24604.50655	250.6728
+23693.98525	245.7252
+22848.06222	242.44920000000002
+22060.55295	240.2589
+21325.307259999998	238.8288
+18279.95695	235.41420000000002
+15995.59028	234.10590000000002
+14218.73004	231.8169
+12797.18317	230.6745
+8532.084207	228.6543
+6399.298967	227.7996
+4266.356429	226.9764
+3199.825676	226.5165
+2559.8893519999997	226.275
+1279.9729790000001	225.79620000000003
+639.993248	225.6072
+319.998551	225.58410000000003
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_12.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_12.txt
new file mode 100644
index 00000000..d6960452
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_12.txt
@@ -0,0 +1,37 @@
+26635.36034	328.48199999999997
+26635.36034	328.5723
+26635.40745	328.31190000000004
+26635.40745	328.31190000000004
+26635.40745	328.31190000000004
+26635.40745	328.31190000000004
+26635.40745	328.31190000000004
+26635.40745	328.31190000000004
+26635.40745	328.3056
+26635.40745	328.3077
+26635.40745	328.3077
+26635.40745	328.3056
+26635.40745	328.3056
+26635.40745	328.30350000000004
+26635.40745	328.2993
+26635.40745	328.2972
+26635.40745	328.30350000000004
+26635.3839	328.3686
+26631.23617	326.3799
+25588.471729999997	284.6193
+24604.65851	278.8002
+23693.84507	275.3961
+22847.981659999998	273.1911
+22060.42795	271.6308
+21325.28443	269.30400000000003
+18280.05636	262.5063
+15995.616849999999	257.6385
+14218.827940000001	251.1411
+12797.259900000001	248.4027
+8532.125320000001	238.8099
+6399.322068	235.06560000000002
+4266.3667749999995	230.9181
+3199.832108	228.92100000000002
+2559.89306	227.66940000000002
+1279.973904	226.4052
+639.993796	225.75840000000002
+319.998609	225.645
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_14.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_14.txt
new file mode 100644
index 00000000..540008ab
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_14.txt
@@ -0,0 +1,37 @@
+27108.7582	328.1628
+27108.7582	328.1628
+27108.83141	328.20689999999996
+27108.83141	328.20689999999996
+27108.83141	328.209
+27108.83141	328.20689999999996
+27108.83141	328.20689999999996
+27108.83141	328.20689999999996
+27108.83141	328.20270000000005
+27108.83141	328.20270000000005
+27108.83141	328.20689999999996
+27108.83141	328.1964
+27108.83141	328.20480000000003
+27108.83141	328.1985
+27108.83141	328.1943
+27108.83141	328.1985
+27108.80701	328.05150000000003
+27108.733799999998	327.82680000000005
+26653.80939	295.24320000000006
+25588.47538	282.45210000000003
+24605.06712	277.56750000000005
+23693.842239999998	274.5099
+22847.97875	272.3112
+22060.42252	270.7362
+21325.27199	268.5312
+18280.06186	261.8427
+15995.615430000002	257.0127
+14218.827940000001	250.6602
+12797.259900000001	247.95120000000003
+8532.125320000001	238.5684
+6399.322068	234.8913
+4266.3667749999995	230.8236
+3199.832108	228.87480000000002
+2559.89306	227.65890000000002
+1279.973904	226.422
+639.993796	225.7353
+319.998609	225.63870000000003
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_16.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_16.txt
new file mode 100644
index 00000000..b1e1fa8b
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_16.txt
@@ -0,0 +1,37 @@
+27612.6233	327.2892
+27612.6233	327.2892
+27612.699249999998	327.25350000000003
+27612.699249999998	327.2556
+27612.699249999998	327.2556
+27612.699249999998	327.2556
+27612.699249999998	327.2556
+27612.699249999998	327.25350000000003
+27612.699249999998	327.25350000000003
+27612.699249999998	327.25350000000003
+27612.699249999998	327.25350000000003
+27612.699249999998	327.24300000000005
+27612.699249999998	327.2472
+27612.699249999998	327.2556
+27612.699249999998	327.2472
+27612.699249999998	327.2367
+27612.67393	327.2199
+27612.471400000002	326.4282
+26653.85657	287.9268
+25588.46808	280.8708
+24605.06712	276.591
+23694.070839999997	273.5985
+22848.21212	271.4103
+22060.65637	269.9466
+21325.53835	267.8025
+18280.050769999998	261.0888
+15995.615430000002	256.4142
+14218.827940000001	250.2738
+12797.259900000001	247.62570000000002
+8532.125320000001	238.36470000000003
+6399.322068	234.75270000000003
+4266.3667749999995	230.7732
+3199.832108	228.8853
+2559.89306	227.6001
+1279.973904	226.36950000000002
+639.993796	225.7311
+319.998609	225.6282
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_18.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_18.txt
new file mode 100644
index 00000000..f90954d9
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_18.txt
@@ -0,0 +1,37 @@
+28131.3688	326.77049999999997
+28131.3688	326.76840000000004
+28131.42136	326.6508
+28131.42136	326.65290000000005
+28131.42136	326.65500000000003
+28131.42136	326.65290000000005
+28131.42136	326.65500000000003
+28131.42136	326.6508
+28131.42136	326.6508
+28131.42136	326.6508
+28131.42136	326.6508
+28131.42136	326.634
+28131.42136	326.6445
+28131.42136	326.63820000000004
+28131.42136	326.634
+28131.42136	326.61510000000004
+28131.39477	326.5101
+27812.84646	304.0758
+26653.80939	284.6088
+25588.46442	279.3336
+24605.08063	275.50739999999996
+23694.070839999997	272.6535
+22848.21212	270.6438
+22060.65637	269.05620000000005
+21325.53328	267.1536
+18280.050769999998	260.4189
+15995.615430000002	255.7632
+14218.827940000001	249.75930000000002
+12797.259900000001	247.1847
+8532.125320000001	238.1043
+6399.322068	234.55949999999999
+4266.3667749999995	230.6682
+3199.832108	228.8055
+2559.89306	227.5329
+1279.973904	226.3611
+639.993796	225.72690000000003
+319.998609	225.6429
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_2.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_2.txt
new file mode 100644
index 00000000..2fa59739
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_2.txt
@@ -0,0 +1,37 @@
+24474.883429999998	331.52700000000004
+24474.883429999998	331.5249
+24474.883429999998	331.5249
+24474.883429999998	331.5228
+24474.883429999998	331.5228
+24474.883429999998	331.53120000000007
+24474.883429999998	331.53120000000007
+24474.883429999998	331.53120000000007
+24474.883429999998	331.5291
+24474.883429999998	331.5354
+24474.883429999998	331.5375
+24474.883429999998	331.5333
+24474.883429999998	331.53120000000007
+24474.883429999998	331.5333
+24474.883429999998	331.5501
+24474.883429999998	331.54170000000005
+24474.883429999998	331.53120000000007
+24474.883429999998	331.5354
+24474.883429999998	331.54170000000005
+24474.883429999998	331.5102
+24474.84365	330.86969999999997
+23694.16136	280.497
+22848.269940000002	277.6956
+22060.69399	275.26590000000004
+21325.616749999997	272.97900000000004
+18280.063720000002	265.8663
+15995.615430000002	260.4168
+14218.827940000001	253.0605
+12797.259900000001	250.28220000000002
+8532.125320000001	239.47140000000002
+6399.322068	235.57170000000002
+4266.3667749999995	230.99370000000002
+3199.832108	229.0764
+2559.89306	227.77650000000003
+1279.973904	226.55220000000003
+639.993796	225.7794
+319.998609	225.68280000000001
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_20.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_20.txt
new file mode 100644
index 00000000..f9c4df83
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_20.txt
@@ -0,0 +1,37 @@
+28665.885150000002	326.23920000000004
+28665.885150000002	326.23920000000004
+28665.93971	326.22450000000003
+28665.93971	326.22450000000003
+28665.93971	326.2266
+28665.93971	326.22450000000003
+28665.93971	326.22450000000003
+28665.93971	326.22450000000003
+28665.93971	326.2182
+28665.93971	326.2182
+28665.93971	326.2182
+28665.93971	326.2098
+28665.93971	326.2077
+28665.93971	326.19509999999997
+28665.93971	326.214
+28665.93971	326.1426
+28665.85754	325.6428
+27812.84214	292.06800000000004
+26653.80939	282.5487
+25588.46808	278.0106
+24605.08063	274.533
+23694.070839999997	271.8702
+22848.21212	269.7765
+22060.65637	268.2603
+21325.53581	266.40180000000004
+18280.050769999998	259.7763
+15995.615430000002	255.192
+14218.827940000001	249.33300000000003
+12797.259900000001	246.7542
+8532.125320000001	237.89010000000002
+6399.322068	234.4062
+4266.3667749999995	230.6031
+3199.832108	228.75300000000001
+2559.89306	227.514
+1279.973904	226.34640000000002
+639.993796	225.6933
+319.998609	225.6282
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_22.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_22.txt
new file mode 100644
index 00000000..f2afe0db
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_22.txt
@@ -0,0 +1,37 @@
+29217.81893	325.3992
+29217.81893	325.3992
+29217.90397	325.45590000000004
+29217.90397	325.45590000000004
+29217.90397	325.45590000000004
+29217.875620000003	325.5504
+29217.90397	325.45590000000004
+29217.90397	325.45380000000006
+29217.90397	325.44960000000003
+29217.90397	325.4475
+29217.90397	325.437
+29217.90397	325.4349
+29217.90397	325.4328
+29217.90397	325.4223
+29217.90397	325.4097
+29217.90397	325.2837
+29075.419719999998	315.0357
+27812.84646	287.4102
+26653.805429999997	280.6986
+25588.46808	276.8094
+24605.08063	273.6048
+23694.070839999997	271.0638
+22848.21212	268.9071
+22060.65637	267.5127
+21325.53581	265.6542
+18280.050769999998	259.1211
+15995.615430000002	254.5851
+14218.827940000001	248.8542
+12797.259900000001	246.34680000000003
+8532.125320000001	237.69060000000002
+6399.322068	234.2487
+4266.3667749999995	230.4981
+3199.832108	228.65640000000002
+2559.89306	227.4636
+1279.973904	226.3317
+639.993796	225.6786
+319.998609	225.6303
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_24.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_24.txt
new file mode 100644
index 00000000..3a79d47b
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_24.txt
@@ -0,0 +1,37 @@
+29796.05118	325.2858
+29796.05118	325.2837
+29796.1691	325.1682
+29796.19857	325.10310000000004
+29796.19857	325.0968
+29796.1691	325.16610000000003
+29796.19857	325.0947
+29796.1691	325.16610000000003
+29796.19857	325.0905
+29796.19857	325.0863
+29796.19857	325.08000000000004
+29796.22805	325.0695
+29796.19857	325.07370000000003
+29796.19857	325.1367
+29796.19857	325.01700000000005
+29796.1691	324.77970000000005
+29076.41408	297.3747
+27812.83783	284.44290000000007
+26653.805429999997	279.1614
+25588.46077	275.66490000000005
+24605.08063	272.6388
+23694.09605	270.21750000000003
+22848.162200000002	268.16790000000003
+22060.65922	266.7357
+21325.34785	265.02000000000004
+18280.06186	258.5247
+15995.615430000002	254.04540000000003
+14218.827940000001	248.4615
+12797.259900000001	245.95200000000003
+8532.125320000001	237.4596
+6399.322068	234.0618
+4266.3667749999995	230.391
+3199.832108	228.6081
+2559.89306	227.43210000000002
+1279.973904	226.3128
+639.993796	225.6576
+319.998609	225.6471
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_26.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_26.txt
new file mode 100644
index 00000000..de4981be
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_26.txt
@@ -0,0 +1,37 @@
+30406.62438	324.74399999999997
+30406.62438	324.74190000000004
+30406.74717	324.5634
+30406.808569999997	324.6222
+30406.808569999997	324.6201
+30406.808569999997	324.6201
+30406.808569999997	324.61800000000005
+30406.808569999997	324.61800000000005
+30406.808569999997	324.60540000000003
+30406.808569999997	324.6201
+30406.808569999997	324.60540000000003
+30406.808569999997	324.58860000000004
+30406.808569999997	324.60330000000005
+30406.86997	324.6075
+30406.808569999997	324.4164
+30393.97808	322.50120000000004
+29075.97078	290.26410000000004
+27812.85077	282.2169
+26653.805429999997	277.8342
+25588.46077	274.533
+24605.08063	271.6224
+23694.09605	269.4237
+22848.162200000002	267.3804
+22060.65922	265.9251
+21325.34785	264.28290000000004
+18280.06186	257.8989
+15995.615430000002	253.48890000000003
+14218.827940000001	248.03940000000003
+12797.259900000001	245.6034
+8532.125320000001	237.2223
+6399.322068	233.90220000000002
+4266.3667749999995	230.32590000000002
+3199.832108	228.55140000000003
+2559.89306	227.4237
+1279.973904	226.30020000000002
+639.993796	225.645
+319.998609	225.6345
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_28.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_28.txt
new file mode 100644
index 00000000..4dd5e10e
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_28.txt
@@ -0,0 +1,37 @@
+31033.4044	324.41850000000005
+31033.4044	324.41850000000005
+31033.564290000002	324.4101
+31033.59626	324.46889999999996
+31033.59626	324.46470000000005
+31033.59626	324.46680000000003
+31033.59626	324.4626
+31033.59626	324.4626
+31033.62824	324.47520000000003
+31033.62824	324.45
+31033.59626	324.46470000000005
+31033.59626	324.45
+31033.59626	324.4101
+31033.59626	324.3786
+31033.46835	324.12870000000004
+30459.738839999998	303.1266
+29075.93822	286.6332
+27812.83783	280.5138
+26653.805429999997	276.5322
+25588.46077	273.4704
+24605.08063	270.83910000000003
+23694.09605	268.5837
+22848.162200000002	266.56350000000003
+22060.65922	265.1985
+21325.34785	263.53110000000004
+18280.06186	257.2542
+15995.615430000002	252.8988
+14218.827940000001	247.61520000000002
+12797.259900000001	245.1981
+8532.125320000001	237.0039
+6399.322068	233.72580000000002
+4266.3667749999995	230.2167
+3199.832108	228.49470000000002
+2559.89306	227.39010000000002
+1279.973904	226.28340000000003
+639.993796	225.645
+319.998609	225.63660000000002
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_30.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_30.txt
new file mode 100644
index 00000000..91745ebb
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_30.txt
@@ -0,0 +1,37 @@
+31683.73484	324.0069
+31683.768180000003	324.06570000000005
+31683.86817	324.135
+31683.96816	324.0615
+31683.96816	324.0594
+31683.96816	324.0594
+31683.96816	324.0573
+31683.96816	324.0573
+31683.96816	324.0489
+31684.10149	324.093
+31684.001500000002	324.0363
+31684.06816	324.0321
+31684.13482	324.0636
+31683.93483	323.8851
+31681.80906	323.169
+30459.738839999998	294.0567
+29076.42351	284.1615
+27812.83783	279.1194
+26653.805429999997	275.3919
+25588.46077	272.4057
+24604.47615	269.9067
+23694.09605	267.6555
+22848.162200000002	265.776
+22060.65922	264.3963
+21325.34785	262.8192
+18280.06186	256.64520000000005
+15995.615430000002	252.29610000000002
+14218.827940000001	247.21200000000002
+12797.259900000001	244.7802
+8532.125320000001	236.8107
+6399.322068	233.5893
+4266.3667749999995	230.1369
+3199.832108	228.4506
+2559.89306	227.3733
+1279.973904	226.2729
+639.993796	225.6492
+319.998609	225.61980000000003
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_32.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_32.txt
new file mode 100644
index 00000000..e80f44a7
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_32.txt
@@ -0,0 +1,37 @@
+32362.70492	323.85360000000003
+32362.73969	323.9103
+32362.913570000004	324.0489
+32362.878790000002	323.95230000000004
+32362.844019999997	323.9334
+32362.878790000002	323.9481
+32362.948350000002	324.0237
+32362.948350000002	324.0216
+32362.948350000002	324.0321
+32362.948350000002	324.0195
+32362.913570000004	323.9985
+32362.878790000002	323.8935
+32362.774469999997	323.8872
+32362.73969	323.6247
+31981.509110000003	310.1406
+30459.40244	289.3779
+29075.763290000003	282.2253
+27812.25532	277.69350000000003
+26653.812980000002	274.3209
+25588.41694	271.4859
+24604.469399999998	269.01840000000004
+23693.84507	266.8869
+22847.70503	265.0305
+22060.64306	263.6445
+21325.34785	262.1052
+18280.05085	256.0446
+15995.611280000001	251.72700000000003
+14218.82122	246.7731
+12797.259900000001	244.4127
+8532.125320000001	236.6091
+6399.322068	233.44650000000001
+4266.3667749999995	230.0508
+3199.832108	228.4002
+2559.89306	227.35860000000002
+1279.973904	226.26450000000003
+639.993796	225.65130000000002
+319.998609	225.6261
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_34.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_34.txt
new file mode 100644
index 00000000..4ce8d09f
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_34.txt
@@ -0,0 +1,37 @@
+33070.79504	323.4483
+33070.79504	323.4462
+33070.940290000006	323.4714
+33070.940290000006	323.4714
+33070.976610000005	323.4819
+33070.976610000005	323.4798
+33071.04924	323.4105
+33071.01292	323.5071
+33071.04924	323.41470000000004
+33070.976610000005	323.4231
+33070.86767	323.3979
+33070.976610000005	323.5197
+33070.86767	323.2866
+33069.85092	323.00520000000006
+31981.81774	298.5696
+30459.40244	286.19010000000003
+29075.763290000003	280.4886
+27812.24237	276.4734
+26653.812980000002	273.1239
+25588.41694	270.4464
+24604.469399999998	268.0503
+23693.84507	266.0322
+22847.70503	264.2598
+22060.64306	262.8591
+21325.34785	261.3702
+18280.05085	255.42720000000003
+15995.611280000001	251.1537
+14218.82122	246.30900000000003
+12797.259900000001	244.0347
+8532.125320000001	236.3865
+6399.322068	233.27640000000002
+4266.3667749999995	229.96470000000002
+3199.832108	228.3435
+2559.89306	227.30820000000003
+1279.973904	226.2561
+639.993796	225.6429
+319.998609	225.6282
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_36.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_36.txt
new file mode 100644
index 00000000..362ce190
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_36.txt
@@ -0,0 +1,37 @@
+33812.958629999994	323.43780000000004
+33812.958629999994	323.4357
+33813.073430000004	323.56590000000006
+33813.18324	323.5113
+33813.1117	323.58060000000006
+33813.1117	323.5785
+33813.18324	323.50500000000005
+33813.14528	323.5176
+33813.29713	323.5176
+33813.03516	323.49240000000003
+33813.1117	323.55330000000004
+33812.87955	323.35380000000004
+33812.7277	323.23830000000004
+33659.360550000005	317.2386
+31981.509110000003	292.6854
+30459.40244	283.93890000000005
+29075.78215	279.06899999999996
+27812.23806	275.3247
+26653.812980000002	272.1705
+25588.41694	269.5623
+24604.469399999998	267.2376
+23693.84507	265.272
+22847.70503	263.5206
+22060.64306	262.1304
+21325.34785	260.7171
+18280.05085	254.877
+15995.611280000001	250.6413
+14218.82122	245.8911
+12797.259900000001	243.67140000000003
+8532.125320000001	236.2059
+6399.322068	233.1189
+4266.3667749999995	229.887
+3199.832108	228.2931
+2559.89306	227.2788
+1279.973904	226.2519
+639.993796	225.6534
+319.998609	225.6303
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_38.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_38.txt
new file mode 100644
index 00000000..d90b68e2
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_38.txt
@@ -0,0 +1,37 @@
+34584.58365	323.6793
+34584.623360000005	323.6982
+34584.78222	323.57640000000004
+34584.7425	323.5092
+34584.7425	323.5071
+34584.78222	323.56800000000004
+34584.82193	323.52810000000005
+34584.90136	323.5785
+34584.90136	323.5575
+34584.7425	323.4987
+34584.54393	323.51550000000003
+34584.42479	323.526
+34583.98795	323.1375
+33662.48911	303.8637
+31981.783239999997	289.1385
+30459.40244	282.0993
+29075.763290000003	277.6851
+27812.605229999997	274.13820000000004
+26653.82524	271.13100000000003
+25588.42425	268.7097
+24604.469399999998	266.43330000000003
+23693.84507	264.4635
+22847.699200000003	262.73310000000004
+22060.65107	261.3723
+21325.35292	259.9926
+18280.05272	254.22180000000003
+15995.611280000001	250.0974
+14218.82122	245.47110000000004
+12797.259900000001	243.27030000000002
+8532.125320000001	235.9833
+6399.322068	232.9635
+4266.3667749999995	229.7925
+3199.832108	228.2427
+2559.89306	227.2662
+1279.973904	226.23930000000001
+639.993796	225.6471
+319.998609	225.6303
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_4.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_4.txt
new file mode 100644
index 00000000..c9cf1751
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_4.txt
@@ -0,0 +1,37 @@
+24876.48842	331.39050000000003
+24876.48842	331.3884
+24876.48842	331.3863
+24876.48842	331.3863
+24876.48842	331.3863
+24876.48842	331.3884
+24876.48842	331.3884
+24876.48842	331.39050000000003
+24876.48842	331.3842
+24876.48842	331.3947
+24876.48842	331.3947
+24876.48842	331.3926
+24876.48842	331.3926
+24876.48842	331.3926
+24876.48842	331.3968
+24876.48842	331.3968
+24876.48842	331.3863
+24876.48842	331.3863
+24876.48842	331.3779
+24876.48842	331.3401
+24605.06712	287.41650000000004
+23694.1551	279.3336
+22848.26412	277.21470000000005
+22060.702129999998	274.6569
+21325.61168	272.1726
+18280.063720000002	265.5366
+15995.616849999999	259.9359
+14218.827940000001	252.92610000000002
+12797.259900000001	250.1226
+8532.125320000001	239.6121
+6399.322068	235.6662
+4266.3667749999995	231.1806
+3199.832108	228.9882
+2559.89306	227.6484
+1279.973904	226.5564
+639.993796	225.84660000000002
+319.998609	225.6597
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_40.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_40.txt
new file mode 100644
index 00000000..7374d9c5
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_40.txt
@@ -0,0 +1,37 @@
+35404.48401	324.0027
+35404.48401	324.0027
+35404.56725	323.8872
+35404.56725	323.8851
+35404.60887	323.883
+35404.692109999996	323.8599
+35404.73373	323.91870000000006
+35404.65049	323.8704
+35404.90021	323.9817
+35404.65049	323.8725
+35404.15106	323.9838
+35402.86093	323.60580000000004
+35390.50689	322.0959
+33662.45751	296.74050000000005
+31981.806330000003	286.5387
+30459.40244	280.51590000000004
+29075.94765	276.4356
+27812.29847	273.05460000000005
+26653.82524	270.1839
+25587.989619999997	267.83820000000003
+24604.469399999998	265.5723
+23693.804360000002	263.7054
+22847.78975	261.9834
+22060.39266	260.6016
+21325.32019	259.2681
+18280.03053	253.6002
+15995.508389999999	249.5241
+14218.827940000001	245.03220000000002
+12797.259900000001	242.8608
+8532.125320000001	235.77960000000002
+6399.322068	232.785
+4266.3667749999995	229.6875
+3199.832108	228.17130000000003
+2559.89306	227.24099999999999
+1279.973904	226.2183
+639.993796	225.6345
+319.998609	225.6303
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_42.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_42.txt
new file mode 100644
index 00000000..5ab37d4c
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_42.txt
@@ -0,0 +1,37 @@
+36251.93753	324.4164
+36251.93753	324.4143
+36251.98117	324.38070000000005
+36252.15571	324.39330000000007
+36252.112080000006	324.3387
+36252.28662	324.3723
+36252.33026	324.3786
+36252.417530000006	324.3387
+36252.504799999995	324.30719999999997
+36252.54844	324.2715
+36251.63209	324.26730000000003
+36250.67214	323.84310000000005
+35532.91962	309.41400000000004
+33662.50808	292.56989999999996
+31981.87426	284.3883
+30459.40244	279.0543
+29075.94765	275.2386
+27812.29847	271.97520000000003
+26653.81335	269.2578
+25587.989619999997	266.9688
+24604.469399999998	264.7239
+23693.804360000002	262.9389
+22847.78975	261.1854
+22060.39266	259.8645
+21325.32019	258.5562
+18280.03053	252.9723
+15995.53693	248.9361
+14218.827940000001	244.5975
+12797.259900000001	242.4597
+8532.125320000001	235.54440000000002
+6399.322068	232.63170000000002
+4266.3667749999995	229.5993
+3199.832108	228.1104
+2559.89306	227.199
+1279.973904	226.2183
+639.993796	225.63240000000002
+319.998609	225.6282
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_44.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_44.txt
new file mode 100644
index 00000000..3482850b
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_44.txt
@@ -0,0 +1,37 @@
+37135.36881	324.9477
+37135.32302	325.04010000000005
+37135.36881	324.9456
+37135.551960000004	324.996
+37135.59775	325.11780000000005
+37135.78091	325.0086
+37135.918269999995	324.9624
+37135.918269999995	324.9162
+37135.918269999995	324.94350000000003
+37135.139870000006	325.0107
+37132.32447	324.9057
+37124.29135	323.9124
+35532.85691	301.4802
+33662.48279	289.6614
+31981.84654	282.80280000000005
+30459.340829999997	277.84260000000006
+29075.92946	274.1844
+27812.160389999997	271.026
+26653.860529999998	268.4283
+25587.985969999998	266.1729
+24604.32082	263.9826
+23693.82643	262.1724
+22847.76617	260.4609
+22060.39266	259.1274
+21325.317890000002	257.8779
+18279.90156	252.33390000000003
+15995.53693	248.39010000000002
+14218.67795	244.16490000000002
+12797.174939999999	242.0754
+8532.091922	235.3197
+6399.309018	232.4595
+4266.366384	229.5048
+3199.832108	228.0537
+2559.89306	227.16330000000002
+1279.973904	226.19729999999998
+639.993796	225.624
+319.998609	225.6303
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_46.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_46.txt
new file mode 100644
index 00000000..5fcb5898
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_46.txt
@@ -0,0 +1,37 @@
+38053.07379	326.2035
+38053.121869999995	326.1468
+38053.121869999995	326.1468
+38053.314190000005	326.32950000000005
+38053.45843	326.2833
+38053.65076	326.15310000000005
+38053.60266999999	326.15310000000005
+38053.89116	326.1993
+38053.41035	326.214
+38051.871849999996	326.1489
+38049.66047	325.9347
+37620.22719	317.1882
+35532.94847	296.6166
+33662.50808	287.5278
+31981.81666	281.3496
+30459.340829999997	276.5973
+29075.9243	273.18690000000004
+27811.83679	270.0747
+26653.860529999998	267.5316
+25587.985969999998	265.3329
+24604.32082	263.1951
+23693.82643	261.4164
+22847.76617	259.686
+22060.42252	258.42810000000003
+21325.3377	257.1807
+18279.90156	251.6997
+15995.53693	247.8546
+14218.67795	243.77640000000002
+12797.174939999999	241.6869
+8532.091922	235.08870000000002
+6399.30904	232.28730000000002
+4266.364957999999	229.4166
+3199.832108	228.01170000000002
+2559.89306	227.136
+1279.973904	226.1868
+639.993796	225.6261
+319.998609	225.61980000000003
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_48.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_48.txt
new file mode 100644
index 00000000..223c3532
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_48.txt
@@ -0,0 +1,37 @@
+39018.35527	328.3161
+39018.35527	328.31820000000005
+39018.35527	328.3161
+39018.559089999995	328.38960000000003
+39018.83085	328.1019
+39020.62187	328.30350000000004
+39018.932759999996	328.1817
+39020.62187	328.2909
+39018.74592	328.3098
+39018.65031	327.9003
+39005.34089	326.9658
+37621.5385	308.0973
+35533.05143	293.5695
+33662.52704	285.75540000000007
+31981.858500000002	280.0518
+30459.340829999997	275.4696
+29075.85446	272.11800000000005
+27812.03095	269.1465
+26653.860529999998	266.658
+25588.00423	264.4929
+24604.32082	262.4244
+23693.804360000002	260.7087
+22847.77491	258.951
+22060.42252	257.71410000000003
+21325.312700000002	256.50030000000004
+18279.86614	251.0991
+15995.538359999999	247.29600000000002
+14218.68697	243.3564
+12797.174939999999	241.2606
+8532.091922	234.8598
+6399.30904	232.0983
+4266.364957999999	229.3284
+3199.832108	227.95710000000003
+2559.89306	227.10660000000001
+1279.973904	226.1721
+639.993796	225.6282
+319.998609	225.62189999999998
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_50.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_50.txt
new file mode 100644
index 00000000..0f76bdcd
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_50.txt
@@ -0,0 +1,37 @@
+40021.205010000005	331.2813
+40021.205010000005	331.2813
+40021.205010000005	331.27920000000006
+40021.330089999996	331.2225
+40022.32167	331.07550000000003
+40022.5876	331.3926
+40022.64078	331.38000000000005
+40022.69397	331.2855
+40023.91727	331.26660000000004
+40018.59912	330.45180000000005
+39905.145619999996	325.9116
+37621.5306	303.1686
+35533.03734	291.3981
+33662.52704	284.2896
+31981.858500000002	278.9388
+30459.340829999997	274.449
+29075.8731	271.2129
+27812.03095	268.2561
+26653.860529999998	265.8411
+25588.00423	263.69280000000003
+24604.32082	261.6495
+23693.804360000002	259.95270000000005
+22847.77491	258.2412
+22060.42252	257.0253
+21325.312700000002	255.79050000000004
+18279.86614	250.48170000000002
+15995.538359999999	246.75840000000002
+14218.68697	242.91750000000002
+12797.174939999999	240.8553
+8532.091922	234.6225
+6399.30904	231.9282
+4266.364957999999	229.23390000000003
+3199.832108	227.8899
+2559.89306	227.0793
+1279.973904	226.14060000000003
+639.993796	225.624
+319.998609	225.62189999999998
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_52.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_52.txt
new file mode 100644
index 00000000..83f211a3
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_52.txt
@@ -0,0 +1,37 @@
+41055.52784	336.2751
+41055.52784	336.2751
+41055.52784	336.273
+41055.63978	336.28770000000003
+41055.97558	336.2205
+41056.19944	336.1974
+41056.19944	336.3066
+41056.47928	336.2352
+41056.47928	336.2625
+41044.505549999994	333.9084
+39970.42349	317.75520000000006
+37621.5306	300.0102
+35533.025270000006	289.7097
+33662.52704	283.14300000000003
+31981.858500000002	277.9035
+30459.340829999997	273.5754
+29075.8731	270.3099
+27812.03095	267.4434
+26653.860529999998	265.0557
+25588.00423	262.8969
+24604.32082	260.92080000000004
+23693.804360000002	259.2366
+22847.77491	257.5251
+22060.42252	256.3533
+21325.312700000002	255.0912
+18279.86614	249.90840000000003
+15995.538359999999	246.2229
+14218.68697	242.508
+12797.174939999999	240.4563
+8532.091922	234.38940000000002
+6399.30904	231.7707
+4266.364957999999	229.1478
+3199.832108	227.829
+2559.89306	227.03730000000002
+1279.973904	226.1259
+639.993796	225.6282
+319.998609	225.61560000000003
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_54.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_54.txt
new file mode 100644
index 00000000..b5d090fd
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_54.txt
@@ -0,0 +1,37 @@
+42129.34532	346.44120000000004
+42129.40425	346.3278
+42129.40425	346.32570000000004
+42129.34532	346.2669
+42129.87571	346.45590000000004
+42129.757840000006	346.2081
+42130.347180000004	346.0695
+42130.52398	346.15560000000005
+42131.87953	346.29210000000006
+42075.080350000004	338.35620000000006
+39971.14535	312.9819
+37621.46744	298.14330000000007
+35533.025270000006	288.46650000000005
+33662.52704	282.06570000000005
+31981.82454	276.99
+30459.340829999997	272.78790000000004
+29075.84503	269.5224
+27812.026629999997	266.6286
+26653.860529999998	264.2514
+25588.00423	262.1871
+24604.32082	260.20050000000003
+23693.804360000002	258.4995
+22847.77491	256.7712
+22060.42252	255.6981
+21325.32816	254.43810000000002
+18279.90529	249.33300000000003
+15995.538359999999	245.6748
+14218.69373	242.09010000000004
+12797.174939999999	240.0846
+8532.091922	234.17520000000002
+6399.30904	231.60690000000002
+4266.364957999999	229.05120000000002
+3199.832108	227.7828
+2559.89306	227.01
+1279.973904	226.11960000000002
+639.993796	225.624
+319.998609	225.60300000000004
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_56.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_56.txt
new file mode 100644
index 00000000..c881f0a4
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_56.txt
@@ -0,0 +1,37 @@
+43245.250140000004	378.81690000000003
+43245.6245	378.3738
+43246.680159999996	377.78790000000004
+43246.680159999996	377.4939
+43246.89647	378.5985
+43246.114030000004	378.2331
+43246.80435	377.8908
+43246.114030000004	378.7371
+43247.898030000004	378.50610000000006
+42633.11776	340.12440000000004
+39971.181000000004	310.8231
+37621.46744	297.01770000000005
+35533.04640000001	287.5341
+33662.48911	281.1837
+31981.82454	276.192
+30459.340829999997	271.95210000000003
+29075.81696	268.7454
+27812.026629999997	265.8411
+26653.852600000002	263.4912
+25588.00423	261.4038
+24604.32082	259.4886
+23693.804360000002	257.8002
+22847.77491	256.0887
+22060.42252	255.01560000000003
+21325.32816	253.7871
+18279.90529	248.75130000000001
+15995.538359999999	245.14350000000002
+14218.69373	241.6848
+12797.174939999999	239.6856
+8532.091922	233.95260000000002
+6399.30904	231.4557
+4266.364957999999	228.97770000000003
+3199.832108	227.7324
+2559.89306	226.9806
+1279.973904	226.1091
+639.993796	225.624
+319.998609	225.60090000000002
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_58.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_58.txt
new file mode 100644
index 00000000..ace57e99
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_58.txt
@@ -0,0 +1,37 @@
+43646.90444	777.3234
+43650.21565	775.9689000000001
+43653.46155	776.9979000000001
+43643.45145	779.3247000000001
+43641.680700000004	777.2184
+43654.90793	777.5481000000001
+43640.66903	780.7548
+43643.17482	778.1088000000001
+43648.5179	782.6469000000001
+42633.50303	348.3879
+39971.181000000004	311.0667
+37621.459539999996	296.75100000000003
+35533.04640000001	286.94190000000003
+33662.52072	280.5873
+31981.858500000002	275.5242
+30459.340829999997	271.24230000000006
+29075.85423	267.98940000000005
+27812.15608	265.1229
+26653.852600000002	262.77090000000004
+25588.00423	260.7087
+24604.32082	258.7788
+23693.804360000002	257.09040000000005
+22847.77491	255.38940000000002
+22060.42252	254.3541
+21325.323210000002	253.0962
+18279.86614	248.1507
+15995.538359999999	244.5912
+14218.69373	241.24380000000002
+12797.174939999999	239.2761
+8532.091922	233.72160000000002
+6399.30904	231.2919
+4266.364957999999	228.88950000000003
+3199.832108	227.66940000000002
+2559.89306	226.95120000000003
+1279.973904	226.0923
+639.993796	225.6261
+319.998609	225.6114
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_6.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_6.txt
new file mode 100644
index 00000000..b3c9bb3d
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_6.txt
@@ -0,0 +1,37 @@
+25296.27265	330.6618
+25296.27265	330.6639
+25296.27265	330.6618
+25296.27265	330.6597
+25296.27265	330.6597
+25296.27265	330.6639
+25296.27265	330.6639
+25296.27265	330.66600000000005
+25296.27265	330.6513
+25296.27265	330.6576
+25296.27265	330.66600000000005
+25296.27265	330.6576
+25296.27265	330.6597
+25296.27265	330.66600000000005
+25296.27265	330.67019999999997
+25296.27265	330.66600000000005
+25296.27265	330.6597
+25296.27265	330.6639
+25296.27265	330.6093
+25296.12393	330.3489
+24605.077260000002	283.6008
+23694.16136	278.20799999999997
+22848.26412	275.9862
+22060.6967	273.8589
+21325.60914	271.54260000000005
+18280.063720000002	264.8688
+15995.616849999999	259.3962
+14218.827940000001	252.5796
+12797.259900000001	249.72570000000002
+8532.125320000001	239.4147
+6399.322068	235.4793
+4266.3667749999995	231.0798
+3199.832108	228.97560000000001
+2559.89306	227.7681
+1279.973904	226.58790000000002
+639.993796	225.8403
+319.998609	225.63660000000002
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_60.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_60.txt
new file mode 100644
index 00000000..cb802dc5
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_60.txt
@@ -0,0 +1,37 @@
+42800.304339999995	895.9314
+42802.43327	896.2233000000001
+42803.8324	896.6811
+42798.54053	896.1708
+42802.55493	896.0385
+42799.63529	896.553
+42806.75359	896.2716
+42798.12092	896.868
+42799.215670000005	897.1305
+42627.98498	464.8854
+39971.181000000004	313.88910000000004
+37621.56143	297.5049
+35533.0256	286.8516
+33662.52072	280.1946
+31981.80688	274.9026
+30459.340829999997	270.5451
+29075.868159999998	267.30690000000004
+27812.15608	264.4572
+26654.12246	262.0296
+25588.00423	259.9863
+24604.32082	258.1152
+23693.804360000002	256.41
+22847.77491	254.70900000000003
+22060.42252	253.68630000000002
+21325.30267	252.42630000000003
+18279.86614	247.5669
+15995.538359999999	244.0704
+14218.69373	240.8154
+12797.174939999999	238.88340000000002
+8532.091922	233.49689999999998
+6399.30904	231.12810000000002
+4266.364957999999	228.8118
+3199.832108	227.61270000000002
+2559.89306	226.9197
+1279.973904	226.0734
+639.993796	225.6303
+319.998609	225.61980000000003
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_62.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_62.txt
new file mode 100644
index 00000000..d541f1de
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_62.txt
@@ -0,0 +1,37 @@
+41620.72819	952.4613
+41622.91397	952.4381999999999
+41623.83435999999	952.0602000000001
+41621.53345	952.1064000000001
+41622.33874	952.3185000000001
+41622.79892	952.4487000000001
+41622.28214	952.371
+41621.194129999996	952.3290000000001
+41621.65428	952.3185000000001
+41623.63279	945.4536
+39971.27012	323.0745
+37621.51481	299.23740000000004
+35533.0256	287.2065
+33662.52704	280.05390000000006
+31981.80688	274.4721
+30459.340829999997	270.0138
+29075.868159999998	266.6496
+27812.15608	263.80830000000003
+26654.12246	261.3387
+25588.00423	259.2891
+24604.32082	257.41380000000004
+23693.804360000002	255.73170000000002
+22847.77491	254.0349
+22060.42252	253.02060000000003
+21325.30267	251.7669
+18279.86614	246.9978
+15995.538359999999	243.5328
+14218.69373	240.39540000000002
+12797.174939999999	238.4802
+8532.091922	233.2554
+6399.30904	230.9601
+4266.364957999999	228.71310000000003
+3199.832108	227.556
+2559.89306	226.8882
+1279.973904	226.06920000000002
+639.993796	225.6282
+319.998609	225.61350000000002
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_64.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_64.txt
new file mode 100644
index 00000000..7c7c046b
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_64.txt
@@ -0,0 +1,37 @@
+40369.29551	984.7446
+40371.67652	984.6270000000001
+40373.19184	984.7047
+40371.56828	984.9882
+40368.91675	985.1121
+40371.031709999996	984.8937000000001
+40372.16357	984.7677000000001
+40372.184349999996	984.8076000000001
+40369.94943	984.7173
+40371.030589999995	983.5728
+39969.4169	381.4839
+37621.63249	302.9733
+35532.84182	288.2796
+33662.52704	280.1106
+31981.89735	274.26630000000006
+30459.31003	269.6337
+29075.96202	266.112
+27812.09177	263.1489
+26654.18549	260.6373
+25588.02614	258.6213
+24604.32082	256.70820000000003
+23693.84507	255.06390000000002
+22847.84216	253.3692
+22060.42252	252.37170000000003
+21325.473599999998	251.1096
+18279.8997	246.4035
+15995.52137	243.0267
+14218.751409999999	239.9544
+12797.20874	238.0749
+8532.101262	233.02650000000003
+6399.311759	230.79000000000002
+4266.364957999999	228.6228
+3199.832108	227.50560000000002
+2559.89306	226.8651
+1279.973904	226.05030000000002
+639.993796	225.624
+319.998609	225.60930000000002
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_66.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_66.txt
new file mode 100644
index 00000000..facf48e3
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_66.txt
@@ -0,0 +1,37 @@
+39208.981799999994	1008.441
+39207.858850000004	1008.6846
+39207.80781	1008.6300000000001
+39210.25796	1008.5565
+39208.93076	1008.6741000000001
+39210.66635	1008.5334
+39207.348439999994	1008.672
+39209.76709	1008.5334
+39208.32256	1008.6069
+39207.76085	1007.7648
+39210.56857	986.0655
+37621.63249	311.3712
+35533.05143	290.2347
+33662.52704	280.73850000000004
+31981.89735	274.2222
+30459.31003	269.325
+29075.96202	265.6815
+27812.09177	262.5756
+26654.18549	259.9947
+25588.02249	257.9493
+24604.32082	256.053
+23693.84507	254.4129
+22847.84216	252.7203
+22060.42252	251.70600000000002
+21325.473599999998	250.4439
+18279.8997	245.84490000000002
+15995.52137	242.5311
+14218.76607	239.5386
+12797.20874	237.6801
+8532.101262	232.7955
+6399.311759	230.6283
+4266.364957999999	228.53040000000001
+3199.832108	227.4657
+2559.89306	226.8231
+1279.973904	226.0398
+639.993796	225.6282
+319.998609	225.60930000000002
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_68.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_68.txt
new file mode 100644
index 00000000..019b5325
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_68.txt
@@ -0,0 +1,37 @@
+38133.96652	1029.5985
+38134.73908	1029.5019
+38135.55996	1029.5355
+38135.89798	1029.4326
+38136.236	1029.5187
+38133.19808	1029.5208
+38133.725099999996	1029.5544
+38135.41918	1029.5712
+38133.77339	1029.4242
+38135.41918	1028.9895000000001
+38134.6466	1024.9617
+37621.077569999994	344.4987
+35533.05143	293.6073
+33662.52704	281.84310000000005
+31981.89735	274.4175
+30459.31003	269.1675
+29075.96202	265.356
+27812.09177	262.0359
+26654.18549	259.43190000000004
+25588.02249	257.3235
+24604.32082	255.42090000000002
+23693.84507	253.73250000000002
+22847.84216	252.0798
+22060.42252	250.99620000000002
+21325.473599999998	249.7887
+18279.8997	245.238
+15995.52137	242.025
+14218.76607	239.09550000000002
+12797.20874	237.2937
+8532.101262	232.5624
+6399.311759	230.46450000000002
+4266.364957999999	228.43380000000002
+3199.832108	227.40900000000002
+2559.89306	226.7937
+1279.973904	226.0209
+639.993796	225.6261
+319.998609	225.60930000000002
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_70.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_70.txt
new file mode 100644
index 00000000..3c117aa3
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_70.txt
@@ -0,0 +1,37 @@
+37126.20953	1049.328
+37127.8114	1049.3112
+37129.13877	1049.2167000000002
+37125.56882	1049.2293
+37128.63527	1049.2608
+37126.71684	1049.2692
+37128.681039999996	1049.2125
+37125.75576	1049.2250999999999
+37127.857169999996	1049.1495
+37128.27298	1048.7988
+37129.04685	1047.627
+37128.71912	1016.0787
+35533.05143	300.4302
+33662.52704	283.60290000000003
+31981.89735	274.9467
+30459.31003	269.1906
+29075.96202	265.05150000000003
+27812.09177	261.58860000000004
+26654.18549	258.9237
+25588.02249	256.7166
+24604.32082	254.8308
+23693.84507	253.092
+22847.84216	251.4456
+22060.42252	250.3473
+21325.473599999998	249.15240000000003
+18279.8997	244.63950000000003
+15995.52137	241.53360000000004
+14218.76607	238.66500000000002
+12797.20874	236.9136
+8532.101262	232.3188
+6399.311759	230.30910000000003
+4266.364957999999	228.3435
+3199.832108	227.3565
+2559.89306	226.7559
+1279.973904	226.01250000000002
+639.993796	225.624
+319.998609	225.60930000000002
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_72.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_72.txt
new file mode 100644
index 00000000..6b5f52cb
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_72.txt
@@ -0,0 +1,37 @@
+36172.25613	1068.2322000000001
+36172.34302	1068.2847
+36171.77825	1068.2196000000001
+36172.5168	1068.2406
+36172.25613	1068.2868
+36175.51473	1068.2028
+36172.65081	1068.1776
+36172.99837	1068.2196000000001
+36173.82018	1068.1104
+36173.12503	1067.829
+36174.77606	1067.1822
+36171.379969999995	1063.2825
+35533.05143	321.4848
+33662.52704	286.7865
+31981.89735	275.99250000000006
+30459.31003	269.4972
+29075.96202	264.9318
+27812.07451	261.24420000000003
+26654.18549	258.4365
+25588.02249	256.0824
+24604.32082	254.1609
+23693.84507	252.4095
+22847.84216	250.7946
+22060.42252	249.67530000000002
+21325.473599999998	248.4657
+18279.8997	244.0179
+15995.52137	241.02960000000002
+14218.76607	238.21980000000002
+12797.20874	236.4999
+8532.101262	232.07100000000003
+6399.311759	230.13060000000002
+4266.364957999999	228.2532
+3199.832108	227.304
+2559.89306	226.7307
+1279.973904	225.99570000000003
+639.993796	225.62189999999998
+319.998609	225.6072
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_74.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_74.txt
new file mode 100644
index 00000000..7ecfe049
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_74.txt
@@ -0,0 +1,37 @@
+35277.91229	1086.3237000000001
+35275.474440000005	1086.2943
+35277.78832	1086.3468
+35277.29247	1086.2922
+35276.466069999995	1086.3279
+35279.52393	1086.267
+35278.86623	1086.267
+35277.87447	1086.3468
+35278.408169999995	1086.2334
+35278.160229999994	1085.91
+35277.82965	1085.5257000000001
+35277.864030000004	1084.2069000000001
+35278.61809	1017.093
+33662.52704	292.5384
+31981.89735	277.6746
+30459.31003	270.07680000000005
+29075.96202	264.9759
+27812.0443	260.99010000000004
+26654.18549	257.9871
+25588.01884	255.5469
+24604.32082	253.5918
+23693.707280000002	251.7795
+22847.84216	250.12470000000002
+22060.42252	249.0243
+21325.27682	247.7811
+18279.966089999998	243.41940000000002
+15995.52137	240.51930000000002
+14218.75264	237.7788
+12797.20874	236.0925
+8532.101262	231.83790000000002
+6399.311759	229.9626
+4266.364957999999	228.1671
+3199.832108	227.24099999999999
+2559.89306	226.69920000000002
+1279.973904	225.9831
+639.993796	225.62189999999998
+319.998609	225.6114
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_76.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_76.txt
new file mode 100644
index 00000000..2624e653
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_76.txt
@@ -0,0 +1,37 @@
+34421.76827	1103.9553
+34420.35206	1104.0561
+34420.98147	1103.9721000000002
+34420.27338	1103.9910000000002
+34420.78478	1103.9868
+34420.98147	1103.9574
+34420.35539	1103.9721000000002
+34421.14216	1103.9973
+34420.194709999996	1103.9448
+34419.919350000004	1103.6781
+34421.37487	1103.4513
+34419.8734	1102.7961
+34418.74243	1098.4302
+33662.52704	307.3056
+31981.91365	280.42980000000006
+30459.31003	271.11840000000007
+29076.060380000003	265.1313
+27812.0443	260.76120000000003
+26654.22531	257.63430000000005
+25587.97536	255.01560000000003
+24604.32082	252.987
+23693.707280000002	251.1432
+22847.84216	249.47580000000002
+22060.51366	248.3544
+21325.27682	247.11960000000002
+18279.954990000002	242.8041
+15995.51287	240.0321
+14218.745930000001	237.3315
+12797.19596	235.6977
+8532.092734000002	231.5943
+6399.3053629999995	229.79040000000003
+4266.360694	228.0789
+3199.826016	227.1864
+2559.8919109999997	226.6782
+1279.973904	225.9726
+639.993796	225.6177
+319.998609	225.6051
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_78.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_78.txt
new file mode 100644
index 00000000..1701219e
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_78.txt
@@ -0,0 +1,37 @@
+33610.01975	1121.0871
+33609.832220000004	1121.1207
+33612.00776	1121.0157000000002
+33610.24479999999	1121.0430000000001
+33611.445089999994	1121.0157000000002
+33609.194610000006	1121.1291
+33609.60718	1121.0619000000002
+33609.76038	1121.0808
+33611.25754	1120.9695
+33610.13227	1120.8435000000002
+33610.2823	1120.6041
+33609.45085	1120.2723
+33610.083959999996	1118.8359
+33610.02388	792.8718
+31981.91365	285.0372
+30459.31003	272.5905
+29075.93306	265.6521
+27812.06156	260.6814
+26654.21229	257.32770000000005
+25587.982669999998	254.50740000000002
+24604.32082	252.4116
+23693.707280000002	250.53840000000002
+22847.84216	248.86260000000001
+22060.48405	247.6866
+21325.27682	246.4245
+18279.932800000002	242.193
+15995.51287	239.5218
+14218.72579	236.89470000000003
+12797.18317	235.27560000000003
+8532.084207	231.3612
+6399.298967	229.6245
+4266.356429	227.9844
+3199.825676	227.136
+2559.8893519999997	226.6467
+1279.9729790000001	225.9537
+639.993248	225.62189999999998
+319.998551	225.60300000000004
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_8.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_8.txt
new file mode 100644
index 00000000..fe16c33b
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_8.txt
@@ -0,0 +1,37 @@
+25729.06077	329.72520000000003
+25729.06077	329.7231
+25729.10473	329.8176
+25729.10473	329.8176
+25729.10473	329.8176
+25729.10473	329.8176
+25729.10473	329.8197
+25729.10473	329.8197
+25729.10473	329.8134
+25729.10473	329.8134
+25729.10473	329.8218
+25729.10473	329.8134
+25729.10473	329.8176
+25729.10473	329.8218
+25729.10473	329.826
+25729.10473	329.8134
+25729.10473	329.83020000000005
+25729.10473	329.79449999999997
+25729.01422	329.6328
+25588.81506	303.9246
+24605.07388	281.59950000000003
+23694.1551	277.4688
+22848.26412	275.15250000000003
+22060.6967	273.336
+21325.62182	270.9063
+18280.067450000002	263.9973
+15995.616849999999	258.81870000000004
+14218.827940000001	252.1806
+12797.259900000001	249.3666
+8532.125320000001	239.22570000000002
+6399.322068	235.3365
+4266.3667749999995	231.0882
+3199.832108	229.0113
+2559.89306	227.7261
+1279.973904	226.5438
+639.993796	225.8613
+319.998609	225.6261
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_80.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_80.txt
new file mode 100644
index 00000000..fa9ad805
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_80.txt
@@ -0,0 +1,37 @@
+32841.7621	1137.5868
+32840.75938	1137.5973
+32840.97425	1137.5994
+32840.795190000004	1137.5931
+32840.508720000005	1137.5952
+32840.258050000004	1137.6078
+32840.86682	1137.5700000000002
+32841.475600000005	1137.5595
+32841.18911	1137.5406
+32840.65195	1137.3789000000002
+32841.797909999994	1137.2088
+32839.64931	1137.0051
+32841.1788	1136.1798000000001
+32841.62171	1130.4132000000002
+31981.91365	294.8484
+30459.31003	275.0118
+29075.87647	266.4879
+27812.057249999998	260.7969
+26654.21229	257.0946
+25587.982669999998	254.0559
+24604.32082	251.8362
+23693.707280000002	249.9168
+22847.84216	248.2158
+22060.48405	247.0251
+21325.27682	245.75880000000004
+18279.932800000002	241.5735
+15995.51287	238.99050000000003
+14218.72579	236.4495
+12797.18317	234.8535
+8532.084207	231.12180000000004
+6399.298967	229.4565
+4266.356429	227.8983
+3199.825676	227.0793
+2559.8893519999997	226.60260000000002
+1279.9729790000001	225.94320000000002
+639.993248	225.61560000000003
+319.998551	225.60930000000002
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_82.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_82.txt
new file mode 100644
index 00000000..63b85dcd
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_82.txt
@@ -0,0 +1,37 @@
+32111.9493	1153.6329
+32112.360170000004	1153.6035000000002
+32113.044969999995	1153.5573
+32113.661309999996	1153.5531
+32111.50421	1153.6119
+32113.181930000002	1153.5573
+32113.079210000004	1153.5720000000001
+32111.05913	1153.6497
+32113.93525	1153.4943
+32112.086259999996	1153.4313000000002
+32113.11345	1153.2591000000002
+32113.181930000002	1153.0722
+32111.675400000004	1152.7214999999999
+32112.39731	1151.1486000000002
+31981.727	363.04170000000005
+30459.67723	278.9682
+29075.999079999998	267.83820000000003
+27812.1006	261.12030000000004
+26654.224169999998	256.9854
+25587.982669999998	253.6716
+24604.32082	251.32590000000002
+23693.704149999998	249.32670000000002
+22847.86865	247.60680000000002
+22060.53137	246.3573
+21325.27682	245.10780000000003
+18279.9455	240.9813
+15995.52137	238.49490000000003
+14218.72724	235.998
+12797.18317	234.4524
+8532.084207	230.88870000000003
+6399.298967	229.28430000000003
+4266.356429	227.8038
+3199.825676	227.0289
+2559.8893519999997	226.5795
+1279.9729790000001	225.92430000000002
+639.993248	225.61560000000003
+319.998551	225.60300000000004
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_84.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_84.txt
new file mode 100644
index 00000000..d25304fa
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_84.txt
@@ -0,0 +1,37 @@
+31412.22938	1169.3598
+31411.31206	1169.385
+31412.2949	1169.3577
+31411.50862	1169.3724000000002
+31411.18102	1169.3787
+31411.04997	1169.4081
+31411.50862	1169.364
+31411.87151	1169.3871000000001
+31411.6069	1169.3220000000001
+31411.47586	1169.2065
+31411.31206	1169.1015000000002
+31411.707700000003	1168.923
+31411.67494	1168.65
+31411.833089999996	1167.8205
+31411.03084	1160.5503
+30459.67723	286.4631
+29076.03001	269.9592
+27812.1006	261.85740000000004
+26654.224169999998	257.0568
+25587.982669999998	253.40910000000002
+24604.32082	250.8345
+23693.704149999998	248.74290000000002
+22848.027	246.9873
+22060.53137	245.6853
+21325.28189	244.4127
+18279.947360000002	240.3786
+15995.52137	237.98880000000003
+14218.72724	235.5612
+12797.18317	234.03240000000002
+8532.084207	230.6346
+6399.298967	229.12470000000002
+4266.356429	227.7177
+3199.825676	226.9743
+2559.8893519999997	226.548
+1279.9729790000001	225.90959999999998
+639.993248	225.6177
+319.998551	225.5988
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_86.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_86.txt
new file mode 100644
index 00000000..36d34e92
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_86.txt
@@ -0,0 +1,37 @@
+30750.482300000003	1184.6562
+30751.11025	1184.6352
+30750.29393	1184.6646
+30749.854379999997	1184.6961
+30750.79627	1184.6562
+30750.26253	1184.6625000000001
+30750.450910000003	1184.6646
+30749.35448	1184.7129
+30750.29393	1184.631
+30750.57649	1184.4882
+30750.23113	1184.4231
+30749.98237	1184.295
+30750.170749999997	1184.0513999999998
+30750.10555	1183.5747
+30748.988400000002	1181.9703
+30459.81893	312.56190000000004
+29076.03254	273.1071
+27812.1006	262.9473
+26654.22002	257.3928
+25587.982669999998	253.2285
+24604.32082	250.4166
+23693.704149999998	248.1885
+22848.038930000002	246.37199999999999
+22060.53137	245.0175
+21325.28189	243.7302
+18279.94363	239.75910000000002
+15995.52137	237.489
+14218.72724	235.1013
+12797.18317	233.6166
+8532.084207	230.38260000000002
+6399.298967	228.95250000000001
+4266.356429	227.6232
+3199.825676	226.9176
+2559.8893519999997	226.5123
+1279.9729790000001	225.8949
+639.993248	225.61980000000003
+319.998551	225.5946
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_88.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_88.txt
new file mode 100644
index 00000000..5c6caecb
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_88.txt
@@ -0,0 +1,37 @@
+30113.27115	1199.8056000000001
+30112.90985	1199.8182
+30113.451810000002	1199.7909
+30112.39802	1199.835
+30112.307699999998	1199.8434000000002
+30112.27759	1199.8392
+30113.060390000002	1199.814
+30111.82831	1199.8707
+30112.578670000003	1199.7888
+30112.81953	1199.6649
+30112.51845	1199.5977
+30112.94227	1199.4779999999998
+30112.46055	1199.3226
+30113.63247	1198.9194
+30112.52592	1198.1025
+30113.05196	1186.857
+29075.94833	278.8884
+27812.1006	264.6777
+26654.22002	257.9157
+25587.982669999998	253.1739
+24604.32082	250.06380000000001
+23693.704149999998	247.632
+22848.05626	245.7546
+22060.53137	244.3308
+21325.28189	243.05610000000001
+18279.94363	239.1291
+15995.52137	236.98290000000003
+14218.72724	234.62460000000002
+12797.18317	233.19030000000004
+8532.084207	230.13060000000002
+6399.298967	228.7782
+4266.356429	227.5287
+3199.825676	226.86090000000002
+2559.8893519999997	226.4745
+1279.9729790000001	225.88230000000001
+639.993248	225.62189999999998
+319.998551	225.5925
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_90.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_90.txt
new file mode 100644
index 00000000..91fed820
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_90.txt
@@ -0,0 +1,37 @@
+29496.38491	1214.8794
+29496.356030000003	1214.8773
+29496.356030000003	1214.8773
+29496.06715	1214.892
+29496.4138	1214.8983
+29495.83605	1214.9234999999999
+29497.30936	1214.8626
+29496.76268	1214.8941
+29496.211590000003	1214.8437
+29496.4138	1214.7534
+29496.55824	1214.6778000000002
+29496.90712	1214.5665000000001
+29496.733790000002	1214.43
+29495.89383	1214.1779999999999
+29496.87763	1213.6173000000001
+29496.13324	1211.6013
+29075.86412	293.1852
+27812.1006	267.30060000000003
+26654.185869999998	258.7998
+25587.982669999998	253.2726
+24604.50655	249.7887
+23693.704149999998	247.12380000000002
+22848.04045	245.14350000000002
+22060.54752	243.6294
+21325.32756	242.3547
+18279.95695	238.5033
+15995.52137	236.4978
+14218.731269999998	234.1626
+12797.18317	232.7619
+8532.084207	229.8933
+6399.298967	228.6228
+4266.356429	227.4447
+3199.825676	226.8042
+2559.8893519999997	226.4409
+1279.9729790000001	225.8676
+639.993248	225.61980000000003
+319.998551	225.5862
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_92.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_92.txt
new file mode 100644
index 00000000..5c44c730
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_92.txt
@@ -0,0 +1,37 @@
+28902.35187	1229.8209000000002
+28902.40734	1229.8166999999999
+28902.35187	1229.8166999999999
+28902.43508	1229.8125
+28902.40734	1229.8251
+28902.0489	1229.8419000000001
+28902.40734	1229.8125
+28902.35187	1229.8335
+28901.82489	1229.7999000000002
+28902.40734	1229.6949
+28901.82489	1229.6529
+28901.9657	1229.5605
+28902.29852	1229.4282
+28902.40734	1229.2119000000002
+28901.741690000003	1228.8633
+28901.49207	1227.8889
+28901.64162	1205.3601
+27812.1006	271.6707
+26654.185869999998	260.1564
+25587.982669999998	253.5813
+24604.50655	249.5787
+23693.704149999998	246.7143
+22848.04045	244.5807
+22060.54752	242.99099999999999
+21325.32756	241.6449
+18279.95695	237.9027
+15995.52137	236.0148
+14218.731269999998	233.7132
+12797.18317	232.36290000000002
+8532.084207	229.66440000000003
+6399.298967	228.4674
+4266.356429	227.3544
+3199.825676	226.75170000000003
+2559.8893519999997	226.40730000000002
+1279.9729790000001	225.8571
+639.993248	225.61980000000003
+319.998551	225.5862
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_94.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_94.txt
new file mode 100644
index 00000000..0f525edd
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_94.txt
@@ -0,0 +1,37 @@
+28331.90641	1244.5734
+28331.90641	1244.5713
+28331.90641	1244.5692000000001
+28331.90641	1244.5692000000001
+28331.90641	1244.5629000000001
+28331.90845	1244.565
+28331.90641	1244.5692000000001
+28331.90641	1244.565
+28331.90641	1244.5272
+28331.93306	1244.4327
+28331.90641	1244.3781000000001
+28331.93511	1244.3088
+28331.85515	1244.2038
+28331.82645	1244.0421
+28331.82645	1243.767
+28331.40003	1243.1769000000002
+28331.357180000003	1240.2432000000001
+27812.11355	280.38149999999996
+26654.1151	262.2144
+25588.01154	254.2596
+24604.50655	249.543
+23693.97347	246.33210000000003
+22848.046270000003	244.0284
+22060.55295	242.29590000000002
+21325.32756	240.9624
+18279.95695	237.2748
+15995.59028	235.52550000000002
+14218.731269999998	233.2491
+12797.18317	231.9429
+8532.084207	229.41240000000002
+6399.298967	228.29520000000002
+4266.356429	227.2599
+3199.825676	226.6908
+2559.8893519999997	226.36950000000002
+1279.9729790000001	225.84660000000002
+639.993248	225.61980000000003
+319.998551	225.5862
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_96.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_96.txt
new file mode 100644
index 00000000..101d0b3b
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_96.txt
@@ -0,0 +1,37 @@
+27790.20836	1258.8954
+27790.20836	1258.8933
+27790.20836	1258.8933
+27790.20836	1258.8912
+27790.20836	1258.8912
+27790.21033	1258.8933
+27790.20836	1258.8912
+27790.20836	1258.8912
+27790.20836	1258.8513
+27790.20836	1258.7715
+27790.15707	1258.7232000000001
+27790.20836	1258.6560000000002
+27790.18272	1258.5699
+27790.18272	1258.4355
+27790.33657	1258.2170999999998
+27790.18272	1257.8118
+27790.16713	1256.3985
+27788.6984	1115.1483
+26654.04452	265.3686
+25588.02614	255.24450000000002
+24604.50655	249.669
+23693.97347	246.0108
+22848.046270000003	243.48870000000002
+22060.55295	241.6449
+21325.32756	240.2673
+18279.95695	236.6742
+15995.59028	235.05300000000003
+14218.731269999998	232.77450000000002
+12797.18317	231.5229
+8532.084207	229.1604
+6399.298967	228.13350000000003
+4266.356429	227.16540000000003
+3199.825676	226.6299
+2559.8893519999997	226.3359
+1279.9729790000001	225.8298
+639.993248	225.61560000000003
+319.998551	225.5862
diff --git a/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_98.txt b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_98.txt
new file mode 100644
index 00000000..421f1902
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/curves_src/cxl/bwlat_98.txt
@@ -0,0 +1,37 @@
+27263.80019	1272.6798000000001
+27263.80019	1272.6798000000001
+27263.7774	1272.6798000000001
+27263.80019	1272.6777000000002
+27263.80019	1272.6777000000002
+27263.80019	1272.6777000000002
+27263.80019	1272.6798000000001
+27263.80019	1272.6777000000002
+27263.80019	1272.6399000000001
+27263.80019	1272.5664000000002
+27263.80019	1272.5202
+27263.80019	1272.4634999999998
+27263.80019	1272.3858
+27263.80019	1272.2703
+27263.80019	1272.1023
+27263.80019	1271.7999000000002
+27263.67679	1271.0544
+27263.314290000002	1267.8791999999999
+26654.020930000002	270.93149999999997
+25588.02614	256.7796
+24604.50655	250.05120000000002
+23693.97347	245.8008
+22848.046270000003	242.9553
+22060.55295	240.9687
+21325.32756	239.5491
+18279.95695	236.04420000000002
+15995.59028	234.5826
+14218.731269999998	232.30620000000002
+12797.18317	231.0987
+8532.084207	228.9042
+6399.298967	227.9676
+4266.356429	227.073
+3199.825676	226.57110000000003
+2559.8893519999997	226.3044
+1279.9729790000001	225.8109
+639.993248	225.6114
+319.998551	225.5862
diff --git a/piton/tools/pli/Realistic_lat/lat.cc b/piton/tools/pli/Realistic_lat/lat.cc
new file mode 100644
index 00000000..4d653eeb
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/lat.cc
@@ -0,0 +1,133 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include "bw_lat_mem_ctrl.h"
+
+
+#ifndef PITON_DPI
+#include "veriuser.h"
+#include "acc_user.h"
+#else
+#ifdef VERILATOR
+#include "verilated_vpi.h"
+#endif
+#endif
+
+
+#ifdef PITON_DPI
+#include "svdpi.h"
+#endif
+
+
+using namespace std;
+
+static BwLatMemCtrl* bwLatMemCtrl =NULL;
+static unsigned long long int access_cnt = 0;
+
+
+// Routines called by the verilog code.
+#ifndef PITON_DPI
+extern "C" void delay_init_call();
+extern "C" void got_a_write_req_call();
+extern "C" void got_a_read_req_call();
+extern "C" void get_Bandwidth_call();
+#else // ifndef PITON_DPI
+extern "C" void delay_init_call(const char * curve_path, int freq);
+extern "C" unsigned long long  got_a_write_req_call(unsigned long long accessCycle);
+extern "C" unsigned long long  got_a_read_req_call(unsigned long long accessCycle);
+extern "C" double  get_Bandwidth_call(void);
+#endif
+
+#ifdef PITON_DPI
+double get_Bandwidth_call(void){
+	//cout << "bandwdith from function " << bwLatMemCtrl->getBandwidth() << " GB/s" <<endl;
+	return bwLatMemCtrl->getBandwidth();
+}
+#else
+void get_Bandwidth_call( ){
+	double bw =  bwLatMemCtrl->getBandwidth();
+	
+	tf_putrealp(0, bw);	
+	return;
+}
+#endif
+
+
+void access_monitor (unsigned long long  lat,unsigned long long accessCycle){
+	access_cnt++;
+	if(access_cnt%64==0) {
+		//printf("**Info: lat=%llu,accessCycle=%llu,accessNumber=%llu\n",lat,accessCycle,access_cnt);
+	}
+}
+
+
+#ifndef PITON_DPI
+void delay_init_call(){
+	string curve_path =tf_getcstringp(1);  // a get file name.
+	int freq = tf_getp(2);
+#else // ifndef PITON_DPI
+void delay_init_call(const char * curve_path, int freq){ //frequency in MHz
+    // Convert const char* to std::string
+    std::string curve_path_string(curve_path);	
+#endif
+	if(bwLatMemCtrl != NULL) return;
+	double fr_ghz = (double)freq/1000;
+	bwLatMemCtrl = new BwLatMemCtrl(curve_path, 1000, 50, fr_ghz);
+	if(bwLatMemCtrl == NULL){
+		cout << "**Info: Error loading delay model:" << curve_path << "curve\n";
+		return;
+	}
+	cout << "**Info: Delay model is initilized with:\"" << curve_path << "\" curve & " << fr_ghz << " GHz\n";
+}
+
+
+#ifdef PITON_DPI
+unsigned long long  got_a_write_req_call ( unsigned long long accessCycle ) {
+	unsigned long long lat = (unsigned long long ) bwLatMemCtrl->access(accessCycle,1);
+	access_monitor (lat, accessCycle);
+	return lat;
+}
+
+unsigned long long  got_a_read_req_call (unsigned long long accessCycle ) {
+	unsigned long long lat =  (unsigned long long ) bwLatMemCtrl->access(accessCycle,0);
+	access_monitor (lat, accessCycle);
+	return lat;
+}
+#else 
+
+void got_a_write_req_call (  ) {
+	unsigned long long accessCycle;
+    int low, high;
+  	low  = tf_getlongp(&high, 1);
+  	accessCycle   = high;
+  	accessCycle <<= 32;
+  	accessCycle  |= (unsigned)low;
+	
+	unsigned long long  lat =  bwLatMemCtrl->access(accessCycle,1);
+	low = lat & 0xffffffff;
+    high = (lat >> 32) & 0xffffffff;
+    tf_putlongp(2, low, high);	
+	access_monitor (lat, accessCycle);
+    return;
+}
+
+void got_a_read_req_call (  ) {
+	unsigned long long accessCycle;
+    int low, high;
+  	low  = tf_getlongp(&high, 1);
+  	accessCycle   = high;
+  	accessCycle <<= 32;
+  	accessCycle  |= (unsigned)low;
+  		
+	unsigned long long  lat = bwLatMemCtrl->access(accessCycle,0);
+    low = lat & 0xffffffff;
+    high = (lat >> 32) & 0xffffffff;
+    tf_putlongp(2, low, high);	
+	access_monitor (lat, accessCycle);
+    return;
+}
+
+#endif
+
+
+
+
diff --git a/piton/tools/pli/Realistic_lat/lat.tab b/piton/tools/pli/Realistic_lat/lat.tab
new file mode 100644
index 00000000..986a2aad
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/lat.tab
@@ -0,0 +1,4 @@
+$delay_init		      call=delay_init_call
+$got_a_write_req_call call=got_a_write_req
+$got_a_read_req_call  call=got_a_read_req
+$get_Bandwidth_call   call=get_Bandwidth
diff --git a/piton/tools/pli/Realistic_lat/liblat_pli_modelsim.a b/piton/tools/pli/Realistic_lat/liblat_pli_modelsim.a
new file mode 100644
index 0000000000000000000000000000000000000000..da0b16376bbe73d7dee29ebf87563d3a392789e7
GIT binary patch
literal 244664
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

literal 0
HcmV?d00001

diff --git a/piton/tools/pli/Realistic_lat/main b/piton/tools/pli/Realistic_lat/main
new file mode 100755
index 0000000000000000000000000000000000000000..0a08ee580299c5cb176f51899c694537e6c8282c
GIT binary patch
literal 38680
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

literal 0
HcmV?d00001

diff --git a/piton/tools/pli/Realistic_lat/main.c b/piton/tools/pli/Realistic_lat/main.c
new file mode 100644
index 00000000..199cd749
--- /dev/null
+++ b/piton/tools/pli/Realistic_lat/main.c
@@ -0,0 +1,94 @@
+#include <stdio.h>
+#include <string>	
+	
+#include <stdint.h> // for uint32_t
+
+#include "bw_lat_mem_ctrl.h"
+
+
+// 1 highest bw. The biffet the lower bw
+#define ISSUE_INTENSITY 1
+
+using namespace std;
+
+// each tick is for cycle. 
+// just for playing. i do not know the number. 
+uint64_t tick(uint64_t cycle)
+{
+	return cycle + ISSUE_INTENSITY;
+}
+
+
+
+
+int main() {
+    char filename[] = "./sims.log"; // Replace with your input file name
+    FILE *file = fopen(filename, "r");
+    
+    if (file == NULL) {
+        printf("Error opening file '%s'\n", filename);
+        return 1;
+    }
+    
+    char line[100];
+    while (fgets(line, sizeof(line), file)) {
+        int is_rd = 0;
+        int is_wr = 0;
+        int num_value = 0;
+        
+        if (sscanf(line, "RD=%d", &num_value) == 1) {
+            is_rd = 1;
+        } else if (sscanf(line, "WR=%d", &num_value) == 1) {
+            is_wr = 1;
+        }
+        
+        printf("Line: %s\n", line);
+        printf("Is RD: %d\n", is_rd);
+        printf("Is WR: %d\n", is_wr);
+        printf("Number: %d\n\n", num_value);
+    }
+    
+    fclose(file);
+    return 0;
+}
+
+
+
+
+int main1() {
+	string myAddress("./cxl-curve");
+	uint32_t lat1, lat2, lat3, lat4;	
+
+	// initialize cycles
+	uint64_t cycle=0;
+
+
+	// creating the memory instance
+	BwLatMemCtrl* bwLatMemCtrl = new BwLatMemCtrl(myAddress, 1000, 50, 1.5);
+
+
+	
+
+
+	// access has two inputs (1) cycle, (2) isWrite 0: read 1: wirte
+	
+	// sending writes 
+	for (int i = 0; i < 1200; ++i)
+	{
+		bwLatMemCtrl->access(cycle,1);
+		cycle = tick(cycle);
+	}
+
+	// sending reads
+	for (int i = 0; i < 1200; ++i)
+	{
+		lat1 = bwLatMemCtrl->access(cycle,0);
+		cycle = tick(cycle);
+	}
+	
+	cout << "latency from function: " << lat1 <<  endl;
+
+
+
+	return 0;
+}
diff --git a/piton/tools/pli/iop/iob_main.cc b/piton/tools/pli/iop/iob_main.cc
index 8ac15cfb..a2b89be0 100644
--- a/piton/tools/pli/iop/iob_main.cc
+++ b/piton/tools/pli/iop/iob_main.cc
@@ -53,6 +53,7 @@ extern "C" void write_64b_call();
 extern "C" void init_oram_call();
 #else // ifndef PITON_DPI
 extern "C" void init_jbus_model_call(char *str, int oram);
+extern "C" void metro_mpi_init_jbus_model_call(char *str, int oram);
 extern "C" unsigned long long read_64b_call(unsigned long long key_var);
 extern "C" void write_64b_call(unsigned long long key_var, unsigned long long val);
 extern "C" int drive_iob();
@@ -100,6 +101,18 @@ void init_jbus_model_call(){
           read_mem(str, &sysMem);//read memory
   for(idx = 0; idx < 32; idx++)pli_var.last_addr[idx] = oram ? -1 : 0;
 }
+
+
+void metro_mpi_init_jbus_model_call(char *str, int oram) {
+  int   idx;
+  iob_inst.manual_init((char *)"diag.ev");
+  sysMem              = b_create();//create
+  if (!oram)
+          read_mem(str, &sysMem);//read memory
+  for(idx = 0; idx < 32; idx++)pli_var.last_addr[idx] = oram ? -1 : 0;
+}
+
+
 /*------------------------------------------
 handle the cmp clock domain jobs.
 -------------------------------------------*/
diff --git a/piton/tools/pli/veriuser.c b/piton/tools/pli/veriuser.c
index 9e020dac..f720fa27 100644
--- a/piton/tools/pli/veriuser.c
+++ b/piton/tools/pli/veriuser.c
@@ -58,6 +58,10 @@ extern int slam_random_call();
 
 extern int bw_tlb_reset_vld_call();
 
+extern int delay_init_call();
+extern int got_a_write_req_call();
+extern int got_a_read_req_call();
+extern int get_Bandwidth_call();
 int Size_32() { return (32); }
 int Size_64() { return (64); }
 
@@ -76,6 +80,10 @@ s_tfcell veriusertfs[] =
     {usertask, 0, 0, 0, write_64b_call, 0, "$write_64b"},
 
     {usertask, 0, 0, 0, bw_tlb_reset_vld_call, 0, "$bw_force_by_name"},
+    {usertask, 0, 0, 0, delay_init_call, 0, "$delay_init"},
+    {usertask, 0, 0, 0, got_a_write_req_call, 0, "$got_a_write_req"},
+    {usertask, 0, 0, 0, got_a_read_req_call, 0, "$got_a_read_req"},
+    {usertask, 0, 0, 0, get_Bandwidth_call, 0, "$get_Bandwidth"},
 
     {0}
 };
@@ -135,6 +143,34 @@ static void veriusertfs_register(void)
     task_data_p->calltf = bw_tlb_reset_vld_call;
     task_data_p->compiletf = 0;
     vpi_register_systf(task_data_p);
+   // {usertask, 0, 0, 0, delay_init_call, 0, "$delay_init"},
+    task_data_p->type = vpiSysTask;
+    task_data_p->tfname = "$delay_init";
+    task_data_p->calltf = delay_init_call;
+    task_data_p->compiletf = 0;
+    vpi_register_systf(task_data_p);
+    
+     // {usertask, 0, 0, 0, got_a_write_req_call, 0, "$got_a_write_req"},
+    task_data_p->type = vpiSysTask;
+    task_data_p->tfname = "$got_a_write_req";
+    task_data_p->calltf = got_a_write_req_call;
+    task_data_p->compiletf = 0;
+    vpi_register_systf(task_data_p);
+    
+    
+    // {usertask, 0, 0, 0, got_a_read_req_call, 0, "$got_a_read_req"},
+    task_data_p->type = vpiSysTask;
+    task_data_p->tfname = "$got_a_read_req";
+    task_data_p->calltf = got_a_read_req_call;
+    task_data_p->compiletf = 0;
+    vpi_register_systf(task_data_p);
+
+    // {usertask, 0, 0, 0, get_Bandwidth_call, 0, "$get_Bandwidth"},
+    task_data_p->type = vpiSysTask;
+    task_data_p->tfname = "$get_Bandwidth";
+    task_data_p->calltf = get_Bandwidth_call;
+    task_data_p->compiletf = 0;
+    vpi_register_systf(task_data_p);
 }
 
 void (*vlog_startup_routines[])() = { &veriusertfs_register, 0 };
diff --git a/piton/tools/src/sims/manycore.config b/piton/tools/src/sims/manycore.config
index bef2a286..3c50639d 100644
--- a/piton/tools/src/sims/manycore.config
+++ b/piton/tools/src/sims/manycore.config
@@ -125,7 +125,7 @@
     -config_rtl=PITON_RV64_PLIC
     -config_rtl="CONF_HPDCACHE_PA_WIDTH 40"
     -config_hpdc_req_words=8
-    -config_rtl="EXTERNAL_HPM_EVENT_NUM 8"  //can be 2, 4 or 8 
+    -config_rtl="EXTERNAL_HPM_EVENT_NUM 10"  //can be 4, 6 or 10 
 
     // Commit log settings
     -config_rtl=SIM_COMMIT_LOG
diff --git a/piton/tools/src/sims/metro_chipset.config b/piton/tools/src/sims/metro_chipset.config
new file mode 100644
index 00000000..9f8b502c
--- /dev/null
+++ b/piton/tools/src/sims/metro_chipset.config
@@ -0,0 +1,224 @@
+// Modified by Barcelona Supercomputing Center on March 3rd, 2022
+// Modified by Princeton University on June 9th, 2015
+// ========== Copyright Header Begin ==========================================
+//
+// OpenSPARC T1 Processor File: manycore.config
+// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
+// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
+//
+// The above named program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU General Public
+// License version 2 as published by the Free Software Foundation.
+//
+// The above named program is distributed in the hope that it will be
+// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// General Public License for more details.
+//
+// You should have received a copy of the GNU General Public
+// License along with this work; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+//
+// ========== Copyright Header End ============================================
+// 1 core without I/O testbench config file for sims
+
+<metro_chipset>
+    -model=metro_chipset
+    -toplevel=metro_chipset
+    -flist=$DV_ROOT/design/include/Flist.include
+    -flist=$DV_ROOT/design/common/rtl/Flist.common
+    -flist=$DV_ROOT/design/chipset/include/Flist.include
+//    -flist=$DV_ROOT/design/rtl/Flist.system
+//    -flist=$DV_ROOT/design/chip/rtl/Flist.chip
+//    -flist=$DV_ROOT/design/chip/pll/rtl/Flist.pll
+//    -flist=$DV_ROOT/design/chip/jtag/rtl/Flist.jtag
+//    -flist=$DV_ROOT/design/chip/tile/rtl/Flist.tile
+//    -flist=$DV_ROOT/design/chip/tile/rtap/rtl/Flist.rtap
+//    -flist=$DV_ROOT/design/chip/tile/l15/rtl/Flist.l15
+#ifdef FLIST_PICO
+    -flist=$DV_ROOT/design/chip/tile/pico/rtl/Flist.pico
+    -rv32
+    -config_rtl=PITON_PICO
+#endif
+#ifdef FLIST_OST1
+    -flist=$DV_ROOT/design/chip/tile/fpu/rtl/Flist.fpu
+    -flist=$DV_ROOT/design/chip/tile/sparc/rtl/Flist.sparc_top
+    -flist=$DV_ROOT/design/chip/tile/sparc/ifu/rtl/Flist.ifu
+    -flist=$DV_ROOT/design/chip/tile/sparc/lsu/rtl/Flist.lsu
+    -flist=$DV_ROOT/design/chip/tile/sparc/tlu/rtl/Flist.tlu
+    -flist=$DV_ROOT/design/chip/tile/sparc/spu/rtl/Flist.spu
+    -flist=$DV_ROOT/design/chip/tile/sparc/ffu/rtl/Flist.ffu
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/rtl/Flist.exu
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/rtl/Flist.bw_r_irf
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/common/rtl/Flist.bw_r_irf_common
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/bw_r_irf_register8/rtl/Flist.bw_r_irf_register8
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/bw_r_irf_register16/rtl/Flist.bw_r_irf_register16
+    -flist=$DV_ROOT/design/chip/tile/sparc/mul/rtl/Flist.mul
+    -flist=$DV_ROOT/design/chip/tile/sparc/srams/rtl/Flist.srams
+    -flist=$DV_ROOT/design/chip/tile/sparc/rtl/Flist.sparc_common
+    -sparcv9
+    -config_rtl=PITON_OST1
+#endif
+#ifdef FLIST_ARIANE    
+    -flist=$DV_ROOT/design/chip/tile/ariane/Flist.ariane
+    -flist=$HPDCACHE_ROOT/rtl/hpdcache.Flist
+    -flist=$DV_ROOT/design/chip/tile/ariane/Flist.hpdc_param
+    -flist=$DV_ROOT/design/chipset/rv64_platform/Flist.rv64_platform    
+    -rv64
+    -rv64_platform
+    -config_rtl=PITON_ARIANE
+    -config_rtl=PITON_RV64_PLATFORM
+    -config_rtl=PITON_RV64_DEBUGUNIT
+    -config_rtl=PITON_RV64_CLINT
+    -config_rtl=PITON_RV64_PLIC   
+#endif
+#ifdef FLIST_SARG
+    -flist=$DV_ROOT/design/chip/tile/sargantana/simulator/models/filelist.f
+    -flist=$DV_ROOT/design/chip/tile/sargantana/openpiton.f    
+    -flist=$DV_ROOT/design/chipset/rv64_platform/Flist.rv64_platform
+    -flist=$DV_ROOT/design/chipset/bsc/rtl/Flist.bsc_riscv_peripherals
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/clint/Flist.clint
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/plic/Flist.plic
+    -vcs_build_args="-sverilog +systemverilogext+.sv -ntb_opts uvm-1.1 +vpi"
+    -vcs_build_args=-timescale=1ps/1ps
+    -rv64
+    -rv64_platform
+    -config_rtl=PITON_SARG
+    -config_rtl=PITON_ARIANE_HPDC
+    -config_rtl=HPDCACHE_OPENPITON
+    -config_rtl=PITON_RV64_PLATFORM
+    -config_rtl=PITON_BSC_RISCV_PERIPHERALS
+    -config_rtl="CONF_SARGANTANA_PHY_ADDR_SIZE 40"
+    -config_rtl="CONF_HPDCACHE_PA_WIDTH 40"
+    -config_hpdc_req_words=8
+    -config_rtl="EXTERNAL_HPM_EVENT_NUM 10"  //can be 4, 6 or 10 
+#endif
+#ifdef FLIST_LOX
+    -flist=$DV_ROOT/design/chip/tile/lagarto_ox/openpiton.f
+    -flist=$DV_ROOT/design/chipset/rv64_platform/Flist.rv64_platform
+    -flist=$DV_ROOT/design/chipset/bsc/rtl/Flist.bsc_riscv_peripherals
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/clint/Flist.clint
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/plic/Flist.plic
+    -rv64
+    -rv64_platform
+    -config_rtl=SIMULATION
+    -config_rtl=LOX
+    -config_rtl=PITON_LOX
+    -config_rtl=PITON_ARIANE_HPDC
+    -config_rtl=HPDCACHE_OPENPITON
+    -config_rtl=PITON_RV64_PLATFORM
+    -config_rtl=PITON_BSC_RISCV_PERIPHERALS
+    -config_rtl=PITON_RV64_DEBUGUNIT
+    -config_rtl=PITON_RV64_CLINT
+    -config_rtl=PITON_RV64_PLIC
+    -config_rtl="CONF_HPDCACHE_PA_WIDTH 40"
+    -config_hpdc_req_words=8
+    -config_rtl="EXTERNAL_HPM_EVENT_NUM 10"  //can be 4, 6 or 10 
+    
+#endif
+
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.clib_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.dlib_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.dft_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.ucb_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.sw_mem_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.network_common
+    -flist=$DV_ROOT/design/chip/tile/common/srams/rtl/Flist.srams_common
+//    // dmbr
+//    -flist=$DV_ROOT/design/chip/tile/dmbr/rtl/Flist.dmbr
+//    // dynamic network
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/rtl/Flist.dynamic_node
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/common/rtl/Flist.common
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/components/rtl/Flist.components
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/dynamic/rtl/Flist.dynamic
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/sim/rtl/Flist.sim
+    // l2
+    -flist=$DV_ROOT/design/chip/tile/l2/rtl/Flist.l2
+    -flist=$DV_ROOT/design/chipset/rtl/Flist.chipset
+    -flist=$DV_ROOT/design/common/fpga_bridge/rtl/Flist.fpga_bridge
+    -flist=$DV_ROOT/design/common/fpga_bridge/fpga_send/rtl/Flist.fpga_send
+    -flist=$DV_ROOT/design/common/fpga_bridge/fpga_rcv/rtl/Flist.fpga_rcv
+    -flist=$DV_ROOT/design/chip/chip_bridge/rtl/Flist.chip_bridge
+    -flist=$DV_ROOT/verif/env/common/fake_mem_ctrl.flist
+    -flist=$DV_ROOT/verif/env/metro_chipset/metro_chipset.flist
+    -flist=$DV_ROOT/design/chipset/noc_axilite_bridge/rtl/Flist.noc_axilite_bridge
+    -flist=$DV_ROOT/design/chipset/io_xbar/rtl/Flist.io_xbar
+    -flist=$DV_ROOT/design/chipset/io_xbar/common/rtl/Flist.common
+    -flist=$DV_ROOT/design/chipset/io_xbar/dynamic/rtl/Flist.dynamic
+    -flist=$DV_ROOT/design/chipset/io_xbar/components/rtl/Flist.components
+    -flist=$DV_ROOT/design/chipset/io_ctrl/rtl/Flist.io_ctrl
+    //axi_lite_slave_rf
+    -flist=$DV_ROOT/design/chipset/axi_lite_slave_rf/rtl/Flist.axi_lite_slave_rf
+#ifdef FLIST_ORAM
+    -flist=$DV_ROOT/design/chip/tinyoram/rtl/Flist.oram
+    -config_rtl=ORAM_ON"
+    -sim_run_args=+oram"
+#endif
+
+    -config_rtl=METRO_CHIPSET
+    -config_rtl=PITON_NO_CHIP_BRIDGE
+    -config_rtl=PITON_NO_JTAG
+    -config_rtl=SYNTHESIZABLE_BRAM
+    // No scan chains
+    -config_rtl=NO_SCAN
+    -config_rtl=NO_RTL_CSM          // should be defined to have a L15 MSHR of 64
+
+    -config_l1i_size=16384       // default
+    -config_l1i_associativity=4     // default
+
+    -config_l1d_size=8192           // default
+    -config_l1d_associativity=4     // default
+
+    -config_l15_size=8192           // default
+    -config_l15_associativity=8     // default
+
+    -config_l2_size=65536           // default
+    -config_l2_associativity=4      // default
+
+    -config_l15_l1d_cacheline_size=64   // default
+    
+
+    -config_rtl=ICACHE_64B
+
+    -noc1_width=512 
+    -noc2_width=512 
+    -noc3_width=512
+
+    -l15_num_threads=64
+
+    -config_rtl=PITON_NO_CHIP_BRIDGE // 512 noc width is not supported in CHIP_BRIDGE
+
+    -metro_mpi_build_args=-DSYNC_MUX
+
+    -rtl_timeout=50000
+    -sim_run_args=+spc_pipe=0
+    -sim_run_args=+doerrorfinish
+    -sim_run_args=+dowarningfinish
+    // -vcs_build_args=+notimingcheck
+    -vcs_build_args=+nospecify
+    //-vcs_build_args=+nbaopt
+    -vcs_build_args=-Xstrict=1 -notice
+    -vcs_build_args=+rad
+    -config_rtl=PITON_DPI 
+    -sim_build_args="-CFLAGS -DPITON_DPI"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/b_ary.c"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/iob_main.cc"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/bw_lib.c"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/iob.cc"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/cpx.cc"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/pcx.cc"
+    -vcs_build_args="$DV_ROOT/tools/pli/metro_mpi.cpp"
+    -metro_mpi_build_args="$DV_ROOT/tools/verilator/metro_mpi.cpp"
+    -metro_mpi_build_args="-CFLAGS -I$DV_ROOT/tools/pli/iop"
+    //-metro_mpi_build_args="-MAKEFLAGS CXX=mpic++ -MAKEFLAGS LINK=mpic++"
+    -vcs_build_args="-cc mpicc"
+    -vcs_build_args="-cpp mpic++"
+    -vcs_build_args="-ld mpic++"
+    -post_process_cmd="regreport -1 > status.log"
+    -post_process_cmd="perf > perf.log"
+    -asm_diag_root=$DV_ROOT/verif/diag    
+    -image_diag_root=$DV_ROOT/verif/diag
+    -midas_args=-mmu=niagara
+    -sim_run_args=+wait_cycle_to_kill=10
+    -vcs_cm_args=line+tgl+cond+branch+fsm
+</metro_chipset>
diff --git a/piton/tools/src/sims/metro_fake_mem.config b/piton/tools/src/sims/metro_fake_mem.config
new file mode 100644
index 00000000..06c9ea11
--- /dev/null
+++ b/piton/tools/src/sims/metro_fake_mem.config
@@ -0,0 +1,221 @@
+// Modified by Barcelona Supercomputing Center on March 3rd, 2022
+// Modified by Princeton University on June 9th, 2015
+// ========== Copyright Header Begin ==========================================
+//
+// OpenSPARC T1 Processor File: manycore.config
+// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
+// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
+//
+// The above named program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU General Public
+// License version 2 as published by the Free Software Foundation.
+//
+// The above named program is distributed in the hope that it will be
+// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// General Public License for more details.
+//
+// You should have received a copy of the GNU General Public
+// License along with this work; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+//
+// ========== Copyright Header End ============================================
+// 1 core without I/O testbench config file for sims
+
+<metro_fake_mem>
+    -model=metro_fake_mem
+    -toplevel=metro_fake_mem
+    -flist=$DV_ROOT/design/include/Flist.include
+    -flist=$DV_ROOT/design/common/rtl/Flist.common
+    -flist=$DV_ROOT/design/chipset/include/Flist.include
+//    -flist=$DV_ROOT/design/rtl/Flist.system
+//    -flist=$DV_ROOT/design/chip/rtl/Flist.chip
+//    -flist=$DV_ROOT/design/chip/pll/rtl/Flist.pll
+//    -flist=$DV_ROOT/design/chip/jtag/rtl/Flist.jtag
+//    -flist=$DV_ROOT/design/chip/tile/rtl/Flist.tile
+//    -flist=$DV_ROOT/design/chip/tile/rtap/rtl/Flist.rtap
+//    -flist=$DV_ROOT/design/chip/tile/l15/rtl/Flist.l15
+#ifdef FLIST_PICO
+    -flist=$DV_ROOT/design/chip/tile/pico/rtl/Flist.pico
+    -rv32
+    -config_rtl=PITON_PICO
+#endif
+#ifdef FLIST_OST1
+    -flist=$DV_ROOT/design/chip/tile/fpu/rtl/Flist.fpu
+    -flist=$DV_ROOT/design/chip/tile/sparc/rtl/Flist.sparc_top
+    -flist=$DV_ROOT/design/chip/tile/sparc/ifu/rtl/Flist.ifu
+    -flist=$DV_ROOT/design/chip/tile/sparc/lsu/rtl/Flist.lsu
+    -flist=$DV_ROOT/design/chip/tile/sparc/tlu/rtl/Flist.tlu
+    -flist=$DV_ROOT/design/chip/tile/sparc/spu/rtl/Flist.spu
+    -flist=$DV_ROOT/design/chip/tile/sparc/ffu/rtl/Flist.ffu
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/rtl/Flist.exu
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/rtl/Flist.bw_r_irf
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/common/rtl/Flist.bw_r_irf_common
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/bw_r_irf_register8/rtl/Flist.bw_r_irf_register8
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/bw_r_irf_register16/rtl/Flist.bw_r_irf_register16
+    -flist=$DV_ROOT/design/chip/tile/sparc/mul/rtl/Flist.mul
+    -flist=$DV_ROOT/design/chip/tile/sparc/srams/rtl/Flist.srams
+    -flist=$DV_ROOT/design/chip/tile/sparc/rtl/Flist.sparc_common
+    -sparcv9
+    -config_rtl=PITON_OST1
+#endif
+#ifdef FLIST_ARIANE
+    
+    -flist=$DV_ROOT/design/chip/tile/ariane/Flist.ariane
+    -flist=$HPDCACHE_ROOT/rtl/hpdcache.Flist
+    -flist=$DV_ROOT/design/chip/tile/ariane/Flist.hpdc_param
+    -flist=$DV_ROOT/design/chipset/rv64_platform/Flist.rv64_platform    
+    -rv64
+    -rv64_platform
+    -config_rtl=PITON_ARIANE
+    -config_rtl=PITON_RV64_PLATFORM
+    -config_rtl=PITON_RV64_DEBUGUNIT
+    -config_rtl=PITON_RV64_CLINT
+    -config_rtl=PITON_RV64_PLIC    
+#endif
+#ifdef FLIST_SARG
+    -flist=$DV_ROOT/design/chip/tile/sargantana/simulator/models/filelist.f
+    -flist=$DV_ROOT/design/chip/tile/sargantana/openpiton.f    
+    -flist=$DV_ROOT/design/chipset/rv64_platform/Flist.rv64_platform
+    -flist=$DV_ROOT/design/chipset/bsc/rtl/Flist.bsc_riscv_peripherals
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/clint/Flist.clint
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/plic/Flist.plic
+    -vcs_build_args="-sverilog +systemverilogext+.sv -ntb_opts uvm-1.1 +vpi"
+    -vcs_build_args=-timescale=1ps/1ps
+    -rv64
+    -rv64_platform
+    -config_rtl=PITON_SARG
+    -config_rtl=PITON_ARIANE_HPDC
+    -config_rtl=HPDCACHE_OPENPITON
+    -config_rtl=PITON_RV64_PLATFORM
+    -config_rtl=PITON_BSC_RISCV_PERIPHERALS
+    -config_rtl="CONF_SARGANTANA_PHY_ADDR_SIZE 40"
+    -config_rtl="CONF_HPDCACHE_PA_WIDTH 40"
+    -config_hpdc_req_words=8
+    -config_rtl="EXTERNAL_HPM_EVENT_NUM 10"  //can be 4, 6 or 10
+#endif
+#ifdef FLIST_LOX
+    -flist=$DV_ROOT/design/chip/tile/lagarto_ox/openpiton.f
+    -flist=$DV_ROOT/design/chipset/rv64_platform/Flist.rv64_platform
+    -flist=$DV_ROOT/design/chipset/bsc/rtl/Flist.bsc_riscv_peripherals
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/clint/Flist.clint
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/plic/Flist.plic
+    -rv64
+    -rv64_platform
+    -config_rtl=SIMULATION
+    -config_rtl=LOX
+    -config_rtl=PITON_LOX
+    -config_rtl=PITON_ARIANE_HPDC
+    -config_rtl=HPDCACHE_OPENPITON
+    -config_rtl=PITON_RV64_PLATFORM
+    -config_rtl=PITON_BSC_RISCV_PERIPHERALS
+    -config_rtl=PITON_RV64_DEBUGUNIT
+    -config_rtl=PITON_RV64_CLINT
+    -config_rtl=PITON_RV64_PLIC
+    -config_rtl="CONF_HPDCACHE_PA_WIDTH 40"
+    -config_hpdc_req_words=8
+    -config_rtl="EXTERNAL_HPM_EVENT_NUM 10"  //can be 4, 6 or 10
+   
+#endif
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.clib_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.dlib_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.dft_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.ucb_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.sw_mem_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.network_common
+    -flist=$DV_ROOT/design/chip/tile/common/srams/rtl/Flist.srams_common
+//    // dmbr
+//    -flist=$DV_ROOT/design/chip/tile/dmbr/rtl/Flist.dmbr
+//    // dynamic network
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/rtl/Flist.dynamic_node
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/common/rtl/Flist.common
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/components/rtl/Flist.components
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/dynamic/rtl/Flist.dynamic
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/sim/rtl/Flist.sim
+    // l2
+    -flist=$DV_ROOT/design/chip/tile/l2/rtl/Flist.l2
+    -flist=$DV_ROOT/design/chipset/rtl/Flist.chipset
+    -flist=$DV_ROOT/design/common/fpga_bridge/rtl/Flist.fpga_bridge
+    -flist=$DV_ROOT/design/common/fpga_bridge/fpga_send/rtl/Flist.fpga_send
+    -flist=$DV_ROOT/design/common/fpga_bridge/fpga_rcv/rtl/Flist.fpga_rcv
+    -flist=$DV_ROOT/design/chip/chip_bridge/rtl/Flist.chip_bridge
+    -flist=$DV_ROOT/verif/env/common/fake_mem_ctrl.flist
+    -flist=$DV_ROOT/verif/env/metro_chipset/metro_fake_mem.flist
+    -flist=$DV_ROOT/design/chipset/noc_axilite_bridge/rtl/Flist.noc_axilite_bridge
+    -flist=$DV_ROOT/design/chipset/io_xbar/rtl/Flist.io_xbar
+    -flist=$DV_ROOT/design/chipset/io_xbar/common/rtl/Flist.common
+    -flist=$DV_ROOT/design/chipset/io_xbar/dynamic/rtl/Flist.dynamic
+    -flist=$DV_ROOT/design/chipset/io_xbar/components/rtl/Flist.components
+    -flist=$DV_ROOT/design/chipset/io_ctrl/rtl/Flist.io_ctrl
+    //axi_lite_slave_rf
+    -flist=$DV_ROOT/design/chipset/axi_lite_slave_rf/rtl/Flist.axi_lite_slave_rf
+#ifdef FLIST_ORAM
+    -flist=$DV_ROOT/design/chip/tinyoram/rtl/Flist.oram
+    -config_rtl=ORAM_ON"
+    -sim_run_args=+oram"
+#endif
+
+    -config_rtl=METRO_CHIPSET
+    -config_rtl=PITON_NO_CHIP_BRIDGE
+    -config_rtl=PITON_NO_JTAG
+    -config_rtl=SYNTHESIZABLE_BRAM
+    // No scan chains
+    -config_rtl=NO_SCAN
+
+    -config_rtl=NO_RTL_CSM          // should be defined to have a L15 MSHR of 64
+
+    -config_l1i_size=16384       // default
+    -config_l1i_associativity=4     // default
+
+    -config_l1d_size=8192           // default
+    -config_l1d_associativity=4     // default
+
+    -config_l15_size=8192           // default
+    -config_l15_associativity=8     // default
+
+    -config_l2_size=65536           // default
+    -config_l2_associativity=4      // default
+
+    -config_l15_l1d_cacheline_size=64   // default
+
+
+    -config_rtl=ICACHE_64B
+
+    -noc1_width=512 
+    -noc2_width=512 
+    -noc3_width=512
+
+    -l15_num_threads=64
+
+    -config_rtl=PITON_NO_CHIP_BRIDGE // 512 noc width is not supported in CHIP_BRIDGE
+
+    -metro_mpi_build_args=-DSYNC_MUX
+
+    -rtl_timeout=50000
+    -sim_run_args=+spc_pipe=0
+    -sim_run_args=+doerrorfinish
+    -sim_run_args=+dowarningfinish
+   
+    -config_rtl=PITON_DPI 
+    -sim_build_args="-CFLAGS -DPITON_DPI"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/b_ary.c"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/iob_main.cc"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/bw_lib.c"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/iob.cc"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/cpx.cc"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/pcx.cc"
+    -vcs_build_args="$DV_ROOT/tools/pli/metro_mpi.cpp"
+    -metro_mpi_build_args="$DV_ROOT/tools/verilator/metro_mpi.cpp"
+    -metro_mpi_build_args="-CFLAGS -I$DV_ROOT/tools/pli/iop"
+    //-metro_mpi_build_args="-MAKEFLAGS CXX=mpic++ -MAKEFLAGS LINK=mpic++"
+    -vcs_build_args="-cc mpicc"
+    -vcs_build_args="-cpp mpic++"
+    -vcs_build_args="-ld mpic++"
+    -post_process_cmd="regreport -1 > status.log"
+    -post_process_cmd="perf > perf.log"
+    -asm_diag_root=$DV_ROOT/verif/diag
+    -image_diag_root=$DV_ROOT/verif/diag
+    -midas_args=-mmu=niagara
+    -sim_run_args=+wait_cycle_to_kill=10
+    -vcs_cm_args=line+tgl+cond+branch+fsm
+</metro_fake_mem>
diff --git a/piton/tools/src/sims/metro_tile.config b/piton/tools/src/sims/metro_tile.config
new file mode 100644
index 00000000..033182d6
--- /dev/null
+++ b/piton/tools/src/sims/metro_tile.config
@@ -0,0 +1,229 @@
+// Modified by Barcelona Supercomputing Center on March 3rd, 2022
+// Modified by Princeton University on June 9th, 2015
+// ========== Copyright Header Begin ==========================================
+//
+// OpenSPARC T1 Processor File: manycore.config
+// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
+// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
+//
+// The above named program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU General Public
+// License version 2 as published by the Free Software Foundation.
+//
+// The above named program is distributed in the hope that it will be
+// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// General Public License for more details.
+//
+// You should have received a copy of the GNU General Public
+// License along with this work; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+//
+// ========== Copyright Header End ============================================
+// 1 core without I/O testbench config file for sims
+
+<metro_tile>
+    -model=metro_tile
+    -toplevel=metro_tile
+    -flist=$DV_ROOT/design/include/Flist.include
+    -flist=$DV_ROOT/design/common/rtl/Flist.common
+    -flist=$DV_ROOT/design/chipset/include/Flist.include
+//    -flist=$DV_ROOT/design/rtl/Flist.system
+//    -flist=$DV_ROOT/design/chip/rtl/Flist.chip
+//    -flist=$DV_ROOT/design/chip/pll/rtl/Flist.pll
+    -flist=$DV_ROOT/design/chip/jtag/rtl/Flist.jtag
+    -flist=$DV_ROOT/design/chip/tile/rtl/Flist.tile
+    -flist=$DV_ROOT/design/chip/tile/rtap/rtl/Flist.rtap
+    -flist=$DV_ROOT/design/chip/tile/l15/rtl/Flist.l15
+    -flist=$DV_ROOT/verif/env/metro_tile/metro_tile.flist
+    -flist=$DV_ROOT/verif/env/common/fake_mem_ctrl.flist
+#ifdef FLIST_PICO
+    -flist=$DV_ROOT/design/chip/tile/pico/rtl/Flist.pico
+    -rv32
+    -config_rtl=PITON_PICO
+#endif
+#ifdef FLIST_OST1
+    -flist=$DV_ROOT/design/chip/tile/fpu/rtl/Flist.fpu
+    -flist=$DV_ROOT/design/chip/tile/sparc/rtl/Flist.sparc_top
+    -flist=$DV_ROOT/design/chip/tile/sparc/ifu/rtl/Flist.ifu
+    -flist=$DV_ROOT/design/chip/tile/sparc/lsu/rtl/Flist.lsu
+    -flist=$DV_ROOT/design/chip/tile/sparc/tlu/rtl/Flist.tlu
+    -flist=$DV_ROOT/design/chip/tile/sparc/spu/rtl/Flist.spu
+    -flist=$DV_ROOT/design/chip/tile/sparc/ffu/rtl/Flist.ffu
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/rtl/Flist.exu
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/rtl/Flist.bw_r_irf
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/common/rtl/Flist.bw_r_irf_common
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/bw_r_irf_register8/rtl/Flist.bw_r_irf_register8
+    -flist=$DV_ROOT/design/chip/tile/sparc/exu/bw_r_irf/bw_r_irf_register16/rtl/Flist.bw_r_irf_register16
+    -flist=$DV_ROOT/design/chip/tile/sparc/mul/rtl/Flist.mul
+    -flist=$DV_ROOT/design/chip/tile/sparc/srams/rtl/Flist.srams
+    -flist=$DV_ROOT/design/chip/tile/sparc/rtl/Flist.sparc_common
+    -sparcv9
+    -config_rtl=PITON_OST1
+#endif
+#ifdef FLIST_ARIANE    
+    -flist=$DV_ROOT/design/chip/tile/ariane/Flist.ariane
+    -flist=$HPDCACHE_ROOT/rtl/hpdcache.Flist
+    -flist=$DV_ROOT/design/chip/tile/ariane/Flist.hpdc_param
+    -flist=$DV_ROOT/design/chipset/rv64_platform/Flist.rv64_platform
+    -vcs_build_args="-sverilog +systemverilogext+.sv -ntb_opts uvm-1.1 +vpi"
+    -vcs_build_args=-timescale=1ps/1ps
+    -rv64
+    -rv64_platform
+    -config_rtl=PITON_ARIANE
+    -config_rtl=PITON_RV64_PLATFORM
+    -config_rtl=PITON_RV64_DEBUGUNIT
+    -config_rtl=PITON_RV64_CLINT
+    -config_rtl=PITON_RV64_PLIC
+    -config_rtl="EXTERNAL_HPM_EVENT_NUM 10"  //can be 4, 6 or 10 
+#endif
+#ifdef FLIST_SARG
+    -flist=$DV_ROOT/design/chip/tile/sargantana/openpiton.f
+    -flist=$DV_ROOT/design/chipset/rv64_platform/Flist.rv64_platform
+    -flist=$DV_ROOT/design/chipset/bsc/rtl/Flist.bsc_riscv_peripherals
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/clint/Flist.clint
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/plic/Flist.plic
+    -vcs_build_args="-sverilog +systemverilogext+.sv -ntb_opts uvm-1.1 +vpi"
+    -vcs_build_args=-timescale=1ps/1ps
+    -rv64
+    -rv64_platform
+    -config_rtl=PITON_SARG
+    -config_rtl=PITON_ARIANE_HPDC
+    -config_rtl=HPDCACHE_OPENPITON
+    -config_rtl=PITON_RV64_PLATFORM
+    -config_rtl=PITON_BSC_RISCV_PERIPHERALS
+    -config_rtl="CONF_SARGANTANA_PHY_ADDR_SIZE 40"
+    -config_rtl="CONF_HPDCACHE_PA_WIDTH 40"
+    -config_hpdc_req_words=8
+    -config_rtl="EXTERNAL_HPM_EVENT_NUM 10"  //can be 4, 6 or 10 
+#endif
+#ifdef FLIST_LOX
+    -flist=$DV_ROOT/design/chip/tile/lagarto_ox/openpiton.f
+    -flist=$DV_ROOT/design/chipset/rv64_platform/Flist.rv64_platform
+    -flist=$DV_ROOT/design/chipset/bsc/rtl/Flist.bsc_riscv_peripherals
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/clint/Flist.clint
+    -flist=$DV_ROOT/design/chipset/bsc_rv64_peripherals/rtl/plic/Flist.plic
+    -rv64
+    -rv64_platform
+    -config_rtl=SIMULATION
+    -config_rtl=LOX
+    -config_rtl=PITON_LOX
+    -config_rtl=PITON_ARIANE_HPDC
+    -config_rtl=HPDCACHE_OPENPITON
+    -config_rtl=PITON_RV64_PLATFORM
+    -config_rtl=PITON_BSC_RISCV_PERIPHERALS
+    -config_rtl=PITON_RV64_DEBUGUNIT
+    -config_rtl=PITON_RV64_CLINT
+    -config_rtl=PITON_RV64_PLIC
+    -config_rtl="CONF_HPDCACHE_PA_WIDTH 40"
+    -config_hpdc_req_words=8
+    -config_rtl="EXTERNAL_HPM_EVENT_NUM 10"  //can be 4, 6 or 10
+    
+#endif
+
+
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.clib_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.dlib_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.dft_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.ucb_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.sw_mem_common
+    -flist=$DV_ROOT/design/chip/tile/common/rtl/Flist.network_common
+    -flist=$DV_ROOT/design/chip/tile/common/srams/rtl/Flist.srams_common
+    // dmbr
+    -flist=$DV_ROOT/design/chip/tile/dmbr/rtl/Flist.dmbr
+    // dynamic network
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/rtl/Flist.dynamic_node
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/common/rtl/Flist.common
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/components/rtl/Flist.components
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/dynamic/rtl/Flist.dynamic
+    -flist=$DV_ROOT/design/chip/tile/dynamic_node/sim/rtl/Flist.sim
+    // l2
+    -flist=$DV_ROOT/design/chip/tile/l2/rtl/Flist.l2
+    -flist=$DV_ROOT/design/chipset/rtl/Flist.chipset
+//    -flist=$DV_ROOT/design/common/fpga_bridge/rtl/Flist.fpga_bridge
+//    -flist=$DV_ROOT/design/common/fpga_bridge/fpga_send/rtl/Flist.fpga_send
+//    -flist=$DV_ROOT/design/common/fpga_bridge/fpga_rcv/rtl/Flist.fpga_rcv
+//    -flist=$DV_ROOT/design/chip/chip_bridge/rtl/Flist.chip_bridge
+//    -flist=$DV_ROOT/verif/env/manycore/manycore.flist
+ 
+//    -flist=$DV_ROOT/design/chipset/noc_axilite_bridge/rtl/Flist.noc_axilite_bridge
+//    -flist=$DV_ROOT/design/chipset/io_xbar/rtl/Flist.io_xbar
+//    -flist=$DV_ROOT/design/chipset/io_xbar/common/rtl/Flist.common
+//    -flist=$DV_ROOT/design/chipset/io_xbar/dynamic/rtl/Flist.dynamic
+//    -flist=$DV_ROOT/design/chipset/io_xbar/components/rtl/Flist.components
+//    -flist=$DV_ROOT/design/chipset/io_ctrl/rtl/Flist.io_ctrl
+//    //axi_lite_slave_rf
+//    -flist=$DV_ROOT/design/chipset/axi_lite_slave_rf/rtl/Flist.axi_lite_slave_rf
+#ifdef FLIST_ORAM
+    -flist=$DV_ROOT/design/chip/tinyoram/rtl/Flist.oram
+    -config_rtl=ORAM_ON"
+    -sim_run_args=+oram"
+#endif
+
+    -config_rtl=METRO_TILE
+    -config_rtl=SYNTHESIZABLE_BRAM
+    // No scan chains
+    -config_rtl=NO_SCAN
+    -config_rtl=NO_RTL_CSM          // should be defined to have a L15 MSHR of 64
+
+    -config_l1i_size=16384       // default
+    -config_l1i_associativity=4     // default
+
+    -config_l1d_size=8192           // default
+    -config_l1d_associativity=4     // default
+
+    -config_l15_size=8192           // default
+    -config_l15_associativity=8     // default
+
+    -config_l2_size=65536           // default
+    -config_l2_associativity=4      // default
+    -config_l15_l1d_cacheline_size=64   // default    
+
+
+    -config_rtl=ICACHE_64B
+
+    -noc1_width=512 
+    -noc2_width=512 
+    -noc3_width=512
+
+    -l15_num_threads=64
+
+    -config_rtl=PITON_NO_CHIP_BRIDGE // 512 noc width is not supported in CHIP_BRIDGE
+
+    -config_rtl=REPORT_CACHE_ST
+    -metro_mpi_build_args=-DSYNC_MUX
+
+    -rtl_timeout=50000
+    -sim_run_args=+spc_pipe=0
+    -sim_run_args=+doerrorfinish
+    -sim_run_args=+dowarningfinish
+    -vcs_build_args=+nospecify
+    -vcs_build_args=-Xstrict=1 -notice
+    -vcs_build_args=-P $DV_ROOT/tools/pli/iop/bwioj.tab // needed for fake_l2
+    -vcs_build_args=-P $DV_ROOT/tools/pli/socket/bwsocket_pli.tab
+    -vcs_build_args=-P $DV_ROOT/tools/pli/mem/bwmem_pli.tab
+    -vcs_build_args=-lsocket_pli -liob -lmem_pli
+    -vcs_build_args=+rad
+    -config_rtl=PITON_DPI 
+    -sim_build_args="-CFLAGS -DPITON_DPI"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/b_ary.c"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/iob_main.cc"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/bw_lib.c"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/iob.cc"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/cpx.cc"
+    -sim_build_args="$DV_ROOT/tools/pli/iop/pcx.cc"
+    -vcs_build_args="$DV_ROOT/tools/pli/metro_mpi.cpp"
+    -metro_mpi_build_args="$DV_ROOT/tools/verilator/metro_mpi.cpp"
+    -metro_mpi_build_args="-CFLAGS -I$DV_ROOT/tools/pli/iop"
+    //-metro_mpi_build="-MAKEFLAGS CXX=mpic++ -MAKEFLAGS LINK=mpic++"
+    -vcs_build_args="-cc mpicc"
+    -vcs_build_args="-cpp mpic++"
+    -vcs_build_args="-ld mpic++"
+    -post_process_cmd="regreport -1 > status.log"
+    -post_process_cmd="perf > perf.log"
+    -asm_diag_root=$DV_ROOT/verif/diag
+    -image_diag_root=$DV_ROOT/verif/diag
+    -midas_args=-mmu=niagara
+    -sim_run_args=+wait_cycle_to_kill=10
+    -vcs_cm_args=line+tgl+cond+branch+fsm
+</metro_tile>
diff --git a/piton/tools/src/sims/sims,2.0 b/piton/tools/src/sims/sims,2.0
index a8b4612c..265f236f 100755
--- a/piton/tools/src/sims/sims,2.0
+++ b/piton/tools/src/sims/sims,2.0
@@ -176,6 +176,9 @@ Getopt::Long::Configure ('no_auto_abbrev') ;
         'hpdc' => 0,
         'sarg' => 0,
         'lox' => 0,
+        'hbm_lat' => 0,
+        'multimc' => 0,
+        'multimc_indices' => "",
         'pico' => 0,
         'pico_het' => 0,
         'post_process_cmd' => [],
@@ -239,6 +242,9 @@ Getopt::Long::Configure ('no_auto_abbrev') ;
         'vlt_build' => 0,
         'vlt_build_args' => [],
         'vlt_run' => 0,
+        'metro_mpi_build' => 0,    
+        'metro_mpi_run' => 0,
+        'metro_mpi_build_args' => [],
         'version' => 0,
         'vfile' => [],
         'mem_init_py' => ""
@@ -333,6 +339,11 @@ GetOptions (\%opt,
             'hpdc!',
             'sarg!',
             'lox!',
+            'hbm_lat=i',
+            'multimc=s',
+            'multimc_indices=s',
+            'metro_mpi_build!',
+            'metro_mpi_run!',
             'pico!',
             'pico_het!',
             'sparcv9!',
@@ -350,6 +361,7 @@ GetOptions (\%opt,
             'simslog_name=s',
             'build_id=s',
             'sys=s',
+            'hbm!',
            ) ;
 
 die ("DIE. -ariane and -pico/-pico_het cannot be set simultaneously") if ($opt{ariane} && ($opt{pico} || $opt{pico_het})) ;
@@ -367,6 +379,8 @@ push (@{$opt{config_cpp_args}}, "-DFLIST_ARIANE")   if ($opt{ariane}) ;
 push (@{$opt{config_cpp_args}}, "-DFLIST_SARG")     if ($opt{sarg}) ;
 push (@{$opt{config_cpp_args}}, "-DFLIST_LOX")     if ($opt{lox}) ;
 push (@{$opt{config_cpp_args}}, "-DFLIST_ORAM")     if ($opt{oram}) ;
+push (@{$opt{config_cpp_args}}, "-DHBM_DEF")        if ($opt{hbm}) ;
+push (@{$opt{config_cpp_args}}, "-DSIM_USE_DPI")   if ($opt{metro_mpi_build}) ;
 
 if ($opt{ariane}) {
   if ($opt{hpdc}) {
@@ -513,25 +527,29 @@ else { $model_path = "$model_dir/$opt{model}/$opt{build_id}" ; }
 &create_model_path () if ($opt{vcs_build} or $opt{other_sim_build} or
                           $opt{icv_build} or $opt{ncv_build} or
                           $opt{msm_build} or $opt{vlt_build} or
-						  $opt{riv_build}) ;
+                          $opt{riv_build}) or $opt{metro_mpi_build};
 
 ################################################################################
 # do some pre building stuff - generate flist
 ################################################################################
 
+
 &pre_build () if (($opt{vcs_build} or $opt{other_sim_build} or
                    $opt{icv_build} or $opt{ncv_build} or
                    $opt{msm_build} or $opt{vlt_build} or
-				           $opt{riv_build}) and !$opt{noclean} ) ;
+                   $opt{riv_build} or $opt{metro_mpi_build}) and !$opt{noclean} ) ;
+
 
 ################################################################################
 # build the simulation model
 ################################################################################
 
+
 &generic_sim_build () if (($opt{vcs_build} or $opt{ncv_build} or
                            $opt{icv_build} or $opt{other_sim_build} or
                            $opt{msm_build} or $opt{vlt_build} or
-						               $opt{riv_build}) and !$opt{noclean} ) ;
+                           $opt{riv_build} or $opt{metro_mpi_build}) and !$opt{noclean} ) ;
+
 
 ################################################################################
 # assemble .s diag
@@ -547,7 +565,8 @@ else { $model_path = "$model_dir/$opt{model}/$opt{build_id}" ; }
 
 &oram_image () if (($opt{vcs_run} or $opt{ncv_run} or
                     $opt{icv_run} or $opt{other_sim_run} or
-                    $opt{msm_run} or $opt{vlt_run} or $opt{riv_run}) and
+                    $opt{msm_run} or $opt{vlt_run} or 
+                    $opt{riv_run} or $opt{metro_mpi_run}) and
                     $opt{oram}); #if ($opt{image_diag_name}
 
 ################################################################################
@@ -556,7 +575,8 @@ else { $model_path = "$model_dir/$opt{model}/$opt{build_id}" ; }
 
 &generic_sim_run () if ($opt{vcs_run} or $opt{ncv_run} or
                         $opt{icv_run} or $opt{other_sim_run} or
-                        $opt{msm_run} or $opt{vlt_run} or $opt{riv_run}) ;
+                        $opt{msm_run} or $opt{vlt_run} or
+                        $opt{metro_mpi_run} or $opt{riv_run}) ;
 
 ################################################################################
 # run diag.pl if present
@@ -565,7 +585,8 @@ else { $model_path = "$model_dir/$opt{model}/$opt{build_id}" ; }
 if (    -e "diag.pl" and
   ( $opt{vcs_run} or $opt{ncv_run} or
       $opt{icv_run} or $opt{other_sim_run} or
-      $opt{msm_run} or $opt{vlt_run} or $opt{riv_run}) and
+      $opt{msm_run} or $opt{vlt_run} or 
+      $opt{metro_mpi_run} or $opt{riv_run}) and
        $opt{run_diag_pl} )
 {
   print "$prg: executing diag.pl\n";
@@ -582,7 +603,8 @@ if (    -e "diag.pl" and
 
 &post_process if ($opt{vcs_run} or $opt{ncv_run} or
                   $opt{icv_run} or $opt{other_sim_run} or
-                  $opt{msm_run} or $opt{vlt_run} or $opt{riv_run}) ;
+                  $opt{msm_run} or $opt{vlt_run} or
+                  $opt{metro_mpi_run} or $opt{riv_run}) ;
 
 &print_footer () ;
 
@@ -1198,8 +1220,11 @@ sub gen_flist
       } else {
         my $linepyv = (split(' ',substr($line, 0, -1)))[-1] . ".pyv";
         # print("\$linepyv is $linepyv\n");
-        my $linetmp = substr($line, 0, -3) . ".tmp.". substr($line, -2, 1);
-        my $linetmpout = (split(' ',substr($line, 0, -3)))[-1] . ".tmp." . substr($line, -2, 1);
+        my $ext = substr($line, -4, -1);
+        # print("\$ext=$ext\n");
+        my $linetmp    = ($ext eq '.sv')?            substr($line, 0, -4) .       ".tmp.sv"  :              substr($line, 0, -3) .        ".tmp.". substr($line, -2, 1);
+        my $linetmpout = ($ext eq '.sv')? (split(' ',substr($line, 0, -4)))[-1] . ".tmp.sv"  :   (split(' ',substr($line, 0, -3)))[-1]  . ".tmp.". substr($line, -2, 1);
+        # print("\$linetmp is $linetmp\n");
         if (-e $linepyv) {
           # print("original is $line\n");
           !system("pyhp.py $linepyv > $linetmpout") or die("Error running PyHP for $linepyv\n");;
@@ -1494,7 +1519,12 @@ sub generic_sim_build
           push (@{$opt{sim_build_args}}, $x);
       }
     }
-
+    if ($opt{metro_mpi_build}) {
+      foreach my $x (@{$opt{metro_mpi_build_args}})
+      {
+          push (@{$opt{sim_build_args}}, $x);
+      }
+    }
     if ($opt{ncv_build}) {
       $ld_lib_path .= "$ENV{DV_ROOT}/tools/";
       $ld_lib_path .= $os_cpu_slash;
@@ -1516,6 +1546,10 @@ sub generic_sim_build
       }
       # lib_path needs to be before vcs_build_args
       $build_cmd .= $lib_path;
+      if ($opt{metro_mpi_build}) {
+        $build_cmd .= "-CFLAGS -DX_TILES=$opt{x_tiles} " ;
+        $build_cmd .= "-CFLAGS -DY_TILES=$opt{y_tiles} " ;
+      }
     }
     if ($opt{ncv_build}) {
       $build_cmd = "LD_LIBRARY_PATH=";
@@ -1545,6 +1579,34 @@ sub generic_sim_build
       $build_cmd = "vlib work; vlog " ;
     }
 	
+ if ($opt{metro_mpi_build}) {
+      $build_cmd = "verilator  -cc -build  " ;
+      foreach my $top_n (@{$opt{toplevel}}) {
+        $build_cmd .= "-exe $dv_root/tools/verilator/my_$top_n.cpp " ;
+      }
+      # improvable
+      foreach my $top_n (@{$opt{toplevel}}) {
+        $build_cmd .= "--top-module $top_n ";
+      }
+      $build_cmd .= "-Wno-fatal " ;
+      $build_cmd .= "-Wno-BLKANDNBLK " ;
+      $build_cmd .= "-Wno-TIMESCALEMOD " ;
+      $build_cmd .= "--no-timing " if(does_verilator_suport('--no-timing')) ;
+      $build_cmd .= "-DPITON_DPI " ;
+      $build_cmd .= "-CFLAGS -DPITON_LATMODEL " if( ($ENV{PITON_EXTRA_MEMS} > 0) && (defined $ENV{PITON_LAT_FILE}));     
+      $build_cmd .= "--unroll-count 256 " ;
+      $build_cmd .= "-CFLAGS -DVERILATOR " ;
+      $build_cmd .= "-CFLAGS -lstdc++ " ;
+      $build_cmd .= "-CFLAGS -I$dv_root/tools/verilator " ;
+      $build_cmd .= "-CFLAGS -I$dv_root/design/chip/tile/vas_tile_core/konata/src/models/cxx " ;
+        if ($opt{sys} eq "metro_tile" || $opt{sys} eq "metro_chipset" || $opt{sys} eq "metro_fake_mem") {        
+        $build_cmd .= "-CFLAGS -DX_TILES=$opt{x_tiles} " ;
+        $build_cmd .= "-CFLAGS -DY_TILES=$opt{y_tiles} " ;
+      }    
+    }
+
+
+    
     if ($opt{vlt_build}) {
       $build_cmd = "verilator -cc " ;
       $build_cmd .= "-Os -exe $dv_root/tools/verilator/my_top.cpp " ;
@@ -1554,6 +1616,8 @@ sub generic_sim_build
       $build_cmd .= "$dv_root/tools/pli/iop/iob.cc " ;
       $build_cmd .= "$dv_root/tools/pli/iop/cpx.cc " ;
       $build_cmd .= "$dv_root/tools/pli/iop/pcx.cc " ;
+      $build_cmd .= "$dv_root/tools/pli/Realistic_lat/bw_lat_mem_ctrl.cc " if(defined $ENV{PITON_LAT_FILE});
+      $build_cmd .= "$dv_root/tools/pli/Realistic_lat/lat.cc " if(defined $ENV{PITON_LAT_FILE});
       $build_cmd .= "--top-module cmp_top " ;
       $build_cmd .= "-Wno-fatal " ;
       $build_cmd .= "-Wno-BLKANDNBLK " ;
@@ -1564,6 +1628,7 @@ sub generic_sim_build
       $build_cmd .= "-CFLAGS -DPITON_DPI " ;
       #$build_cmd .= "-CFLAGS -lstdc++ " ;
       $build_cmd .= "-CFLAGS -I$dv_root/tools/pli/iop " ;
+      $build_cmd .= "-CFLAGS -I$dv_root/tools/pli/Realistic_lat " if(defined $ENV{PITON_LAT_FILE});
       $build_cmd .= "-CFLAGS -I$dv_root/tools/verilator " ;
 
       if ($opt{log_all}) {
@@ -1623,6 +1688,13 @@ sub generic_sim_build
 
     print "$prg: $build_cmd\n";
 
+    #create a makefile containg build_cmd
+    open (BUILD, "> build.sh") or die ("DIE. can't open build.sh");
+    my $ff=$build_cmd;
+    $ff =~ s/\$DV_ROOT/$dv_root/g;
+    print BUILD "#!/bin/bash\n $ff";
+    close BUILD;
+
     if (! $opt{dryrun}) {
       system ($build_cmd) ;
       die ("DIE. failed building model") if ($?) ;
@@ -1671,6 +1743,8 @@ sub generic_sim_run
     die ("DIE. work/ not found in $model_path") if ($opt{msm_run} and ! -d "$model_path/work") ;
 	die ("DIE. work/ not found in $model_path") if ($opt{riv_run} and ! -d "$model_path/work") ;
     die ("DIE. obj_dir/ not found in $model_path") if ($opt{vlt_run} and ! -d "$model_path/obj_dir") ;
+    die ("DIE. obj_dir/ not found in $model_path") if ($opt{metro_mpi_run} and ! -d "$model_path/obj_dir") ;
+
 
     # pass the good trap and bad trap addresses to the testbench
     my $good_trap = "";
@@ -1816,7 +1890,7 @@ sub generic_sim_run
       $cmd .= "/lib/libmodelsimpli.so\"";
       $cmd .= " " ;
       $cmd .= join (" ", @{$opt{sim_run_args}}) ;
-      print("====================================\n$cmd\n====================================");
+      print("====================================\n$cmd\n====================================\n");
     }
 	
 if ($opt{riv_run}) {
@@ -1863,6 +1937,49 @@ if ($opt{riv_run}) {
 	 } 
     }	
 
+
+#my $mpi_ov="--oversubscribe";
+my $mpi_ov=" ";
+
+ if ($opt{metro_mpi_run}) {
+  my $tile_np= $ENV{PITON_NUM_TILES};
+     if ($opt{sys} eq "metro_chipset") {
+        #remove diag.dump to avoid remote server memory overflow
+        system ("rm -rf $model_path/../../diag.dump") ; 
+        system ("rm -rf $model_path/../../diag.o") ;
+        system ("rm -rf $model_path/../../diag.exe") ;
+        
+        ####  --output-filename filename
+        $cmd .= "mpirun $mpi_ov -np 1  $model_path/obj_dir/Vmetro_chipset " ;
+        $cmd .= " " ;
+        $cmd .= join (" ", @{$opt{sim_run_args}}) ;
+        $cmd .= " : $mpi_ov -np $tile_np  $model_path/../../metro_tile/rel-0.1/obj_dir/Vmetro_tile ";
+        #$cmd .= " " ;
+        $cmd .= join (" ", @{$opt{sim_run_args}}) ;
+        if($ENV{PITON_EXTRA_MEMS} > 0){
+            $cmd .= " : $mpi_ov -np $ENV{PITON_EXTRA_MEMS}  $model_path/../../metro_fake_mem/rel-0.1/obj_dir/Vmetro_fake_mem ";
+            $cmd .= " " ;
+            $cmd .= join (" ", @{$opt{sim_run_args}}) ;
+        }
+        
+      }
+      else {
+        foreach my $top_n (@{$opt{toplevel}}) {
+          $cmd .= "$model_path/obj_dir/V$top_n " ;
+        }
+        $cmd .= " " ;
+        $cmd .= join (" ", @{$opt{sim_run_args}}) ;
+      }
+      
+       #create a file containg cmd
+       open (BUILD, "> run.sh") or die ("DIE. can't open run.sh");
+       my $ff=$cmd;
+       $ff =~ s/\$DV_ROOT/$dv_root/g;
+       print BUILD "#!/bin/bash\n $ff";
+       close BUILD;      
+    }
+
+
     if ($opt{vlt_run}) {
       $cmd .= "$model_path/obj_dir/Vcmp_top " ;
       $cmd .= " " ;
@@ -2257,6 +2374,24 @@ sub assemble_diag
     elsif (($opt{rv32} | $opt{rv64}) and ($opt{asm_diag_name} =~ /\.c/)) { $diag_name = "diag.c" ; }
     else { $diag_name = "diag.s" ; }
 
+    #skip diag assembeling for metro_mpi as mem.image is already genrated by mpi_sims script    
+    if ($opt{metro_mpi_run} && $opt{precompiled} && (-f "$opt{asm_diag_path}/mem.image")  ){
+       push (@{$opt{sim_run_args}}, "+mem_image=$opt{asm_diag_path}/mem.image");
+       print "$prg: the mem_image has found in $opt{asm_diag_path}/mem.image. Skip diag assembeling\n";
+       `cp  $opt{asm_diag_path}/symbol.tbl ./` ;
+  		 die ("DIE. could not copy symbol.tbl ") if ($?) ; 
+       `touch diag.ev` ;
+  		 die ("DIE. could not create diag.ev") if ($?) ;
+  		 push (@{$opt{sim_run_args}}, "+lat_model=$ENV{PITON_LAT_FILE}") if(defined $ENV{PITON_LAT_FILE});
+         print @{$opt{sim_run_args}};
+       return;
+    }
+    if($opt{metro_mpi_run}){
+       push (@{$opt{sim_run_args}}, "+mem_image=./mem.image");
+       push (@{$opt{sim_run_args}}, "+lat_model=$ENV{PITON_LAT_FILE}") if(defined $ENV{PITON_LAT_FILE});
+       print @{$opt{sim_run_args}};
+    }
+
     # copy diagnostic to run area
     `cp $diag_full_path $diag_name` ;
     die ("DIE. unable to copy assembly diag to $ENV{PWD}") if ($?) ;
@@ -2437,6 +2572,17 @@ sub assemble_diag
     exit (0) if ($opt{midas_only}) ;
 }
 
+sub get_metro_mpi_diag_path {
+  my ($file_name,$dir,$ext) = fileparse($opt{asm_diag_name}, qr/\.[^.]*/);  
+  my $dv_root = $ENV{DV_ROOT}; 
+  my $core = 
+    ($opt{ariane}) ? "ariane" :
+    ($opt{lagarto}) ? "lagarto" :
+    ($opt{lagarto_tile}) ? "lagarto_tile" : "other"; 
+     my $piton_num_tiles=($opt{x_tiles} * $opt{y_tiles});
+     my $diags_path = "$dv_root/../build/diags/${core}_${piton_num_tiles}_${file_name}"; 	
+     return $diags_path;
+}
 ################################################################################
 # call_program - runs a program, tee's the output to a log, and returns exit
 # status
@@ -2540,6 +2686,115 @@ sub find_diag_path
   return $full_path[0] ;
 }
 
+###############################################################################
+#   Multiple MC functions
+###############################################################################
+sub get_mc_mapping {
+    my ($piton_X,$piton_Y,$indices,$mc_num,$net_conf)=@_;
+    my @mc_list = split(",",$indices);   
+    my $edge_idx = 0;
+    my @mc_map;
+    for (my $i=0; $i< $piton_X; $i++){
+        for (my $j=0; $j< $piton_Y; $j++){
+            #currentid = (i, j);
+            my $flatid = $i + ($j * $piton_X);
+            my $exists = grep( /^$flatid$/, @mc_list);
+            my $endp = $piton_X * $piton_Y;            
+            if ($net_conf ne "xbar_config" && $edge_idx < $mc_num && $exists > 0){
+                my $index =-1;
+                my $u=0;
+                foreach my $p ( @mc_list){
+                    $index =$u if ($flatid == $p);
+                    $u++;
+                } 
+                if ($i == 0 && $j != 0){ # Tile 0 west port is occupied by "offchip" connection
+                    $endp = $endp + $piton_X + $piton_X + $j;
+                    my %h=('id'=> $flatid,'x'=> $i,'y'=> $j,'n'=> 0,'p'=> 'W','endp'=> $endp);
+                    push (@mc_map,\%h);
+                    $edge_idx += 1
+
+                }elsif ($j == 0){
+                    $endp = $endp + $i;
+                    my %h=('id'=> $flatid,'x'=> $i,'y'=> $j,'n'=> 0,'p'=> 'N','endp'=> $endp);
+                    push (@mc_map,\%h);  
+                    $edge_idx += 1
+                
+                }elsif ($j == $piton_Y-1){ #  and i != 0
+                    $endp = $endp + $piton_X + $i;
+                    my %h=('id'=> $flatid,'x'=> $i,'y'=> $j,'n'=> 0,'p'=> 'S','endp'=> $endp);
+                    push (@mc_map,\%h);                    
+                    $edge_idx += 1
+
+                }elsif ($i == $piton_X-1){ # and j != PITON_Y_TILES-1
+                    $endp = $endp + $piton_X + $piton_X + $piton_Y + $j;
+                    my %h=('id'=> $flatid,'x'=> $i,'y'=> $j,'n'=> 0,'p'=> 'E','endp'=> $endp);
+                    push (@mc_map,\%h);  
+                    $edge_idx += 1
+                }else{
+                    die "Fatal: $flatid is not an edge router\n";
+                }
+           } 
+         }
+    } 
+    return @mc_map;
+}
+
+sub uniq {
+  my %seen;
+  return grep { !$seen{$_}++ } @_;
+}
+
+sub get_both_xy_edge_routers_ids{
+    my ($x, $y)=@_;
+    my @edges;
+    my $i;
+    my $j;
+    $j=0;
+    for ($i=0; $i<$x; $i++){my $id= $j*$x+$i;push (@edges,$id);} # first row
+    $i=$x-1;
+    for ($j=1; $j<$y; $j++){my $id= $j*$x+$i;push (@edges,$id);} #last column
+    $j=$y-1;
+    for ($i=$x-2; $i>0; $i--){my $id= $j*$x+$i;push (@edges,$id);} # last row
+    $i=0;
+    for ($j=$y-1; $j>0; $j--){my $id= $j*$x+$i;push (@edges,$id);} #first column
+    #print join(',',@edges), "\n";
+    return uniq(@edges);
+}
+
+sub get_first_y_edge_routers_ids{
+    my ($x, $y)=@_;
+    my @edges;
+    my $i;
+    my $j;
+    $i=0;
+    for ($j=$y-1; $j>=0; $j--){my $id= $j*$x+$i;push (@edges,$id);} #first column
+    return uniq(@edges);
+}
+
+sub distribute_mc_equal_space_on_all_edges {
+    my ($x,$y,$mc)=@_;
+    my @edge_ids =get_both_xy_edge_routers_ids ($x,$y);
+    my $edges = scalar @edge_ids;
+    my $d= ($mc==0)? 0 : ($edges/$mc);
+    my $mc_num=0;
+    my $mmc =  '';
+    for (my $m=0; $m<$mc; $m++){
+        $mc_num= int ($d * $m);
+        my $mc_id = $edge_ids[$mc_num];
+        $mmc.=($m==0)?  "$mc_id" : ",$mc_id";
+    }
+    print "all_edges : @edge_ids  ; mmcs: $mmc \n";
+    return $mmc
+}
+
+sub does_verilator_suport {
+	my $flag=shift;
+	`verilator --lint-only $flag $ENV{DV_ROOT}/design/common/rtl/alarm_counter.v  2>&1`;	
+	return ($? ==0);
+}
+
+
+
 ################################################################################
 # parse all arguments from command line and config file
 ################################################################################
@@ -2670,6 +2925,9 @@ sub parse_args
             'vlt_build!',
             'vlt_build_args=s@',
             'vlt_run!',
+            'metro_mpi_build!',
+            'metro_mpi_build_args=s@',
+            'metro_mpi_run!',
             'num_tile=s',
             'x_tiles=s',
             'y_tiles=s',
@@ -2791,6 +3049,7 @@ my @nocs_width = (
     $opt{msm_build} = 0 ;
 	$opt{riv_build} = 0 ;
     $opt{vlt_build} = 0 ;
+    $opt{metro_mpi_build} = 0 ;
     $opt{other_sim_build} = 0 ;
   }
 
@@ -2837,8 +3096,84 @@ my @nocs_width = (
   $ENV{PITON_SARG}     = $opt{sarg};
   $ENV{PITON_LOX}      = $opt{lox};
   $ENV{PITON_RV64_PLATFORM}   = "1" if ($opt{rv64_platform});
+  $ENV{PITON_METRO_MPI}  = $opt{metro_mpi_build};
   push (@{$opt{config_rtl}}, "PITON_PICO_HET") if ($opt{pico_het});
+  push (@{$opt{config_rtl}}, "PITON_METRO_MPI")   if ($opt{metro_mpi_build});
 
+  my @mc_map;
+  
+  $ENV{PITON_EXTRA_MEMS} =0;
+  $ENV{PITON_HBM_LAT} =0;
+  if($opt{hbm_lat}){
+  	$ENV{PITON_HBM_LAT}  = $opt{hbm_lat};
+  }
+  
+  if ($opt{multimc} eq "acme"){
+    my @ids = get_first_y_edge_routers_ids($opt{x_tiles} , $opt{y_tiles});
+    my $list=join(',',@ids);
+    $opt{multimc} = $opt{y_tiles};
+    $opt{multimc_indices}=$list;
+    print "**info: acme mode is selected.  Distribute $opt{y_tiles} MCs on all edge routers loacted at first Mesh column. MC router ids: $list.\n";
+  }
+  
+  
+  if ($opt{multimc}>0){
+      my $piton_num_tiles=($opt{x_tiles} * $opt{y_tiles});
+      my $edge_tiles = 2 * ($opt{x_tiles}-1 + $opt{y_tiles}-1);
+      if ($edge_tiles > $piton_num_tiles || $edge_tiles < 1){
+        $edge_tiles = $piton_num_tiles;
+      }
+      if($edge_tiles > $opt{multimc} ){
+          $edge_tiles =$opt{multimc};
+      }
+      if (!$opt{hbm}){
+            die  ("DIE. Could not use -multimc option without -hbm option");
+        }
+             
+        elsif ($edge_tiles > 30){
+            print "Extra $edge_tiles connections to HBM (one per edge tile) are limited to 30.\n";
+            $ENV{PITON_EXTRA_MEMS} =30;
+        }
+          else{
+            print "Extra $edge_tiles connections to HBM will be used.\n";
+            $ENV{PITON_EXTRA_MEMS} = $edge_tiles;
+        }        
+ 
+     if($opt{multimc_indices}){
+         $ENV{PITON_MC_INDICES} =$opt{multimc_indices};
+         my $str = $opt{multimc_indices};
+         my @mc_tiles=split(/,/,$str);
+         my $l = scalar (@mc_tiles);
+         if( $l != $edge_tiles ){
+             die  ("DIE. the number of tile in multimc_indices $l is not equal to the number of multimc $edge_tiles.\n");
+         }
+         my %seen;
+         foreach my $p ( @mc_tiles){
+               die  ("DIE. multiple tile number ($p) is given in multimc_indices:$str.\n") if(defined $seen{$p});
+               $seen{$p}=1;
+             die  ("DIE. $p is not a valid integer number in multimc_indices:$str.\n") if ( $p !~ /^[+-]?\d+$/);
+             die  ("DIE. The tile number $p should be smaller that total number of tiles ($piton_num_tiles).\n") if ( $p >= $piton_num_tiles);
+             my $x_p = $p % $opt{x_tiles};
+             my $y_p = ($p - $x_p) / $opt{y_tiles};
+             if($x_p!=0 && $y_p!=0 && $x_p != $opt{x_tiles}-1 && $y_p!= $opt{y_tiles}-1){
+                 die  ("DIE. The tile number $p ($x_p,$y_p) in multimc_indices is not an edge router.\n");
+             }    
+                     
+         }
+     }else{
+         my $mc_tiles=distribute_mc_equal_space_on_all_edges($opt{x_tiles},$opt{y_tiles},$ENV{PITON_EXTRA_MEMS});
+         print "**Info: No memory controller (MC) indices are given as input. Distribute MCs with equal space on all edges:$mc_tiles\n";
+         $ENV{PITON_MC_INDICES} =$mc_tiles;
+     }
+     
+     @mc_map = get_mc_mapping ($opt{x_tiles},$opt{y_tiles},$opt{multimc_indices},$ENV{PITON_EXTRA_MEMS},$ENV{PITON_NETWORK_CONFIG});
+  }
+
+
+
+
+my $mmc_num= $ENV{PITON_EXTRA_MEMS};
+my $mmc_num_tmp = ($mmc_num==0)? 1 : $mmc_num;
   my $pton_x_tiles="";
   my $pton_y_tiles="";
   my $pton_num_tiles="";
@@ -2919,7 +3254,51 @@ my @nocs_width = (
       push(@{$opt{config_rtl}}, "OST1_PLI_SLAM_RANDOM") ;
       push(@{$opt{config_rtl}}, "OST1_PLI_MRA_VAL") ;
   }
-
+    my $map_file ="
+    // This file is autogenrated using sims,2  and contains the memory controller mapping information
+    #ifndef MC_TILE_CONNECT_H
+    #define  MC_TILE_CONNECT_H
+
+        #define PRONOC_T1  $pton_x_tiles
+        #define PRONOC_T2  $pton_y_tiles
+        #define PRONOC_T3  1
+        
+        #define PITON_PORT_L  0
+        #define PITON_PORT_E  1
+        #define PITON_PORT_N  2
+        #define PITON_PORT_W  3
+        #define PITON_PORT_S  4
+
+ typedef struct \{
+               unsigned int x;
+               unsigned int y;
+               unsigned int p;
+               unsigned int id;
+               unsigned int endp;
+        \} mc_map_t;    
+
+    #define  MCS_NUM  $mmc_num
+
+    mc_map_t mc_map\[$mmc_num_tmp\]=\{ 
+";    
+    my $f=0;
+    foreach my $k (@mc_map){
+        my $ax = $k->{'x'};
+        my $ay = $k->{'y'}; 
+        my $ap = $k->{'p'};
+        my $id = $k->{'id'}; 
+        my $endp = $k->{'endp'};
+        $map_file .=",\n" if ($f!=0);
+        $f=1; 
+        $map_file .=" \{ $ax, $ay, PITON_PORT_$ap, $id, $endp \}"
+   }    
+    $map_file .="\{ 0,0,0,0,0\}"  if($f==0);    
+       
+    $map_file .=  "\};\n #endif \n"; 
+    my $mfile=$ENV{DV_ROOT} . "/tools/verilator/mcs_map_info.tmp.h";
+    open( FFF, ">$mfile" ) or die "Can't open '$map_file': $!\n";
+    print  FFF  $map_file;
+    close(FFF); 
 }
 
 ################################################################################
@@ -3016,6 +3395,7 @@ OPENPITON ARGUMENTS
             in the x dimension and Y tiles in the y dimension. If
             -x_tiles and -y_tiles is not specified, the default is
             X=1 and Y=1. The maximum value for both X and Y is 1024.
+    -hbm enables HBM related definitions.
 
     -ed_enable
             enable Execution Drafting in each core.
@@ -3191,7 +3571,8 @@ VERILOG RUNTIME RELATED
 
     -pre_process_cmd=COMMAND
            pre processing command to be run before vcs (simv) run starts
-
+     -metro_mpi_run
+           run the metro_mpi simulation. 
 MIDAS
 
 midas is the diag assembler
diff --git a/piton/tools/src/sims/sims.config b/piton/tools/src/sims/sims.config
index ec9be107..723a6841 100644
--- a/piton/tools/src/sims/sims.config
+++ b/piton/tools/src/sims/sims.config
@@ -45,3 +45,7 @@
 #include "memctrl_test.config"
 #include "sdctrl_test.config"
 #include "host_fpga_comm.config"
+
+#include "metro_chipset.config"
+#include "metro_tile.config"
+#include "metro_fake_mem.config"
diff --git a/piton/tools/verilator/metro_mpi.cpp b/piton/tools/verilator/metro_mpi.cpp
new file mode 100644
index 00000000..c4a1ef5b
--- /dev/null
+++ b/piton/tools/verilator/metro_mpi.cpp
@@ -0,0 +1,154 @@
+#include <iostream>
+#include <mpi.h>
+#include <vector>
+#include <cstring>
+#include "metro_mpi.h"
+
+using namespace std;
+
+
+
+int mpi_check_trap (int local_condition){    
+    int global_condition = CONTINUE; // Global exit condition after reduction
+    // Use MPI_Allreduce to find the maximum exit condition across all processes
+    MPI_Allreduce(&local_condition, &global_condition, 1, MPI_INT, MPI_MAX, MPI_COMM_WORLD);
+    return global_condition;
+}
+
+
+
+
+
+void initialize(){
+    MPI_Init(NULL, NULL);
+    //cout << "initializing" << endl;
+}
+
+int getRank(){
+    int rank;
+    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
+    return rank;
+}
+
+int getSize(){
+    int size;
+    MPI_Comm_rank(MPI_COMM_WORLD, &size);
+    return size;
+}
+
+void finalize(){
+    //cout << "[DPI CPP] Finalizing" << endl;
+    MPI_Finalize();
+}
+
+
+
+
+// MPI finish functions
+unsigned short mpi_receive_finish(){
+    unsigned short message;
+    int message_len = 1;
+    //cout << "[DPI CPP] Block Receive finish from rank: " << origin << endl << std::flush;
+    MPI_Bcast(&message, message_len, MPI_UNSIGNED_SHORT, 0, MPI_COMM_WORLD);
+    /*if (short(message)) {
+        cout << "[DPI CPP] finish received: " << std::hex << (short)message << endl << std::flush;
+    }*/
+    return message;
+}
+
+void mpi_send_finish(unsigned short message, int rank){
+    int message_len = 1;
+    /*if (message) {
+        cout << "[DPI CPP] Sending finish " << std::hex << (int)message << " to All" << endl << std::flush;
+    }*/
+    MPI_Bcast(&message, message_len, MPI_UNSIGNED_SHORT, rank, MPI_COMM_WORLD);
+}
+
+
+void mpi_send_chan(void * chan, size_t len, int dest, int rank, int flag){
+ // printf("send dest %u, rank=%u, flag=%u\n dat=0X",dest,rank,flag);
+  //char * ch = (char *) chan;
+  //for(int i=0; i<len; i++) printf("%X", ch[i]);
+ // printf("\n");
+  MPI_Send(chan, len,MPI_CHAR, dest, flag, MPI_COMM_WORLD);
+}
+
+void mpi_receive_chan(void * chan, size_t len, int origin, int flag){
+    MPI_Status status;
+    char * ch = (char *) chan;
+    MPI_Recv(chan, len, MPI_CHAR, origin, flag, MPI_COMM_WORLD, &status);
+    return;
+    /*
+    printf("MPI process received  from rank %d, with tag %d and error code %d.\n",                status.MPI_SOURCE,
+                  status.MPI_TAG,
+                  status.MPI_ERROR);
+    printf("got origin%u, flag=%u\n dat=0X\n",origin,flag);
+
+    for(int i=0; i<len; i++) printf("%X\n",  ch[i]);
+    printf("\n");
+    */
+}
+
+
+void print_static (MEM_STAT_t stat, uint64_t ticks){
+    if (stat.mc_num==-1){
+    std::cout<<"chipset, ";
+    }else{
+    std::cout << stat.mc_num << ", ";
+}
+    std::cout
+     << stat.rank << ", "
+     << stat.dest << ", "
+     << stat.flit_in_num  << ", "
+     << stat.flit_out_num  << ", "
+     << ticks << ", "
+     << ticks/500  << ", " << std::endl;
+}
+
+
+string get_mem_image_full_path (int argc, char **argv){
+	vector<string> args(argv + 1, argv + argc);
+	vector<string>::iterator tail_args = args.end();
+	string path = "./";
+	for(vector<string>::iterator it = args.begin(); it != args.end(); ++it) 
+	{
+	    if(it->find("+mem_image=") == 0) {
+	       path=it->substr(strlen("+mem_image="));
+	      // std::cout << "****************************" << path << "****************";
+	    }   
+	}
+	return path;
+}
+
+
+vector<uint64_t> get_traps (int argc, char **argv,bool type){ 
+    vector<string> args(argv + 1, argv + argc);
+	vector<string>::iterator tail_args = args.end();
+    vector<uint64_t> trap;
+    string st;  
+    std::string trap_str;  
+    for(vector<string>::iterator it = args.begin(); it != args.end(); ++it) 
+	{
+	   for (int i=0; i<32;i++){
+        if (type==GOOD_TRAP) trap_str = "+good_trap" + std::to_string(i) + "=";
+        else trap_str = "+bad_trap" + std::to_string(i) + "=";
+       //std::cout <<  trap_str << std::endl;
+       if(it->find(trap_str) == 0) {
+	       st=it->substr(trap_str.length());
+	        try {
+                    // Convert st to uint64_t and push to the vector
+                    uint64_t trap_value =  std::stoull(st, nullptr, 16);
+                    trap.push_back(trap_value);
+                    //printf("push %lx\n",trap_value);
+                } catch (const std::invalid_argument& e) {
+                    cerr << "Invalid number: " << st << endl;
+                } catch (const std::out_of_range& e) {
+                    cerr << "Number out of range: " << st << endl;
+            }
+	    }   
+       }
+	}
+    return trap; 
+}
+
+HPM_STRING
diff --git a/piton/tools/verilator/metro_mpi.h b/piton/tools/verilator/metro_mpi.h
new file mode 100644
index 00000000..eea4fa23
--- /dev/null
+++ b/piton/tools/verilator/metro_mpi.h
@@ -0,0 +1,155 @@
+#ifndef METRO_MPI_H
+#define METRO_MPI_H
+
+#include <iostream>
+#include <mpi.h>
+#include <vector>
+
+using namespace std;
+
+#define DELAY_MODEL_SYNC_CYCLES  128 
+#define CHACH_ST_SIZ             12
+
+#define CONTINUE 0  // No exit condition
+#define GOOD_EXIT 1 // Good exit condition
+#define BAD_EXIT 2  // Bad exit condition
+
+#define TRAP_INITIAL_CHECK_DELAY  14000  // Initial delay before first trap check
+#define TRAP_CHECK_INTERVAL       2000   // Delay between consecutive trap checks
+
+//#define PITON_LATMODEL_FIX1
+//#define PITON_LATMODEL_FIX160
+const int ALL_NOC      = 1;
+const int PRINT_STAT   = 2;
+const int PRINT_CACHE  = 3;
+const int MEM_LAT      = 4;
+// Compilation flags parameters
+const int PITON_X_TILES = X_TILES;
+const int PITON_Y_TILES = Y_TILES;
+
+typedef struct MEM_STAT {
+  uint64_t flit_in_num;
+  uint64_t flit_out_num;
+  int      rank;
+  int      mc_num;
+  int      dest;
+} MEM_STAT_t;
+
+void initialize();
+int getRank();
+int getSize();
+void finalize();
+unsigned short mpi_receive_finish();
+void mpi_send_finish(unsigned short message, int rank);
+void mpi_send_chan(void * chan, size_t len, int dest, int rank, int flag);
+void mpi_receive_chan(void * chan, size_t len, int origin, int flag);
+void print_static (MEM_STAT_t stat, uint64_t ticks);
+int mpi_check_trap (int);
+string get_mem_image_full_path (int, char **);
+string get_lat_model_full_path (int, char **);
+const bool  GOOD_TRAP=0;
+const bool  BAD_TRAP=1;
+vector<uint64_t>  get_traps (int , char **,bool);
+
+enum {
+  //HPM EVENTS
+  HPM_BRANCH_MISS=0,
+  HPM_IS_BRANCH=1,
+  HPM_BRANCH_TAKEN=2,
+  HPM_EXE_STORE=3,
+  HPM_EXE_LOAD=4,
+  HPM_ICACHE_REQ=5,
+  HPM_ICACHE_KILL=6,
+  HPM_STALL_IF=7,
+  HPM_STALL_ID=8,
+  HPM_STALL_RR=9,
+  HPM_STALL_EXE=10,
+  HPM_STALL_WB=11,
+  HPM_ICACHE_MISS_L2_HIT=12,
+  HPM_ICACHE_MISS_KILL=13,
+  HPM_ICACHE_BUSY=14,
+  HPM_ICACHE_MISS_TIME=15,
+  HPM_LOAD_STORE=16,
+  HPM_DATA_DEPEND=17,
+  HPM_STRUCT_DEPEND=18,
+  HPM_GRAD_LIST_FULL=19,
+  HPM_FREE_LIST_EMPTY=20,
+  HPM_ITLB_ACCESS=21,
+  HPM_ITLB_MISS=22,
+  HPM_DTLB_ACCESS=23,
+  HPM_DTLB_MISS=24,
+  HPM_PTW_BUFFER_HIT=25,
+  HPM_PTW_BUFFER_MISS=26,
+  HPM_ITLB_STALL=27,
+  HPM_DCACHE_STALL=28,
+  HPM_DCACHE_STALL_REFILL=29,
+  HPM_DCACHE_RTAB_ROLLBACK=30,
+  HPM_DCACHE_REQ_ONHOLD=31,
+  HPM_DCACHE_PREFETCH_REQ=32,
+  HPM_DCACHE_READ_REQ=33,
+  HPM_DCACHE_WRITE_REQ=34,
+  HPM_DCACHE_CMO_REQ=35,
+  HPM_DCACHE_UNCACHED_REQ=36,
+  HPM_DCACHE_MISS_READ_REQ=37,
+  HPM_DCACHE_MISS_WRITE_REQ=38,
+  HPM_STALL_IR=39,
+  HPM_L2_MISS=40,
+  HPM_L2_ACCESS=41,
+  HPM_L15_MISS=42,
+  HPM_L15_ACCESS=43,
+  HPM_CNT_NUM = 44
+};
+
+const int HPM_ROW_WIDTH=10; // maximum hpm value sent at once
+const int HPM_ROW_NUM=(HPM_CNT_NUM % HPM_ROW_WIDTH)? (HPM_CNT_NUM/HPM_ROW_WIDTH)+1 : (HPM_CNT_NUM/HPM_ROW_WIDTH);   // maximum hpm lines
+
+#define HPM_STRING \
+const char * hpm_str[HPM_CNT_NUM] = { \
+"branch_miss",\
+"is_branch",\
+"branch_taken",\
+"exe_st",\
+"exe_ld",\
+"icache_req",\
+"icache_kill",\
+"stall_if",\
+"stall_id",\
+"stall_rr",\
+"stall_exe",\
+"stall_wb",\
+"icache_miss_l2_hit",\
+"icache_miss_kill",\
+"icache_busy",\
+"icache_miss_time",\
+"ld_st",\
+"data_depend",\
+"struct_depend",\
+"grad_list_full",\
+"free_list_empty",\
+"itlb_acc",\
+"itlb_miss",\
+"dtlb_acc",\
+"dtlb_miss",\
+"ptw_buf_hit",\
+"ptw_buf_miss",\
+"itlb_stall",\
+"dcache_stall",\
+"dcache_stall_refill",\
+"dcache_rtab_rollback",\
+"dcache_req_onhold",\
+"dcache_prefetch_req",\
+"dcache_rd_req",\
+"dcache_wr_req",\
+"dcache_cmo_req",\
+"dcache_uncached_req",\
+"dcache_miss_rd_req",\
+"dcache_miss_wr_req",\
+"stall_ir",\
+"l2_miss",\
+"l2_acc",\
+"l15_miss",\
+"l15_acc"\
+};
+
+
+#endif
\ No newline at end of file
diff --git a/piton/tools/verilator/mpi_test.cpp b/piton/tools/verilator/mpi_test.cpp
new file mode 100644
index 00000000..9b1a0945
--- /dev/null
+++ b/piton/tools/verilator/mpi_test.cpp
@@ -0,0 +1,103 @@
+/*
+Copyright (c) 2019 Princeton University
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * Neither the name of Princeton University nor the
+      names of its contributors may be used to endorse or promote products
+      derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+#include <iostream>
+#include <iomanip>
+
+const int YUMMY_NOC_1  = 0;
+const int DATA_NOC_1   = 1;
+const int YUMMY_NOC_2  = 2;
+const int DATA_NOC_2   = 3;
+const int YUMMY_NOC_3  = 4;
+const int DATA_NOC_3   = 5;
+const int TEST_FINISH  = 6;
+const int DATA_ALL_NOC = 7;
+
+uint64_t main_time = 0; // Current simulation time
+uint64_t clk = 0;
+int rank, dest, size;
+short test_end=0;
+
+void initialize();
+
+// MPI Yummy functions
+unsigned short mpi_receive_yummy(int origin, int flag);
+
+void mpi_send_yummy(unsigned short message, int dest, int rank, int flag);
+// MPI data&Valid functions
+void mpi_send_data(unsigned long long data, unsigned char valid, int dest, int rank, int flag);
+
+unsigned long long mpi_receive_data(int origin, unsigned short* valid, int flag);
+
+int getRank();
+
+int getSize();
+
+void finalize();
+
+unsigned short mpi_receive_finish();
+
+void mpi_send_finish(unsigned short message, int rank);
+
+typedef struct {
+    unsigned long long data_0;
+    unsigned long long data_1;
+    unsigned long long data_2;
+    unsigned short valid_0;
+    unsigned short valid_1;
+    unsigned short valid_2;
+} mpi_noc_t;
+
+void mpi_send_all_noc(unsigned long long data_0, unsigned char valid_0,
+                      unsigned long long data_1, unsigned char valid_1,
+                      unsigned long long data_2, unsigned char valid_2,
+                      int dest, int rank, int flag);
+
+mpi_noc_t mpi_receive_all_noc(int origin, int flag);
+
+int main(int argc, char **argv, char **env) {
+    std::cout << "Started" << std::endl << std::flush;
+
+    // MPI work 
+    initialize();
+    rank = getRank();
+    size = getSize();
+    std::cout << "size: " << size << ", rank: " << rank <<  std::endl;
+    if (rank==0) {
+        dest = 1;
+        std::cout << "Before sending " << std::endl;
+        mpi_send_all_noc(0,0,0,0,0,0,dest,rank,DATA_ALL_NOC);
+        std::cout << "After sending " << std::endl;
+    } else {
+        dest = 0;
+        std::cout << "Before receving " << std::endl;
+        mpi_noc_t aux = mpi_receive_all_noc(dest,DATA_ALL_NOC);
+        std::cout << aux.valid_0 << std::endl;
+        std::cout << "After Receiving " << std::endl;
+    }
+    finalize();
+    exit(0);
+}
diff --git a/piton/tools/verilator/my_cmp_top.cpp b/piton/tools/verilator/my_cmp_top.cpp
new file mode 100644
index 00000000..eff8792e
--- /dev/null
+++ b/piton/tools/verilator/my_cmp_top.cpp
@@ -0,0 +1,176 @@
+/*
+Copyright (c) 2019 Princeton University
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * Neither the name of Princeton University nor the
+      names of its contributors may be used to endorse or promote products
+      derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+#include "Vcmp_top.h"
+#include "verilated.h"
+#include <iostream>
+#ifdef VERILATOR_VCD
+#include "verilated_vcd_c.h"
+#endif
+#include <iomanip>
+
+uint64_t main_time = 0; // Current simulation time
+uint64_t clk = 0;
+Vcmp_top* top;
+#ifdef VERILATOR_VCD
+VerilatedVcdC* tfp;
+#endif
+// This is a 64-bit integer to reduce wrap over issues and
+// // allow modulus. You can also use a double, if you wish.
+double sc_time_stamp () { // Called by $time in Verilog
+return main_time; // converts to double, to match
+// what SystemC does
+}
+
+void tick() {
+    top->core_ref_clk = !top->core_ref_clk;
+    main_time += 250;
+    top->eval();
+#ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+    top->core_ref_clk = !top->core_ref_clk;
+    main_time += 250;
+    top->eval();
+#ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+}
+
+void reset_and_init() {
+    
+//    fail_flag = 1'b0;
+//    stub_done = 4'b0;
+//    stub_pass = 4'b0;
+
+//    // Clocks initial value
+    top->core_ref_clk = 0;
+
+//    // Resets are held low at start of boot
+    top->sys_rst_n = 0;
+    top->pll_rst_n = 0;
+
+    top->ok_iob = 0;
+
+//    // Mostly DC signals set at start of boot
+//    clk_en = 1'b0;
+    top->pll_bypass = 1; // trin: pll_bypass is a switch in the pll; not reliable
+    top->clk_mux_sel = 0; // selecting ref clock
+//    // rangeA = x10 ? 5'b1 : x5 ? 5'b11110 : x2 ? 5'b10100 : x1 ? 5'b10010 : x20 ? 5'b0 : 5'b1;
+    top->pll_rangea = 1; // 10x ref clock
+//    // pll_rangea = 5'b11110; // 5x ref clock
+//    // pll_rangea = 5'b00000; // 20x ref clock
+    
+//    // JTAG simulation currently not supported here
+//    jtag_modesel = 1'b1;
+//    jtag_datain = 1'b0;
+
+    top->async_mux = 0;
+
+    init_jbus_model_call((char *) "mem.image", 0);
+
+    std::cout << "Before first ticks" << std::endl << std::flush;
+    tick();
+    std::cout << "After very first tick" << std::endl << std::flush;
+//    // Reset PLL for 100 cycles
+//    repeat(100)@(posedge core_ref_clk);
+//    pll_rst_n = 1'b1;
+    for (int i = 0; i < 100; i++) {
+        tick();
+    }
+    top->pll_rst_n = 1;
+
+    std::cout << "Before second ticks" << std::endl << std::flush;
+//    // Wait for PLL lock
+//    wait( pll_lock == 1'b1 );
+    /*while (!top->pll_lock) {
+        tick();
+    }*/
+
+    std::cout << "Before third ticks" << std::endl << std::flush;
+//    // After 10 cycles turn on chip-level clock enable
+//    repeat(10)@(posedge `CHIP_INT_CLK);
+//    clk_en = 1'b1;
+    for (int i = 0; i < 10; i++) {
+        tick();
+    }
+    top->clk_en = 1;
+
+//    // After 100 cycles release reset
+//    repeat(100)@(posedge `CHIP_INT_CLK);
+//    sys_rst_n = 1'b1;
+//    jtag_rst_l = 1'b1;
+    for (int i = 0; i < 100; i++) {
+        tick();
+    }
+    top->sys_rst_n = 1;
+
+//    // Wait for SRAM init, trin: 5000 cycles is about the lowest
+//    repeat(5000)@(posedge `CHIP_INT_CLK);
+    for (int i = 0; i < 5000; i++) {
+        tick();
+    }
+
+//    top->diag_done = 1;
+
+    //top->ciop_fake_iob.ok_iob = 1;
+    top->ok_iob = 1;
+    std::cout << "Reset complete" << std::endl << std::flush;
+}
+
+int main(int argc, char **argv, char **env) {
+std::cout << "Started" << std::endl << std::flush;
+Verilated::commandArgs(argc, argv);
+top = new Vcmp_top;
+std::cout << "Vcmp_top created" << std::endl << std::flush;
+
+#ifdef VERILATOR_VCD
+Verilated::traceEverOn(true);
+tfp = new VerilatedVcdC;
+top->trace (tfp, 99);
+tfp->open ("my_top.vcd");
+
+Verilated::debug(1);
+#endif
+
+reset_and_init();
+
+//top->test_ena = 1;
+
+while (!Verilated::gotFinish()) { tick(); }
+
+std::cout << std::setprecision(10) << sc_time_stamp() << std::endl;
+
+#ifdef VERILATOR_VCD
+std::cout << "Trace done" << std::endl;
+tfp->close();
+#endif
+
+top->final();
+
+delete top;
+exit(0);
+}
diff --git a/piton/tools/verilator/my_metro_chipset.cpp b/piton/tools/verilator/my_metro_chipset.cpp
new file mode 100644
index 00000000..b56cff53
--- /dev/null
+++ b/piton/tools/verilator/my_metro_chipset.cpp
@@ -0,0 +1,504 @@
+/*
+Copyright (c) 2019 Princeton University
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * Neither the name of Princeton University nor the
+      names of its contributors may be used to endorse or promote products
+      derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+#include "Vmetro_chipset.h"
+#include "verilated.h"
+#include <iostream>
+//#define VERILATOR_VCD 0
+
+#ifdef VERILATOR_VCD
+#include "verilated_vcd_c.h"
+#endif
+#include <iomanip>
+
+
+extern "C" void metro_mpi_init_jbus_model_call(const char* str, int oram);
+
+
+#include "mcs_map_info.tmp.h"
+#include "metro_mpi.h"
+
+uint64_t main_time = 0; // Current simulation time
+uint64_t clk = 0;
+Vmetro_chipset* top;
+int mpi_rank, dest, mpi_size;
+short test_end=0;
+short good_end=0;
+short bad_end =0;
+int smart_max=0;
+MEM_STAT_t stat;
+
+
+
+#ifdef PITON_LATMODEL
+    #define NO_REQ  0
+    #define RD_REQ  1
+    #define WR_REQ  2
+    uint64_t clk_cnt=0;   
+    unsigned char  mem_valid_req [DELAY_MODEL_SYNC_CYCLES]={NO_REQ};   
+    uint64_t mem_lat = 150;
+
+    typedef struct {
+        double sum;
+        int count;  
+        uint64_t min;
+        uint64_t max;
+        uint64_t mean;  
+        uint64_t rd_cnt;  
+        uint64_t wr_cnt;   
+    } LATMODEL_t;
+
+    LATMODEL_t lat_st;
+    #define OP_FRQ_MHZ  1500
+    extern "C" void delay_init_call(const char* curve_path, int freq);
+    extern "C" unsigned long long  got_a_write_req_call(unsigned long long accessCycle);
+    extern "C" unsigned long long  got_a_read_req_call(unsigned long long accessCycle);
+    extern "C" double get_Bandwidth_call(void);
+
+#endif
+
+
+#ifdef VERILATOR_VCD
+VerilatedVcdC* tfp;
+#endif
+// This is a 64-bit integer to reduce wrap over issues and
+// // allow modulus. You can also use a double, if you wish.
+double sc_time_stamp () { // Called by $time in Verilog
+return main_time; // converts to double, to match
+// what SystemC does
+}
+
+void tick() {
+    top->core_ref_clk = 1;
+    main_time += 250;
+    top->eval();
+#ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+    top->core_ref_clk = 0;
+    main_time += 250;
+    top->eval();
+#ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+}
+
+
+
+void  mpi_work_opt_chipset(){
+   // good_end|=top->good_end;
+   // bad_end |=top->bad_end;
+   // test_end = test_end or (top->good_end==1 or top->bad_end==1);
+   
+    mpi_send_chan(&top->noc_chanel_out, sizeof(top->noc_chanel_out),  dest, mpi_rank, ALL_NOC);
+    mpi_receive_chan(&top->noc_chanel_in, sizeof(top->noc_chanel_in), dest, ALL_NOC);
+}
+
+
+
+
+
+#ifdef PITON_LATMODEL
+void  mpi_work_latmodel_chipset (){
+    uint64_t index = clk_cnt % DELAY_MODEL_SYNC_CYCLES;  
+    int mc_start_rank = PITON_X_TILES * PITON_Y_TILES +1; 
+    if(index == DELAY_MODEL_SYNC_CYCLES-1 ){ 
+        for (int i=0; i<MCS_NUM; i++){
+            mpi_receive_chan(&mem_valid_req, sizeof(mem_valid_req), mc_start_rank+i, MEM_LAT);
+            for(int k=0; k<DELAY_MODEL_SYNC_CYCLES;k++){
+                if(mem_valid_req[k]==RD_REQ){
+                    mem_lat = got_a_read_req_call (clk_cnt-DELAY_MODEL_SYNC_CYCLES+k);
+                    lat_st.rd_cnt++;                
+                }
+                if(mem_valid_req[k]==WR_REQ){
+                    mem_lat = got_a_write_req_call(clk_cnt-DELAY_MODEL_SYNC_CYCLES+k);
+                    lat_st.wr_cnt++;
+                }
+ 
+#ifdef PITON_LATMODEL_FIX1
+                mem_lat =1;
+#endif 
+
+#ifdef PITON_LATMODEL_FIX160
+                mem_lat =160;
+#endif               
+                
+               // if(mem_valid_req[k]==RD_REQ)  printf("RD=%lu; mem_lat =%lu\n", clk_cnt-DELAY_MODEL_SYNC_CYCLES+k,mem_lat );
+               // if(mem_valid_req[k]==WR_REQ)  printf("WR=%lu;\n", clk_cnt-DELAY_MODEL_SYNC_CYCLES+k);
+            }           
+        }
+        for (int i=0; i<MCS_NUM; i++){//send rd_latency to all memory controllers            
+            mpi_send_chan   (&mem_lat, sizeof(mem_lat),   mc_start_rank+i, mpi_rank, MEM_LAT);
+        }
+        lat_st.count++;
+        lat_st.sum+=mem_lat;
+        if(mem_lat < lat_st.min) lat_st.min=mem_lat;
+        if(mem_lat > lat_st.max) lat_st.max=mem_lat;
+    }   
+}
+#endif
+
+
+void mpi_tick() {
+    top->core_ref_clk = 1;  
+
+    #ifdef PITON_LATMODEL
+        if(top->sys_rst_n == 1) clk_cnt++;
+    #endif  
+
+    top->eval();
+    main_time += 250;
+    
+    #ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+    #endif
+    
+    #ifdef PITON_LATMODEL
+        mpi_work_latmodel_chipset();
+    #endif
+
+    for(int i=0; i<smart_max+2; i++) {
+        top->core_ref_clk = 0;  
+        mpi_work_opt_chipset();
+        top->eval();
+    }
+    
+    main_time += 250;
+    
+    #ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+    #endif
+}
+
+void reset_and_init(std::string mem_image) {
+    
+//    fail_flag = 1'b0;
+//    stub_done = 4'b0;
+//    stub_pass = 4'b0;
+
+//    // Clocks initial value
+    top->core_ref_clk = 0;
+
+//    // Resets are held low at start of boot
+    top->sys_rst_n = 0;
+    top->pll_rst_n = 0;
+
+    top->ok_iob = 0;
+
+//    // Mostly DC signals set at start of boot
+//    clk_en = 1'b0;
+    top->pll_bypass = 1; // trin: pll_bypass is a switch in the pll; not reliable
+    top->clk_mux_sel = 0; // selecting ref clock
+//    // rangeA = x10 ? 5'b1 : x5 ? 5'b11110 : x2 ? 5'b10100 : x1 ? 5'b10010 : x20 ? 5'b0 : 5'b1;
+    top->pll_rangea = 1; // 10x ref clock
+//    // pll_rangea = 5'b11110; // 5x ref clock
+//    // pll_rangea = 5'b00000; // 20x ref clock
+    
+//    // JTAG simulation currently not supported here
+//    jtag_modesel = 1'b1;
+//    jtag_datain = 1'b0;
+
+    top->async_mux = 0;
+
+    test_end=0;
+    good_end=0;
+    bad_end=0;
+
+    metro_mpi_init_jbus_model_call((char *) mem_image.c_str(), 0);
+    
+    //std::cout << "Before first ticks" << std::endl << std::flush;
+    tick();
+    mpi_tick();
+    //std::cout << "After very first tick" << std::endl << std::flush;
+//    // Reset PLL for 100 cycles
+//    repeat(100)@(posedge core_ref_clk);
+//    pll_rst_n = 1'b1;
+    for (int i = 0; i < 100; i++) {
+        tick();
+    }
+    top->pll_rst_n = 1;
+
+    //std::cout << "Before second ticks" << std::endl << std::flush;
+//    // Wait for PLL lock
+//    wait( pll_lock == 1'b1 );
+    //while (!top->pll_lock) {
+    //    tick();
+    //}
+
+    //std::cout << "Before third ticks" << std::endl << std::flush;
+//    // After 10 cycles turn on chip-level clock enable
+//    repeat(10)@(posedge `CHIP_INT_CLK);
+//    clk_en = 1'b1;
+    for (int i = 0; i < 10; i++) {
+        tick();
+    }
+    top->clk_en = 1;
+
+//    // After 100 cycles release reset
+//    repeat(100)@(posedge `CHIP_INT_CLK);
+//    sys_rst_n = 1'b1;
+//    jtag_rst_l = 1'b1;
+    for (int i = 0; i < 100; i++) {
+        tick();
+    }
+    top->sys_rst_n = 1;
+
+//    // Wait for SRAM init, trin: 5000 cycles is about the lowest
+//    repeat(5000)@(posedge `CHIP_INT_CLK);
+    for (int i = 0; i < 5000; i++) {
+        tick();
+    }
+
+//    top->diag_done = 1;
+
+    //top->ciop_fake_iob.ok_iob = 1;
+    top->ok_iob = 1;
+    std::cout << "Reset complete (Chipset)" << std::endl << std::flush;
+}
+
+int main(int argc, char **argv, char **env) {
+    //std::cout << "Started" << std::endl << std::flush;
+    Verilated::commandArgs(argc, argv);
+    
+    //get mem.image path:
+    std::string mem_image = get_mem_image_full_path(argc, argv);
+    #ifdef PITON_LATMODEL
+         std::string lat_model =  get_lat_model_full_path(argc, argv);
+         delay_init_call((char *) lat_model.c_str(), OP_FRQ_MHZ);
+         lat_st.sum=0;
+         lat_st.count=0;  
+         lat_st.min=0xFFFFFFFF;
+         lat_st.max=0;
+         lat_st.mean=0; 
+         lat_st.rd_cnt=0;
+         lat_st.wr_cnt=0;
+         mem_lat = got_a_read_req_call (1);//initial delay
+    #endif
+    
+    top = new Vmetro_chipset;
+    //std::cout << "Vmetro_chipset created" << std::endl << std::flush;
+
+#ifdef VERILATOR_VCD
+    Verilated::traceEverOn(true);
+    tfp = new VerilatedVcdC;
+    top->trace (tfp, 99);
+    tfp->open ("my_metro_chipset.vcd");
+
+    Verilated::debug(1);
+#endif
+
+    // MPI work 
+    initialize();
+    mpi_rank = getRank();
+    mpi_size = getSize();
+    
+    //std::cout << "CHIPSET size: " << mpi_size << ", mpi_rank: " << mpi_rank <<  std::endl;
+    if (mpi_rank==0) {
+        dest = 1;
+    } else {
+        dest = 0;
+    }
+
+
+    reset_and_init(mem_image);
+    smart_max = top->smart_max;
+
+    top->test_ena = 1;
+
+    //bool test_exit = false;
+    uint64_t checkTestEnd=TRAP_INITIAL_CHECK_DELAY;
+    int local_trap=CONTINUE;
+    int global_trap=CONTINUE;
+    while (!Verilated::gotFinish() and global_trap==CONTINUE) { 
+        mpi_tick();
+        //Traps are detected only in tiles. The local trap for chispet is always in continue state
+        if (checkTestEnd==0) {
+            //std::cout << "Checking Finish CHIPSET" << std::endl;
+            //mpi_send_finish(test_end, mpi_rank);
+            global_trap= mpi_check_trap (local_trap);
+            checkTestEnd=TRAP_CHECK_INTERVAL;
+            //test_exit=test_end;
+            //std::cout << "Finishing: " << test_end << std::endl;
+        }
+        else {
+            checkTestEnd--;
+        }
+    }
+
+
+     stat.flit_in_num =top->flit_i_cnts;
+     stat.flit_out_num =top->flit_o_cnts;
+     stat.rank=mpi_rank;
+     stat.mc_num=-1;
+     stat.dest =dest;
+
+    int mc_start_rank = PITON_X_TILES * PITON_Y_TILES +1;
+
+
+    #ifdef PITON_LATMODEL
+    std::cout<<"---------Delay model Stats-------------"<< std::endl; 
+    std::cout<<"Min, Mean, Max, Bandwidth, #rd ,#wr, Ratio, clk, RD_BW, WR_BW, RW_BW "  << std::endl;
+    lat_st.mean=lat_st.sum/lat_st.count; 
+    double bw = get_Bandwidth_call();
+    double Ratio = (lat_st.rd_cnt*100) / (lat_st.wr_cnt + lat_st.rd_cnt);
+    double RD_BW = (lat_st.rd_cnt*64)/(double)((clk_cnt*1000)/OP_FRQ_MHZ);
+    double WR_BW = (lat_st.wr_cnt*64)/(double)((clk_cnt*1000)/OP_FRQ_MHZ);
+    std::cout
+        << lat_st.min  << ", " 
+        << lat_st.mean << ", " 
+        << lat_st.max  << ", " 
+        << bw << ", " 
+        << lat_st.rd_cnt << ", " 
+        << lat_st.wr_cnt << ", " 
+        << Ratio << ", " 
+        << clk_cnt  << ", " 
+        << RD_BW << ", " 
+        << WR_BW << ", " 
+        << RD_BW + WR_BW 
+        << std::endl;
+    std::cout<<"---------Delay model Stats-------------"<< std::endl;     
+    #endif
+
+    std::cout<<"---------Memory Stats-------------"<< std::endl;    
+    std::cout<<"Mem num, MPI Rank, MPI Dest Rank, #flit_in, #flit_out, ticks, cycles "  << std::endl;
+    print_static (stat,sc_time_stamp());
+    for (int i=0; i<MCS_NUM; i++){
+        mpi_receive_chan(&stat, sizeof(stat), mc_start_rank+i, PRINT_STAT);
+        print_static (stat,sc_time_stamp());
+    }
+    std::cout<<"---------Memory Stats-------------"<< std::endl;
+    
+    std::cout<<"---------Cache Stats-------------"<< std::endl;
+    std::cout<<"Tile num, l15_tag_indx, l15_dat_indx, l2_tag_indx, l2_dat_indx, l2_access, l2_miss, avg_lat"  << std::endl;
+    unsigned int cache_st [CHACH_ST_SIZ];
+    for (int i=1; i<mc_start_rank; i++){
+        mpi_receive_chan(&cache_st, sizeof(cache_st), i, PRINT_CACHE);
+        std::cout << i-1;
+        for(int i=0; i<8; i+=2){
+        	float p = (((float) cache_st[i])  / (float)cache_st[i+1])*100;
+         	printf (", %.2f",p);
+        }
+        printf (", %u, %u",cache_st[8], cache_st[9]);
+        printf (", %u",(cache_st[10] / cache_st[11]));
+        std::cout << std::endl;
+    }
+    std::cout<<"---------Cache Stats-------------"<< std::endl;
+
+    std::cout<<"---------Flit Stats-------------"<< std::endl;
+    std::cout<<"Tile num, NoC1_out, NoC2_out, NoC3_out, NoC1_in, NoC2_in, NoC3_in"  << std::endl;
+    uint64_t flit_st [6];
+    for (int i=1; i<mc_start_rank; i++){
+        mpi_receive_chan(&flit_st, sizeof(flit_st), i, PRINT_CACHE+1);
+        std::cout << i-1;
+        for(int j=0; j<6; j++){        	
+         	printf (", %lu",flit_st [j]);
+        }
+        std::cout << std::endl;
+    }
+    std::cout<<"---------Flit Stats-------------"<< std::endl;
+
+    std::cout<<"---------Packet Stats-------------"<< std::endl;
+    #define MAX_PCK_SIZ 12
+
+    
+            
+    uint64_t pck_st  [6][MAX_PCK_SIZ];
+    uint64_t pck_st_sum  [6][MAX_PCK_SIZ];
+    char pck_st_print_en  [MAX_PCK_SIZ]={0};
+    for(int j=0; j<6; j++){ for(int k=0;k<MAX_PCK_SIZ;k++){ pck_st_sum [j][k] = 0; pck_st_print_en[k]=0;}};
+
+    const char* names [6] ={"NoC1_out", "NoC2_out", "NoC3_out", "NoC1_in" , "NoC2_in", "NoC3_in"};
+    for (int i=1; i<mc_start_rank; i++){
+        mpi_receive_chan(&pck_st, sizeof(pck_st), i, PRINT_CACHE+2);
+        for(int j=0; j<6; j++){  
+            //std::cout << i-1;  
+            //printf (", %s", names[j]);   	
+            for(int k=0;k<MAX_PCK_SIZ;k++){
+                //printf (", %lu",pck_st [j][k]);
+                pck_st_sum [j][k]+=pck_st [j][k];
+                if(pck_st [j][k]>0) pck_st_print_en[k] =1;
+            }
+           // std::cout << std::endl;
+        }        
+    }
+
+    printf("NoC name"); 
+    for(int k=0;k<MAX_PCK_SIZ;k++)  if(pck_st_print_en[k]) printf (",%u-flit",k+1);
+    std::cout << std::endl;
+
+    for(int j=0; j<6; j++){              
+            printf ("%s", names[j]);   	
+            for(int k=0;k<MAX_PCK_SIZ;k++){
+                if(pck_st_print_en[k]) printf (", %lu",pck_st_sum [j][k]);                
+            }
+            std::cout << std::endl;
+    }
+    std::cout<<"---------Packet Stats-------------"<< std::endl;
+
+
+    unsigned int hpm_st [HPM_ROW_WIDTH];
+    extern const char * hpm_str[HPM_CNT_NUM];
+    for(int r=0; r<HPM_ROW_NUM; r++){
+        std::cout<<"---------HPM Stats "<< r << "-------------"<< std::endl;    
+        std::cout<<"Tile num";        
+
+        for(int i=0; i<HPM_ROW_WIDTH; i++) if(i+r*HPM_ROW_WIDTH<HPM_CNT_NUM) printf (",%s", hpm_str[i+r*HPM_ROW_WIDTH]);   	
+        std::cout << std::endl;
+
+        for (int c=1; c<mc_start_rank; c++){
+            mpi_receive_chan(&hpm_st, sizeof(hpm_st), c, PRINT_CACHE+3);
+            std::cout << c-1;
+            for(int i=0; i<HPM_ROW_WIDTH; i++){
+               if(i+r*HPM_ROW_WIDTH<HPM_CNT_NUM) printf (", %u",hpm_st[i]);
+            }
+            std::cout << std::endl;
+        }
+
+        
+        std::cout<<"---------HPM Stats "<< r << "-------------"<< std::endl;  
+    }//hpm rows
+
+
+    if (global_trap==GOOD_EXIT){
+    	 std::cout << "Status: good end (Passed!)"   << std::endl;
+    }else if  (global_trap==BAD_EXIT){
+    	 std::cout << "Status: bad end (Failed!)"    << std::endl;
+    
+    }else{//The program shouldnt come here at all
+    	 std::cout << "Status: none of good nor bad ends happened (Failed!) "    << std::endl;
+    }
+    
+
+    #ifdef VERILATOR_VCD
+    std::cout << "Trace done" << std::endl;
+    tfp->close();
+    #endif
+
+    finalize();
+
+    delete top;
+    exit(0);
+}
diff --git a/piton/tools/verilator/my_metro_fake_mem.cpp b/piton/tools/verilator/my_metro_fake_mem.cpp
new file mode 100644
index 00000000..d29d51d8
--- /dev/null
+++ b/piton/tools/verilator/my_metro_fake_mem.cpp
@@ -0,0 +1,278 @@
+/*
+Copyright (c) 2019 Princeton University
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * Neither the name of Princeton University nor the
+      names of its contributors may be used to endorse or promote products
+      derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+#include "Vmetro_fake_mem.h"
+#include "verilated.h"
+#include <iostream>
+//#define VERILATOR_VCD 0
+
+#ifdef VERILATOR_VCD
+#include "verilated_vcd_c.h"
+#endif
+#include <iomanip>
+
+#include "mcs_map_info.tmp.h"
+#include "metro_mpi.h"
+
+extern "C" void metro_mpi_init_jbus_model_call(const char *str, int oram);
+
+
+uint64_t main_time = 0; // Current simulation time
+uint64_t clk = 0;
+Vmetro_fake_mem* top;
+int mpi_rank, dest, mpi_size;
+short test_end=0;
+int smart_max=0;
+
+#ifdef PITON_LATMODEL
+    #define NO_REQ  0
+    #define RD_REQ  1
+    #define WR_REQ  2
+    uint64_t clk_cnt=0;   
+    unsigned char  mem_valid_req [DELAY_MODEL_SYNC_CYCLES]={NO_REQ};   
+    uint64_t mem_lat = 150;
+#endif
+
+MEM_STAT_t stat;
+
+
+
+
+
+#ifdef VERILATOR_VCD
+VerilatedVcdC* tfp;
+#endif
+// This is a 64-bit integer to reduce wrap over issues and
+// // allow modulus. You can also use a double, if you wish.
+double sc_time_stamp () { // Called by $time in Verilog
+return main_time; // converts to double, to match
+// what SystemC does
+}
+
+void tick() {
+    top->core_ref_clk = 1;
+    main_time += 250;
+    top->eval();
+#ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+    top->core_ref_clk = 0;
+    main_time += 250;
+    top->eval();
+#ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+}
+
+
+
+void  mpi_work_opt_fake_mem(){
+    //test_end = test_end or (top->good_end==1 or top->bad_end==1);
+    
+    mpi_send_chan(&top->noc_chanel_out, sizeof(top->noc_chanel_out),  dest, mpi_rank, ALL_NOC);
+    mpi_receive_chan(&top->noc_chanel_in, sizeof(top->noc_chanel_in), dest, ALL_NOC);
+}
+#ifdef PITON_LATMODEL
+
+void  mpi_work_on_latmodel (){
+    uint64_t index = clk_cnt % DELAY_MODEL_SYNC_CYCLES;
+        
+    mem_valid_req[index] = 
+        (top->got_rd & 0x1== 0x1) ? RD_REQ :
+        (top->got_wr & 0x1== 0x1) ? WR_REQ :
+        NO_REQ;
+    if(index == DELAY_MODEL_SYNC_CYCLES-1 ){//send rd/wr info in each DELAY_MODEL_SYNC_CYCLES cycle 
+        mpi_send_chan   (&mem_valid_req, sizeof(mem_valid_req),  0, mpi_rank, MEM_LAT);
+        mpi_receive_chan(&mem_lat, sizeof(mem_lat), 0, MEM_LAT);
+        top->rd_lat_in = mem_lat;
+        //printf("mem_lat=%lu\n;",mem_lat);
+    }    
+}
+#endif
+
+int get_rank_fromXY(int x, int y) {
+    return 1 + ((x)+((PRONOC_T1)*y));
+}
+
+
+void mpi_tick() {
+    top->core_ref_clk = 1;    
+
+    #ifdef PITON_LATMODEL
+        if(top->sys_rst_n == 1) clk_cnt++;
+    #endif  
+    top->eval();
+    main_time += 250;
+    
+    #ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+    #endif
+    
+    #ifdef PITON_LATMODEL
+       mpi_work_on_latmodel();
+    #endif
+    
+    for(int i=0; i<smart_max+2; i++) {
+        top->core_ref_clk = 0;  
+        mpi_work_opt_fake_mem();
+        top->eval();
+    }
+    
+    main_time += 250;
+    
+    #ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+    #endif 
+}
+
+void reset_and_init(std::string mem_image) {
+    
+
+    top->core_ref_clk = 0;
+
+    metro_mpi_init_jbus_model_call((char *) mem_image.c_str(), 0);
+
+    //std::cout << "Before first ticks" << std::endl << std::flush;
+    tick();
+    mpi_tick();
+  
+    for (int i = 0; i < 100; i++) {
+        tick();
+    }
+   // top->pll_rst_n = 1;
+
+   
+    for (int i = 0; i < 10; i++) {
+        tick();
+    }
+   // top->clk_en = 1;
+
+//    // After 100 cycles release reset
+
+    for (int i = 0; i < 100; i++) {
+        tick();
+    }
+    top->sys_rst_n = 1;
+
+//    // Wait for SRAM init, trin: 5000 cycles is about the lowest
+//    repeat(5000)@(posedge `CHIP_INT_CLK);
+    for (int i = 0; i < 5000; i++) {
+        tick();
+    }
+
+
+    std::cout << "Reset complete (fake_mem)" << std::endl << std::flush;
+}
+
+int main(int argc, char **argv, char **env) {
+    //std::cout << "Started" << std::endl << std::flush;
+    Verilated::commandArgs(argc, argv);
+     //get mem.image path:
+    std::string mem_image = get_mem_image_full_path(argc, argv);
+    top = new Vmetro_fake_mem;
+    //std::cout << "Vmetro_fake_mem created" << std::endl << std::flush;
+
+#ifdef VERILATOR_VCD
+    Verilated::traceEverOn(true);
+    tfp = new VerilatedVcdC;
+    top->trace (tfp, 99);
+    tfp->open ("my_metro_fake_mem.vcd");
+
+    Verilated::debug(1);
+#endif
+
+    // MPI work 
+    initialize();
+    mpi_rank = getRank();
+    mpi_size = getSize();
+    
+    //printf("*************rank=%d\n",rank);
+    
+    //MC RANK starts with 1+ piton_x*piton_y
+    int mc_start_rank = PRONOC_T1 * PRONOC_T2 +1;
+    int mc_num = mpi_rank - mc_start_rank;
+    if(mc_num >= MCS_NUM && MCS_NUM> 0){
+    	printf("Error: invalid rank (%d) for fake mem. It mapped to mc (%d) while the number of MC are %d\n",mpi_rank,mc_num,MCS_NUM);
+    	exit(1);
+    }
+    //printf("*************mc_num=%d\n",mc_num);
+    dest =get_rank_fromXY(mc_map[mc_num].x , mc_map[mc_num].y);
+    // printf("*************dest=%d\n",dest);
+    //std::cout << "fake_mem size: " << mpi_size << ", mpi_rank: " << mpi_rank <<  std::endl;
+    
+
+
+    reset_and_init(mem_image);
+    smart_max = top->smart_max;
+
+    top->default_chipid = 0;
+    top->default_coreid_x =  mc_map[mc_num].x;   //tile_x;
+    top->default_coreid_y =  mc_map[mc_num].y;
+    top->flat_tileid =  mc_map[mc_num].id;              
+    #ifdef PITON_LATMODEL
+    top->rd_lat_in = mem_lat;
+    #endif
+   
+    //bool test_exit = false;
+    uint64_t checkTestEnd=TRAP_INITIAL_CHECK_DELAY;
+    int local_trap=CONTINUE;
+    int global_trap=CONTINUE;
+    while (!Verilated::gotFinish() and global_trap==CONTINUE) { 
+        mpi_tick();
+        //Traps are detected only in tiles. The local trap for fake memory is always in continue state
+        if (checkTestEnd==0) {
+            //std::cout << "Checking Finish fake_mem" << std::endl;
+            //test_exit= mpi_receive_finish();
+            checkTestEnd=TRAP_CHECK_INTERVAL;
+            global_trap= mpi_check_trap (local_trap);
+            //std::cout << "Finishing: " << test_end << std::endl;
+        }
+        else {
+            checkTestEnd--;
+        }
+    }
+
+     stat.flit_in_num =top->flit_i_cnts;
+     stat.flit_out_num =top->flit_o_cnts;
+     stat.rank=mpi_rank;
+     stat.mc_num=mc_num;
+     stat.dest =dest;
+
+     mpi_send_chan(&stat, sizeof(stat),  0, mpi_rank, PRINT_STAT);
+
+
+  
+
+    #ifdef VERILATOR_VCD
+    std::cout << "Trace done" << std::endl;
+    tfp->close();
+    #endif
+
+    finalize();
+
+    delete top;
+    exit(0);
+}
diff --git a/piton/tools/verilator/my_metro_tile.cpp b/piton/tools/verilator/my_metro_tile.cpp
new file mode 100644
index 00000000..5e12e9cf
--- /dev/null
+++ b/piton/tools/verilator/my_metro_tile.cpp
@@ -0,0 +1,430 @@
+/*
+Copyright (c) 2019 Princeton University
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * Neither the name of Princeton University nor the
+      names of its contributors may be used to endorse or promote products
+      derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+#include "Vmetro_tile.h"
+#include "verilated.h"
+#include <iostream>
+
+#include "mcs_map_info.tmp.h"
+#include "metro_mpi.h"
+
+//#define VERILATOR_VCD 0
+
+//#define KONATA_EN
+
+//#define REPORT_RANKS
+
+
+#ifdef VERILATOR_VCD
+#include "verilated_vcd_c.h"
+#endif
+#include <iomanip>
+
+#ifdef KONATA_EN
+#include "dpi_konata.h"
+#endif
+
+
+
+uint64_t main_time = 0; // Current simulation time
+uint64_t clk = 0;
+Vmetro_tile* top;
+int mpi_rank, dest, mpi_size;
+int rankN, rankS, rankW, rankE;
+int tile_x, tile_y;//, PITON_X_TILES, PITON_Y_TILES;
+int smart_max=0;
+
+
+
+
+#define RANK_NUM 4
+int MY_RANK [RANK_NUM];
+
+#define EAST       0
+#define NORTH      1
+#define WEST       2
+#define SOUTH      3
+
+
+#ifdef VERILATOR_VCD
+VerilatedVcdC* tfp;
+#endif
+// This is a 64-bit integer to reduce wrap over issues and
+// // allow modulus. You can also use a double, if you wish.
+double sc_time_stamp () { // Called by $time in Verilog
+    return main_time; // converts to double, to match
+    // what SystemC does
+}
+
+int get_rank_fromXY(int x, int y) {
+    return 1 + ((x)+((PRONOC_T1)*y));
+}
+
+// MPI ID funcitons
+int getDimX () {
+    if (mpi_rank==0) // Should never happen
+        return 0;
+    else
+        return (mpi_rank-1)%PRONOC_T1;
+}
+
+int getDimY () {
+    if (mpi_rank==0) // Should never happen
+        return 0;
+    else
+        return (mpi_rank-1)/PRONOC_T1;
+}
+
+int get_edge_rank (int port) {
+
+	int m;
+	for (m=0;m< MCS_NUM; m++){
+		if(mc_map[m].x==tile_x && mc_map[m].y == tile_y && mc_map[m].p == port) return (m + 1 + (PRONOC_T1*PRONOC_T2));
+	}
+	return -1;
+}
+
+
+int getRankN () {
+    if (tile_y == 0)
+    	return get_edge_rank(PITON_PORT_N); 
+       // return -1;
+    else
+        return get_rank_fromXY(tile_x, tile_y-1);
+}
+
+int getRankS () {
+    if (tile_y+1 == PRONOC_T2)
+       return get_edge_rank(PITON_PORT_S); 
+       // return -1;
+    else
+        return get_rank_fromXY(tile_x, tile_y+1);
+}
+
+int getRankE () {
+    if (tile_x+1 == PRONOC_T1)
+        return get_edge_rank(PITON_PORT_E); 
+       // return -1;
+    else
+        return get_rank_fromXY(tile_x+1, tile_y);
+}
+
+int getRankW () {
+    if (mpi_rank==1) { // go to chipset
+        return 0;
+    }
+    else if (tile_x == 0) {
+       return get_edge_rank(PITON_PORT_W); 
+       // return -1;
+    }
+    else {
+        return get_rank_fromXY(tile_x-1, tile_y);
+    }
+}
+
+void tick() {
+    top->core_ref_clk =1;
+    main_time += 250;
+    top->eval();
+#ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+    top->core_ref_clk = 0;
+    main_time += 250;
+    top->eval();
+#ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+}
+
+
+
+void mpi_work_opt() {
+    int i;
+
+    for (i=0;i<RANK_NUM;i++){
+        if (MY_RANK[i] != -1)  mpi_send_chan(&top->noc_chanel_out[i], sizeof(top->noc_chanel_out[i]), MY_RANK[i], mpi_rank, ALL_NOC);
+        if (MY_RANK[i] != -1)  mpi_receive_chan(&top->noc_chanel_in[i], sizeof(top->noc_chanel_in[i]), MY_RANK[i], ALL_NOC);
+    }
+   
+}
+
+
+
+void mpi_tick() {
+   
+    top->core_ref_clk = 1;   
+    top->eval();
+    main_time += 250;
+     
+ #ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+  
+  
+    for(int i=0; i<smart_max+2; i++) {  
+        top->core_ref_clk = 0;
+        mpi_work_opt();
+        top->eval();
+    }
+    
+     main_time += 250;
+    
+#ifdef VERILATOR_VCD
+    tfp->dump(main_time);
+#endif
+   
+    
+
+}
+
+void reset_and_init() {
+// Clocks initial value
+    top->core_ref_clk = 0;
+
+// Resets are held low at start of boot
+    top->sys_rst_n = 0;
+    top->pll_rst_n = 0;
+    top->ok_iob = 0;
+
+// Mostly DC signals set at start of boot
+
+    top->pll_bypass = 1; // trin: pll_bypass is a switch in the pll; not reliable
+    top->clk_mux_sel = 0; // selecting ref clock
+    top->pll_rangea = 1; // 10x ref clock
+    top->async_mux = 0;
+    tick();
+    mpi_tick();
+
+    for (int i = 0; i < 100; i++) {
+        tick();
+    }
+    top->pll_rst_n = 1;
+
+
+    for (int i = 0; i < 10; i++) {
+        tick();
+    }
+    top->clk_en = 1;
+
+
+    for (int i = 0; i < 100; i++) {
+        tick();
+    }
+
+    top->sys_rst_n = 1;
+
+
+    for (int i = 0; i < 5000; i++) {
+        tick();
+    }
+
+    top->ok_iob = 1;
+
+}
+
+vector<uint64_t> good_traps;
+vector<uint64_t> bad_traps;
+
+int check_trap (){   
+    if(top->inst_done == 0) return CONTINUE;
+    // Iterate using range-based for loop (for-each loop)
+    for (const uint64_t &trap_value : bad_traps) {
+       if (top->phy_pc_w == trap_value) return   BAD_EXIT ;
+    }
+    // Iterate using range-based for loop (for-each loop)
+    for (const uint64_t &trap_value : good_traps) {
+        if (top->phy_pc_w == trap_value) return   GOOD_EXIT; 
+    }
+    return CONTINUE;
+}
+
+int main(int argc, char **argv, char **env) {
+    //std::cout << "Started" << std::endl << std::flush;
+    Verilated::commandArgs(argc, argv);
+
+    top = new Vmetro_tile;
+    //std::cout << "Vmetro_tile created" << std::endl << std::flush;
+
+   
+    
+
+    // MPI work 
+    initialize();
+    mpi_rank = getRank();
+    mpi_size = getSize();
+    
+    
+    //std::cout << "Vmetro_tile MPI created" << std::endl << std::flush;
+#ifdef KONATA_EN
+    konata_signature_init();
+    konata_signature->clear_output();
+#endif
+
+#ifdef VERILATOR_VCD
+    Verilated::traceEverOn(true);
+    tfp = new VerilatedVcdC;
+    top->trace (tfp, 99);
+    std::cout << "dunno why we entered" << std::endl << std::flush;
+    std::string tracename ("my_metro_tile"+std::to_string(mpi_rank)+".vcd");
+    const char *cstr = tracename.c_str();
+    tfp->open(cstr);
+    Verilated::debug(1);
+#endif
+    
+    if (mpi_rank==0) {
+        dest = 1;
+    } else {
+        dest = 0;
+    }
+ 
+
+    tile_x = getDimX();
+    tile_y = getDimY();
+    rankN  = getRankN();
+    rankS  = getRankS();
+    rankW  = getRankW();
+    rankE  = getRankE();
+
+
+    MY_RANK[NORTH] = rankN;
+    MY_RANK[EAST]  = rankE;
+    MY_RANK[WEST]  = rankW;
+    MY_RANK[SOUTH] = rankS;
+
+    #ifdef REPORT_RANKS
+	printf("** RANK(%d): N:%d E:%d W:%d S:%d\n",mpi_rank, rankN, rankE, rankW, rankS);
+    #endif
+    
+    //std::cout << "Vmetro_tile MPI middle" << std::endl << std::flush;
+
+    #ifdef VERILATOR_VCD
+    std::cout << "TILE size: " << mpi_size << ", rank: " << mpi_rank <<  std::endl;
+    std::cout << "tile_y: " << tile_y << std::endl;
+    std::cout << "tile_x: " << tile_x << std::endl;
+    std::cout << "rankN: " << rankN << std::endl;
+    std::cout << "rankS: " << rankS << std::endl;
+    std::cout << "rankW: " << rankW << std::endl;
+    std::cout << "rankE: " << rankE << std::endl;
+    #endif
+
+     
+ 
+
+    top->default_chipid = 0;
+    top->current_r_id = mpi_rank-1;
+    
+    int first_tile_id = (mpi_rank-1) * PRONOC_T3;
+    for (int l=0; l<PRONOC_T3; l++ ){
+        int current_tile_id = first_tile_id+l;
+        top->default_coreid_x[l] =  current_tile_id % PITON_X_TILES;   //tile_x;
+        top->default_coreid_y[l] =  current_tile_id / PITON_X_TILES;
+        top->flat_tileid[l] = current_tile_id;        
+        top->cpu_enable[l] = (current_tile_id < PITON_X_TILES * PITON_Y_TILES) ? 1 : 0;
+    }
+    //cpu_enable
+    //std::cout << "Vmetro_tile MPI before reset" << std::endl << std::flush;
+
+    reset_and_init();
+    
+    smart_max = top->smart_max;
+    
+    if (mpi_rank==1) std::cout << "smart_max=" << smart_max << std::endl << std::flush;
+    
+    good_traps =  get_traps (argc, argv,GOOD_TRAP);
+    bad_traps =  get_traps (argc, argv,BAD_TRAP);
+
+
+
+    //std::cout << "Vmetro_tile MPI after reset" << std::endl << std::flush;
+
+    //bool test_exit = false;
+    uint64_t checkTestEnd=TRAP_INITIAL_CHECK_DELAY;
+    int local_trap=CONTINUE;
+    int global_trap=CONTINUE;
+    while (!Verilated::gotFinish() and global_trap==CONTINUE) { 
+      
+        mpi_tick();
+        int temp = check_trap ();
+        if(local_trap < temp) local_trap = temp ;//keep the max trap conditions
+        
+        if (checkTestEnd==0) {
+            //std::cout << "Checking Finish TILE" << std::endl;
+            //if(local_trap==BAD_EXIT) std::cout << "HIT BAD TRAP!" << std::endl << std::flush;
+            //if(local_trap==GOOD_EXIT) std::cout << "HIT GOOD TRAP!" << std::endl << std::flush;
+            //test_exit= mpi_receive_finish();
+            global_trap= mpi_check_trap (local_trap);
+            checkTestEnd=TRAP_CHECK_INTERVAL;
+            //std::cout << "Finishing: " << test_exit << std::endl;
+            //std::cout << "." << std::flush;
+        }
+        else {
+            checkTestEnd--;
+        }
+    }
+    unsigned int cache_st [CHACH_ST_SIZ];
+    for(int i=0; i<CHACH_ST_SIZ; i++) cache_st[i] = top->cache_st[i];
+
+    
+
+    #define MAX_PCK_SIZ 12
+    uint64_t flit_st [6];
+    uint64_t pck_st  [6][MAX_PCK_SIZ];
+    for(int i=0; i<6; i++) {
+        flit_st[i] = top->flit_st[i];
+        for(int j=0; j<MAX_PCK_SIZ; j++) pck_st  [i][j] =top-> pck_st[i][j];
+    }
+
+    mpi_send_chan(&cache_st, sizeof(cache_st),  0, mpi_rank, PRINT_CACHE);
+    mpi_send_chan(&flit_st,  sizeof(flit_st),   0, mpi_rank, PRINT_CACHE+1);
+    mpi_send_chan(&pck_st ,  sizeof( pck_st),   0, mpi_rank, PRINT_CACHE+2);
+
+    unsigned int hpm_st [HPM_ROW_WIDTH];
+    for(int r=0; r<HPM_ROW_NUM; r++){
+         // fill a row
+         for(int i=0; i<HPM_ROW_WIDTH; i++){
+                if(i+r*HPM_ROW_WIDTH<HPM_CNT_NUM)hpm_st[i] = top->hpm_st[i+r*HPM_ROW_WIDTH];
+                else hpm_st[i] = 0;
+         }
+         //send a row
+         mpi_send_chan(&hpm_st ,  sizeof(hpm_st),   0, mpi_rank, PRINT_CACHE+3);
+    }
+   
+    
+
+  //  std::cout << "ticks: " << std::setprecision(10) << sc_time_stamp() << " , cycles: " << sc_time_stamp()/500 << std::endl;
+
+    #ifdef VERILATOR_VCD
+    std::cout << "Trace done" << std::endl;
+    tfp->close();
+    #endif
+
+    finalize();
+    top->final();
+
+    delete top;
+    exit(0);
+}
diff --git a/piton/tools/verilator/my_top.cpp b/piton/tools/verilator/my_top.cpp
index 416fd6d4..42e7ed73 100644
--- a/piton/tools/verilator/my_top.cpp
+++ b/piton/tools/verilator/my_top.cpp
@@ -45,6 +45,8 @@ VerilatedVcdC* tfp;
 VerilatedFstC* tfp;
 #endif
 
+extern "C" void metro_mpi_init_jbus_model_call(const char *str, int oram);
+
 // This is a 64-bit integer to reduce wrap over issues and
 // // allow modulus. You can also use a double, if you wish.
 double sc_time_stamp () { // Called by $time in Verilog
diff --git a/piton/verif/diag/c/riscv/ariane/hello_world_many.c b/piton/verif/diag/c/riscv/ariane/hello_world_many.c
index 278a7229..1c3af491 100644
--- a/piton/verif/diag/c/riscv/ariane/hello_world_many.c
+++ b/piton/verif/diag/c/riscv/ariane/hello_world_many.c
@@ -32,5 +32,8 @@ int main(int argc, char** argv) {
   // increment atomic counter
   ATOMIC_OP(amo_cnt, 1, add, w);
 
+   
+  
+
   return 0;
-}
\ No newline at end of file
+}
diff --git a/piton/verif/env/common/fake_mem_ctrl.flist b/piton/verif/env/common/fake_mem_ctrl.flist
index 55f17130..17a87784 100644
--- a/piton/verif/env/common/fake_mem_ctrl.flist
+++ b/piton/verif/env/common/fake_mem_ctrl.flist
@@ -24,3 +24,5 @@
 // SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 fake_mem_ctrl.v
+hbm_delay_pck.sv
+hbm_delay.sv
diff --git a/piton/verif/env/common/fake_mem_ctrl.v b/piton/verif/env/common/fake_mem_ctrl.v
index 06f36749..d199aa47 100644
--- a/piton/verif/env/common/fake_mem_ctrl.v
+++ b/piton/verif/env/common/fake_mem_ctrl.v
@@ -43,20 +43,25 @@
 
 `define MEM_ADDR_WIDTH      64
 
-module fake_mem_ctrl(
-
+module fake_mem_ctrl #(
+	parameter HMB_CHAN_NUM=0
+)(
+
+`ifdef PITON_LAT_FILE
+`ifdef METRO_CHIPSET
+`ifdef PITON_EXTRA_MEMS
+    input [31 : 0] rd_lat_in,
+`endif
+`endif
+`endif
     input wire clk,
     input wire rst_n,
-
     input wire noc_valid_in,
     input wire [`PITON_NOC2_WIDTH-1:0] noc_data_in,
     output reg noc_ready_in,
-
-
-    output reg noc_valid_out,
+    output  noc_valid_out,
     output  [`PITON_NOC3_WIDTH-1:0] noc_data_out,
     input wire noc_ready_out
-
 );
 localparam 
     //each word is 64 bit 
@@ -64,6 +69,13 @@ localparam
     NOC3_WORD_NUM = `PITON_NOC3_WIDTH/`NOC_DATA_WIDTH;
 
 
+
+ reg noc_valid_out_tmp;
+ wire [`PITON_NOC3_WIDTH-1:0] noc_data_out_tmp;
+ wire noc_ready_out_tmp;
+
+
+
 reg mem_valid_in;
 reg [3*`NOC_DATA_WIDTH-1:0] mem_header_in;
 reg mem_ready_in;
@@ -197,6 +209,7 @@ wire [`NOC_DATA_WIDTH*3-1:0] msg_send_header;
 
 
 
+reg [`PHY_ADDR_WIDTH-1:0] msg_addr_o,msg_addr_o_next;
 
 l2_decoder decoder(
     .msg_header         (mem_header_in),
@@ -571,6 +584,13 @@ begin
 end
 
 l2_encoder encoder(
+
+`ifdef PITON_EXTRA_MEMS
+    .chipid                 ({`NOC_CHIPID_WIDTH{1'b0}}),
+    .coreid_x               ({`NOC_X_WIDTH{1'b0}}),
+    .coreid_y               ({`NOC_Y_WIDTH{1'b0}}),
+`endif
+
     .msg_dst_chipid             (msg_src_chipid),
     .msg_dst_x                  (msg_src_x),
     .msg_dst_y                  (msg_src_y),
@@ -608,12 +628,12 @@ reg [3:0] buf_out_rd_ptr_next;
 
 generate
 for (i=0;i<NOC3_WORD_NUM;i=i+1) begin : N3_
-    assign noc_data_out [(i+1)*`NOC_DATA_WIDTH-1: i*`NOC_DATA_WIDTH] =(buf_out_rd_ptr_f+i<9)? buf_out_mem_f[buf_out_rd_ptr_f+i] :`NOC_DATA_WIDTH'd0 ;
+    assign noc_data_out_tmp [(i+1)*`NOC_DATA_WIDTH-1: i*`NOC_DATA_WIDTH] =(buf_out_rd_ptr_f+i<9)? buf_out_mem_f[buf_out_rd_ptr_f+i] :`NOC_DATA_WIDTH'd0 ;
 end
 endgenerate
 always @ *
 begin
-    noc_valid_out = (buf_out_counter_f != 0);
+    noc_valid_out_tmp = (buf_out_counter_f != 0);
 end
 
 always @ *
@@ -624,7 +644,7 @@ end
 
 always @ *
 begin
-    if (noc_valid_out && noc_ready_out)
+    if (noc_valid_out_tmp && noc_ready_out_tmp)
     begin
         buf_out_counter_next = (buf_out_counter_f > NOC3_WORD_NUM) ? buf_out_counter_f - NOC3_WORD_NUM : 0;
     end
@@ -657,7 +677,7 @@ begin
     begin
         buf_out_rd_ptr_next = 0;
     end
-    else if (noc_valid_out && noc_ready_out)
+    else if (noc_valid_out_tmp && noc_ready_out_tmp)
     begin
         buf_out_rd_ptr_next = buf_out_rd_ptr_f + NOC3_WORD_NUM;
     end
@@ -694,6 +714,7 @@ begin
         buf_out_mem_next[6] = msg_send_data[5];
         buf_out_mem_next[7] = msg_send_data[6];
         buf_out_mem_next[8] = msg_send_data[7];
+	msg_addr_o_next= msg_addr;
     end
     else
     begin
@@ -706,6 +727,7 @@ begin
         buf_out_mem_next[6] = buf_out_mem_f[6];
         buf_out_mem_next[7] = buf_out_mem_f[7];
         buf_out_mem_next[8] = buf_out_mem_f[8];
+        msg_addr_o_next = msg_addr_o;
     end
 end
 
@@ -722,6 +744,7 @@ begin
         buf_out_mem_f[6] <= 0;
         buf_out_mem_f[7] <= 0;
         buf_out_mem_f[8] <= 0;
+        msg_addr_o <= {`PHY_ADDR_WIDTH{1'b0}};
     end
     else
     begin
@@ -734,22 +757,23 @@ begin
         buf_out_mem_f[6] <= buf_out_mem_next[6];
         buf_out_mem_f[7] <= buf_out_mem_next[7];
         buf_out_mem_f[8] <= buf_out_mem_next[8];
+        msg_addr_o <= msg_addr_o_next;
     end
 end
 
 
 always @ *
 begin
-    noc_valid_out = (buf_out_counter_f != 0);
+    noc_valid_out_tmp = (buf_out_counter_f != 0);
 end
 
 /*
 always @ *
 begin
     // Tri: another quick fix for x
-    noc_data_out = 0;
+    noc_data_out_tmp = 0;
     if (buf_out_rd_ptr_f < 9)
-        noc_data_out = buf_out_mem_f[buf_out_rd_ptr_f];
+        noc_data_out_tmp = buf_out_mem_f[buf_out_rd_ptr_f];
 end
 */
 `ifndef MINIMAL_MONITORING
@@ -761,15 +785,195 @@ always @(posedge clk) begin
         $display("FakeMem: input: %h", noc_data_in, $time);
 `endif
     end
-    if (noc_valid_out & noc_ready_out) begin
+    if (noc_valid_out_tmp & noc_ready_out_tmp) begin
 `ifdef VERILATOR
-        $display("FakeMem: output %h", noc_data_out);
+        $display("FakeMem: output %h", noc_data_out_tmp);
 `else
-        $display("FakeMem: output %h", noc_data_out, $time);
+        $display("FakeMem: output %h", noc_data_out_tmp, $time);
 `endif
     end
 end
 `endif // endif MINIMAL_MONITORING
 
+
+//apply RD delay estimations
+
+
+
+
+
+`ifdef PITON_LAT_MODULE
+`ifdef PITON_HBM_LAT
+    localparam MAX_RD_DELAY = `PITON_HBM_LAT;  // maximum RD pipeline stage delay	
+    localparam DELAYw = (MAX_RD_DELAY>1) ? $clog2(MAX_RD_DELAY+1) : 1;   
+    wire [DELAYw-1 : 0] rd_lat_in = `PITON_HBM_LAT;
+`endif
+
+
+
+
+`ifdef PITON_LAT_FILE
+//!metro_chipset && !PITON_EXTRA_MEMS
+`ifndef METRO_CHIPSET
+    `define RD_LAT_EN
+`else 
+`ifndef PITON_EXTRA_MEMS
+    `define RD_LAT_EN
+`endif //PITON_EXTRA_MEMS
+`endif //METRO_CHIPSET
+
+`ifdef RD_LAT_EN
+
+`ifdef PITON_DPI
+       import "DPI-C" function void delay_init_call(string str, int frq);
+       import "DPI-C" function longint got_a_write_req_call (longint clk_);
+       import "DPI-C" function longint got_a_read_req_call (longint clk_);
+       import "DPI-C" function real get_Bandwidth_call ();
+`endif
+
+    wire [31 : 0] rd_lat_in;
+    initial begin 
+`ifdef PITON_DPI
+        delay_init_call(`PITON_LAT_FILE,`PITON_LAT_FREQ);
+`else 
+        $delay_init(`PITON_LAT_FILE,`PITON_LAT_FREQ);
+`endif 
+    end
+
+    reg [63: 0] clk_counter,rd_lat;
+
+    always @(posedge clk) begin 
+        if(~rst_n)begin 
+             clk_counter<=64'd0;
+        end else begin 
+            clk_counter<=clk_counter +1'b1;
+        end
+    end
+
+    always @(posedge clk) begin 
+        if(rst_n & mem_valid_in & mem_ready_in) begin
+            case (msg_type)
+            `MSG_TYPE_LOAD_MEM,`MSG_TYPE_NC_LOAD_REQ: begin 
+`ifdef PITON_DPI
+                rd_lat = got_a_read_req_call(clk_counter);
+`else 
+                $got_a_read_req(clk_counter,rd_lat);
+`endif 
+
+            end
+            `MSG_TYPE_STORE_MEM,`MSG_TYPE_NC_STORE_REQ: begin 
+`ifdef PITON_DPI
+                rd_lat = got_a_write_req_call(clk_counter);
+`else 
+                $got_a_write_req(clk_counter,rd_lat);
+`endif 
+            end 
+            endcase
+           // $display ("clk is %d , latency is %d",clk_counter , rd_lat_in);
+        end//mem_valid_in
+    end//always
+
+    assign rd_lat_in = rd_lat [31 : 0];
+
+`endif //METRO_CHIPSET 
+`endif //PITON_LAT_FILE
+
+
+
+`ifdef  PITON_LAT_FILE
+`ifdef  METRO_CHIPSET
+`ifdef  PITON_EXTRA_MEMS
+    //specific case. Each mem ctrl is mapped to a different physical processor. 
+    //and delay model is mapped to the chipset.
+    //we need to send rd,wr to chipset using mpi
+    
+    //read by crossref via metro_chipset.sv
+    reg  got_rd,got_wr;
+
+    always @(*) begin 
+        got_rd=1'b0;
+        got_wr=1'b0;
+        if(mem_valid_in & rst_n & mem_ready_in ) begin
+            case (msg_type)
+            `MSG_TYPE_LOAD_MEM,`MSG_TYPE_NC_LOAD_REQ: begin 
+                got_rd=1'b1;
+            end
+            `MSG_TYPE_STORE_MEM,`MSG_TYPE_NC_STORE_REQ: begin 
+                got_wr=1'b1;
+            end 
+            endcase
+        end //mem_valid_in
+    end
+
+`endif 
+`endif 
+`endif 
+
+hbm_delay #(
+	.HMB_CHAN_NUM   (HMB_CHAN_NUM  ),
+        .FLIT_WIDTH(`PITON_NOC3_WIDTH)
+	) hbm_delay (
+	.rd_lat_in      (rd_lat_in),
+	.clk            (clk           ), 
+	.rst_n          (rst_n         ), 
+	.noc_valid_in   (noc_valid_out_tmp  ), 
+	.noc_data_in    (noc_data_out_tmp   ), 
+	.noc_ready_in   (noc_ready_out_tmp ), 
+//	.msg_addr       (msg_addr_o      ), 
+	.noc_valid_out  (noc_valid_out ), 
+	.noc_data_out   (noc_data_out  ), 
+	.noc_ready_out  (noc_ready_out ));
+	
+	`ifndef MINIMAL_MONITORING	
+	always @(posedge clk) begin
+		if (noc_valid_out & noc_ready_out) begin
+	 		$display("Delay: output %h", noc_data_out, $time);
+		end
+	end
+	`endif	
+	
+/*	
+	integer tmp1,tmp2;
+initial begin 
+	tmp1=$fopen("delay.txt","w");
+	tmp2=$fopen("fake.txt","w");
+end
+	
+	always @(posedge clk) begin
+		if (noc_valid_out & noc_ready_out) begin
+	 		$fdisplay(tmp1,"%h", noc_data_out);
+	 		$fflush(tmp1);
+		end
+	
+		if (noc_valid_out_tmp & noc_ready_out_tmp) begin
+	 		$fdisplay(tmp2,"%h", noc_data_out_tmp);
+	 		$fflush(tmp2);
+		end
+end
+*/	
+
+
+`else 
+
+    assign noc_valid_out = noc_valid_out_tmp;
+    assign noc_data_out  = noc_data_out_tmp;
+    assign noc_ready_out_tmp = noc_ready_out;
+
+`endif
+
+
+`ifdef VERILATOR
+   reg  [63:0] flit_o_cnts,flit_i_cnts;   
+   always @ (posedge clk) begin
+       if (!rst_n) begin
+           flit_o_cnts<=0;
+           flit_i_cnts<=0;
+       end else begin
+           if (noc_valid_in & noc_ready_in) flit_i_cnts <= flit_i_cnts + 1'b1; 
+           if (noc_valid_out & noc_ready_out) flit_o_cnts <= flit_o_cnts + 1'b1;
+       end
+   end
+`endif
+
 endmodule
 
diff --git a/piton/verif/env/common/hbm_delay.sv b/piton/verif/env/common/hbm_delay.sv
new file mode 100644
index 00000000..c3ca1a83
--- /dev/null
+++ b/piton/verif/env/common/hbm_delay.sv
@@ -0,0 +1,813 @@
+/****************************************************************************
+ * hbm_delay.sv
+ ****************************************************************************/
+
+`include "define.tmp.h" 
+ 
+module hbm_delay
+        import hbm_delay_pck::*;    
+    #(
+        parameter HMB_CHAN_NUM=0,
+        parameter FLIT_WIDTH=64
+    )(
+        input [DELAYw-1 : 0] rd_lat_in,
+        input wire clk,
+        input wire rst_n,
+
+        input wire noc_valid_in,
+        input wire [FLIT_WIDTH-1:0] noc_data_in,
+        output noc_ready_in,
+
+        output reg noc_valid_out,
+        output reg [FLIT_WIDTH-1:0] noc_data_out,
+        input wire noc_ready_out
+    );   
+   
+    //get the incomming pck flit type
+    wire head_in,tail_in;
+    tail_hdr_detect #(
+        .FLIT_WIDTH(FLIT_WIDTH)
+    )detect(
+        .reset (~rst_n),
+        .clk (clk          ), 
+        .flit_in(noc_data_in),
+        .valid (noc_valid_in),
+        .ready (noc_ready_in),
+        .is_tail (tail_in),
+        .is_header(head_in)
+    );   
+    
+    
+    // A global clock counter 
+    reg [TIMERw-1:0] timer, expected_time_in, rd_delay_tmp,largest_delay_tmp;
+    always @(posedge clk) begin 
+        if(~rst_n) timer<={TIMERw{1'b0}};
+        else  timer <= timer+1'b1;        
+    end
+    
+    always @(*) begin 
+        rd_delay_tmp = {TIMERw{1'b0}};
+        rd_delay_tmp[DELAYw-1 : 0] = rd_lat_in;
+        largest_delay_tmp = {TIMERw{1'b0}};
+        largest_delay_tmp[DELAYw-1 : 0]= MAX_LAT;        
+    end
+    
+    //Expected packet inject time is current time + expected delay
+    assign expected_time_in = timer + rd_delay_tmp;
+
+    
+    // save input flit in FIFOs according to delay time and FIFO num
+    // make sure the selcted fifo wont change until getting the entire packets
+    logic [DELAY_FIFO_NUM-1 : 0] fifo_wr,fifo_in_sel, fifo_in_sel1 ,  fifo_in_sel2 ;    
+    assign fifo_in_sel = (head_in)? fifo_in_sel1 : fifo_in_sel2; 
+    
+    
+    fifo_dat_t  fifo_in;
+    assign fifo_in = '{
+            flit: noc_data_in,
+            head:head_in,
+            tail:tail_in,
+            exp_time:expected_time_in
+        };
+        
+    fifo_dat_t  fifo_out [DELAY_FIFO_NUM-1 : 0];
+    
+        
+    
+    wire  [DELAY_FIFO_NUM-1 : 0]  granted_queue,inject_rdy,full,not_empty;
+    logic [DELAY_FIFO_NUM-1 : 0] fifo_rd;
+    
+    wire any_grant;
+    
+    assign noc_ready_in = |(~full & fifo_in_sel);
+    
+    
+    
+    genvar i;
+    generate 
+        for (i=0;i<DELAY_FIFO_NUM;i++) begin : fifo_
+            
+            //Select FIFO according to delay
+            if (DELAY_FIFO_NUM ==1 ) assign fifo_in_sel1[i] = 1'b1;
+            else if(i==0)  assign fifo_in_sel1[i] = (rd_lat_in <  MIN_LAT+ LAT_STEP);
+            else if(i!=DELAY_FIFO_NUM-1)    assign fifo_in_sel1[i] = (rd_lat_in >=  MIN_LAT + (LAT_STEP*i)) && (rd_lat_in <  MIN_LAT+(LAT_STEP*(i+1)));
+            else assign fifo_in_sel1[i] = (rd_lat_in >=  MIN_LAT+(LAT_STEP*i));
+            
+            assign fifo_wr[i]= noc_valid_in & fifo_in_sel[i] & noc_ready_in;
+        
+            /*
+            When should injecte the incomming packet:
+            1- exp_time <= timer. Expected packet injection time is smaller than current time
+            2- exp_time is larger than  current time but its difference is larger than the largest
+               expected latency.Here a timer overfllow happend. 
+            */    
+                
+            assign inject_rdy [i] = 
+                (fifo_out[i].exp_time <= timer)? 1'b1 : 
+                (fifo_out[i].exp_time -timer > largest_delay_tmp)? 1'b1 : 1'b0; 
+            
+            
+            
+        
+            hbm_delay_fwft_fifo_bram #(
+                    .DATA_WIDTH                     (FIFO_DW                ), 
+                    .MAX_DEPTH                      (DELAY_FIFO_DEPTH       ), 
+                    .IGNORE_SAME_LOC_RD_WR_WARNING  ("NO" )
+                ) fwft_fifo (
+                    .din                            (fifo_in), 
+                    .wr_en                          (fifo_wr[i]                    ), 
+                    .rd_en                          (fifo_rd[i]                    ), 
+                    .dout                           (fifo_out[i] ), 
+                    .full                           (full [i]                      ), 
+                    .nearly_full                    (                               ), 
+                    .recieve_more_than_0            (not_empty[i]                   ), 
+                    .recieve_more_than_1            (                              ), 
+                    .reset                          (~rst_n                        ), 
+                    .clk                            (clk                           )
+                );
+        end 
+    endgenerate
+    
+    localparam SELw = $clog2(DELAY_FIFO_NUM);
+    wire [SELw-1 : 0] granted_bin;
+    
+    //If there are more than one FIFO ready to inject packets 
+    //arbitrate between them
+    hbm_thermo_arbiter #(
+            .ARBITER_WIDTH(DELAY_FIFO_NUM)
+        )
+        arbiter
+        (
+            .request(inject_rdy & not_empty),
+            .grant(granted_queue),
+            .any_grant(any_grant),
+            .clk(clk),
+            .reset(~rst_n)
+        );
+    
+    hbm_one_hot_to_bin #(
+            .ONE_HOT_WIDTH  (DELAY_FIFO_NUM ), 
+            .BIN_WIDTH      (SELw     )
+        ) hbm_one_hot_to_bin (
+            .one_hot_code   (granted_queue  ), 
+            .bin_code       (granted_bin    )
+        );
+    
+    enum bit {IDEAL, LOCK} ps, ns;
+    reg [SELw-1 : 0] fifo_out_sel_next,fifo_out_sel;
+        
+    always @(*) begin
+        fifo_rd={DELAY_FIFO_NUM{1'b0}};
+        fifo_out_sel_next= fifo_out_sel;
+        noc_valid_out=1'b0;
+        ns =ps;
+        noc_data_out=fifo_out[fifo_out_sel].flit;
+        
+            case(ps) 
+            IDEAL: begin 
+                if( any_grant)begin 
+                    if(noc_ready_out)begin
+                        fifo_out_sel_next = granted_bin;
+                        fifo_rd[granted_bin]=1'b1;
+                         if(fifo_out[granted_bin].tail==1'b0) ns = LOCK;
+                    end                             
+                    noc_valid_out=1'b1;
+                    noc_data_out=fifo_out[granted_bin].flit;
+                        
+                end
+            end
+            LOCK: begin //lock to fifo until sending the entire packet 
+                if(not_empty[fifo_out_sel]) begin 
+                    if(noc_ready_out)begin
+                        fifo_rd[fifo_out_sel]=1'b1;
+                        if(fifo_out[fifo_out_sel].tail) ns =IDEAL;
+                    end                        
+                    noc_valid_out=1'b1;
+                    noc_data_out=fifo_out[fifo_out_sel].flit;
+                    
+                end
+            end            
+            endcase
+        
+        
+        assert ($onehot0(fifo_wr)) else begin 
+           $error("Only one bit in fifo_wr (%b) should be asserted",fifo_wr);
+           $stop;     
+        end
+        
+        assert (~(fifo_wr==0 && noc_valid_in===1'b1 && noc_ready_in===1'b1))  else begin 
+           $error("No fifo_wr is selected when noc_valid_in is one");
+           $stop;     
+        end    
+    end
+    
+    
+    always @(posedge clk ) begin
+        if(~rst_n) begin 
+            ps<=IDEAL;
+            fifo_out_sel<= 0;
+            fifo_in_sel2<= 1;        
+        end else begin 
+            ps<=ns;    
+            fifo_out_sel<= fifo_out_sel_next;
+            if (head_in) fifo_in_sel2 <= fifo_in_sel1; 
+        end
+
+        if((noc_valid_in & noc_ready_in)==1'b1 && ~$onehot(fifo_in_sel)) begin 
+           $error("fifo_in_sel (%b) should be onehot coded when noc_valid_in (%b) is asserted",fifo_in_sel,noc_valid_in);
+           $stop;     
+        end
+
+        if (noc_valid_out==1'b1 && noc_ready_out==1'b0 && fifo_rd>0 )begin 
+           $error("write to NoC when it was not ready");
+           $stop;
+        end
+    end
+    
+endmodule
+
+
+
+
+
+
+
+/****************************
+ *         expected_delay
+ * *************************/
+ 
+module expected_delay
+        import hbm_delay_pck::*;
+    #( 
+        parameter HMB_CHAN_NUM= 0,
+        parameter DELAYw=10  
+    )(
+        input  [`PHY_ADDR_WIDTH-1:0] msg_addr_i,
+        output [DELAYw-1 : 0] rd_delay_o        
+    );    
+
+    /* verilator lint_off WIDTH */
+    localparam [CHAN_GROUPw-1 : 0] HMB_CHAN_GROUP_NUM = HMB_CHAN_NUM/CHANNEL_WITH_SAME_DELAY;
+    /* verilator lint_on WIDTH */
+    
+    logic [DELAYw-1 : 0] delays [CHAN_GROUP-1:0];
+    
+    assign delays = HBM_CHAN_DELAYS;
+      
+    
+    wire [CHAN_GROUPw-1 : 0] input_chan_num = msg_addr_i[CHAN_BASE_ADDR+ CHAN_GROUPw-1 :CHAN_BASE_ADDR];
+    wire [CHAN_GROUPw-1 : 0] channel_distance;
+    wire [DELAYw-1 : 0] diff;
+    
+    /* verilator lint_off CMPCONST */
+    assign diff = (input_chan_num > HMB_CHAN_GROUP_NUM)? delays[input_chan_num]-delays[HMB_CHAN_GROUP_NUM] : delays[HMB_CHAN_GROUP_NUM]- delays[input_chan_num];
+    /* verilator lint_on CMPCONST */
+    
+        
+    assign rd_delay_o =  delays[0] + diff;
+
+endmodule    
+
+
+
+/***********************************
+
+        module bin_to_one_hot 
+        
+
+ ************************************/
+
+
+module hbm_bin_to_one_hot #(
+        parameter BIN_WIDTH     =   2,
+        parameter ONE_HOT_WIDTH =   2**BIN_WIDTH
+    
+        )
+        (
+        input   [BIN_WIDTH-1            :   0]  bin_code,
+        output  [ONE_HOT_WIDTH-1        :   0] one_hot_code
+        );
+
+    genvar i;
+    generate 
+        for(i=0; i<ONE_HOT_WIDTH; i=i+1) begin :one_hot_gen_loop
+            assign one_hot_code[i] = (bin_code == i[BIN_WIDTH-1         :   0]);
+        end
+    endgenerate
+ 
+endmodule
+
+/***********************************
+
+        one_hot_to_binary
+
+ ************************************/
+
+
+
+module hbm_one_hot_to_bin #(
+        parameter ONE_HOT_WIDTH =   4,
+        parameter BIN_WIDTH     =  (ONE_HOT_WIDTH>1)? log2(ONE_HOT_WIDTH):1
+        )
+        (
+        input   [ONE_HOT_WIDTH-1        :   0] one_hot_code,
+        output  [BIN_WIDTH-1            :   0]  bin_code
+
+        );
+
+  
+    function integer log2;
+        input integer number; begin   
+            log2=(number <=1) ? 1: 0;    
+            while(2**log2<number) begin    
+                log2=log2+1;    
+            end        
+        end   
+    endfunction // log2 
+
+    localparam MUX_IN_WIDTH =   BIN_WIDTH* ONE_HOT_WIDTH;
+
+    wire [MUX_IN_WIDTH-1        :   0]  bin_temp ;
+
+    genvar i;
+    generate 
+        if(ONE_HOT_WIDTH>1)begin :if1
+            for(i=0; i<ONE_HOT_WIDTH; i=i+1) begin :mux_in_gen_loop
+                assign bin_temp[(i+1)*BIN_WIDTH-1 : i*BIN_WIDTH] =  i[BIN_WIDTH-1:0];
+            end
+
+
+            hbm_one_hot_mux #(
+                    .IN_WIDTH   (MUX_IN_WIDTH),
+                    .SEL_WIDTH  (ONE_HOT_WIDTH)
+            
+                )
+                one_hot_to_bcd_mux
+                (
+                    .mux_in     (bin_temp),
+                    .mux_out        (bin_code),
+                    .sel            (one_hot_code)
+    
+                );
+        end else begin :els
+            // assign  bin_code = one_hot_code;
+            assign  bin_code = 1'b0;
+        end
+
+    endgenerate
+
+endmodule
+
+
+module hbm_one_hot_mux #(
+        parameter   IN_WIDTH      = 20,
+        parameter   SEL_WIDTH =   5, 
+        parameter   OUT_WIDTH = IN_WIDTH/SEL_WIDTH
+
+        )
+        (
+        input [IN_WIDTH-1       :0] mux_in,
+        output[OUT_WIDTH-1  :0] mux_out,
+        input[SEL_WIDTH-1   :0] sel
+
+        );
+
+    wire [IN_WIDTH-1    :0] mask;
+    wire [IN_WIDTH-1    :0] masked_mux_in;
+    wire [SEL_WIDTH-1:0]    mux_out_gen [OUT_WIDTH-1:0]; 
+    
+    genvar i,j;
+    
+    //first selector masking
+    generate    // first_mask = {sel[0],sel[0],sel[0],....,sel[n],sel[n],sel[n]}
+        for(i=0; i<SEL_WIDTH; i=i+1) begin : mask_loop
+            assign mask[(i+1)*OUT_WIDTH-1 : (i)*OUT_WIDTH]  =   {OUT_WIDTH{sel[i]} };
+        end
+        
+        assign masked_mux_in    = mux_in & mask;
+        
+        for(i=0; i<OUT_WIDTH; i=i+1) begin : lp1
+            for(j=0; j<SEL_WIDTH; j=j+1) begin : lp2
+                assign mux_out_gen [i][j]   =   masked_mux_in[i+OUT_WIDTH*j];
+            end
+            assign mux_out[i] = | mux_out_gen [i];
+        end
+    endgenerate
+    
+endmodule
+
+
+
+
+/*******************
+ *
+ *    thermo_arbiter RRA
+ *
+ ********************/
+
+module hbm_thermo_gen #(
+        parameter WIDTH=16
+        )(
+        input  [WIDTH-1    :    0]in,
+        output [WIDTH-1    :    0]out
+        );
+    genvar i;
+    generate
+        for(i=0;i<WIDTH;i=i+1)begin :lp
+            assign out[i]= | in[i    :0];    
+        end
+    endgenerate
+
+endmodule
+ 
+ 
+ 
+ 
+module  hbm_thermo_arbiter #(
+        parameter    ARBITER_WIDTH    =4        
+        )
+        (    
+        clk, 
+        reset, 
+        request, 
+        grant,
+        any_grant
+        );
+
+        
+
+    
+    input     [ARBITER_WIDTH-1             :    0]    request;
+    output    [ARBITER_WIDTH-1            :    0]    grant;
+    output                                            any_grant;
+    input                                                reset,clk;
+    
+    
+    wire        [ARBITER_WIDTH-1             :    0]    termo1,termo2,mux_out,masked_request,edge_mask;
+    reg        [ARBITER_WIDTH-1             :    0]    pr;
+
+
+    hbm_thermo_gen #(
+            .WIDTH(ARBITER_WIDTH)
+        ) tm1
+        (
+            .in(request),
+            .out(termo1)
+        );
+
+
+
+
+    hbm_thermo_gen #(
+            .WIDTH(ARBITER_WIDTH)
+        ) tm2
+        (
+            .in(masked_request),
+            .out(termo2)
+        );
+
+    
+    assign mux_out=(termo2[ARBITER_WIDTH-1])? termo2 : termo1;
+    assign masked_request= request & pr;
+    assign any_grant=termo1[ARBITER_WIDTH-1];
+    
+    always @ (posedge clk )begin 
+        if(reset) pr<= {ARBITER_WIDTH{1'b1}};
+        else begin 
+            if(any_grant) pr<= edge_mask;
+        end
+    
+    end
+   generate 
+   if(ARBITER_WIDTH> 1) begin 
+    assign edge_mask= {mux_out[ARBITER_WIDTH-2:0],1'b0};
+   end else begin 
+    assign edge_mask=1'b0;
+   end
+   endgenerate
+    assign grant= mux_out ^ edge_mask;
+
+
+
+endmodule
+
+
+
+
+
+
+
+
+
+/******************
+hbm_delay_fwft_fifo_bram
+ ********************/
+
+module hbm_delay_fwft_fifo_bram #(
+        parameter DATA_WIDTH = 2,
+        parameter MAX_DEPTH = 2,
+        parameter IGNORE_SAME_LOC_RD_WR_WARNING="YES" // "YES" , "NO"
+        )
+        (
+        input [DATA_WIDTH-1:0] din,     // Data in
+        input          wr_en,   // Write enable
+        input          rd_en,   // Read the next word
+        output [DATA_WIDTH-1:0]  dout,    // Data out
+        output         full,
+        output         nearly_full,
+        output         recieve_more_than_0,
+        output         recieve_more_than_1,
+        input          reset,
+        input          clk
+
+        );
+
+
+    function integer log2;
+        input integer number; begin
+            log2=(number <=1) ? 1: 0;
+            while(2**log2<number) begin
+                log2=log2+1;
+            end
+        end
+    endfunction // log2
+
+
+
+    localparam DEPTH_DATA_WIDTH = log2(MAX_DEPTH +1);
+
+    reg  valid_next;
+    wire valid;
+    wire pass_din_to_out_reg, out_reg_wr_en, bram_out_is_valid_next;
+    wire bram_out_is_valid;
+    wire bram_empty, bram_rd_en, bram_wr_en;
+    wire [DATA_WIDTH-1 : 0] bram_dout;
+    wire [DATA_WIDTH-1 : 0] out_reg;
+    reg  [DATA_WIDTH-1 : 0] out_reg_next;
+
+    assign dout = (bram_out_is_valid)?  bram_dout : out_reg;
+
+
+    assign  pass_din_to_out_reg = (wr_en & ~valid)| // a write has been recived while the reg_flit is not valid
+        (wr_en & valid & bram_empty & rd_en); //or its valid but bram is empty and its got a read request
+
+    assign bram_rd_en = (rd_en & ~bram_empty);
+    assign bram_wr_en = (pass_din_to_out_reg)?  1'b0 :wr_en ; //make sure not write on the Bram if the reg fifo is empty
+
+
+    assign  out_reg_wr_en = pass_din_to_out_reg | bram_out_is_valid;
+
+    assign  bram_out_is_valid_next = (bram_rd_en )? (rd_en &  ~bram_empty): 1'b0;
+
+
+    
+
+
+    hbm_delay_bram_based_fifo  #(
+            .Dw(DATA_WIDTH),//data_width
+            .B(MAX_DEPTH)// buffer num
+        )bram_fifo(
+            .din(din),
+            .wr_en(bram_wr_en),
+            .rd_en(bram_rd_en),
+            .dout(bram_dout),
+            .full(),
+            .nearly_full(),
+            .empty(bram_empty),
+            .reset(reset),
+            .clk(clk)
+        );
+
+    wire [DEPTH_DATA_WIDTH-1         :   0]  depth;
+    reg  [DEPTH_DATA_WIDTH-1         :   0]  depth_next;
+
+
+    hbm_delay_register #(.W(DATA_WIDTH)      ) reg1 (.in(out_reg_next           ), .out(out_reg), .reset(reset), .clk(clk));
+    hbm_delay_register #(.W(1)               ) reg2 (.in(valid_next             ), .out(valid), .reset(reset), .clk(clk));
+    hbm_delay_register #(.W(1)               ) reg3 (.in(bram_out_is_valid_next ), .out(bram_out_is_valid), .reset(reset), .clk(clk));
+    hbm_delay_register #(.W(DEPTH_DATA_WIDTH)) reg4 (.in(depth_next             ), .out(depth), .reset(reset), .clk(clk));
+
+   always @(*) begin
+        valid_next = valid;
+        if(depth_next == {DEPTH_DATA_WIDTH{1'b0}}) valid_next =1'b0;
+        else if(out_reg_wr_en) valid_next =1'b1;
+        else if( bram_empty & rd_en) valid_next =1'b0;
+    end
+
+
+    always @(*) begin
+        out_reg_next = out_reg;
+        depth_next   = depth;
+        if (wr_en & ~rd_en) depth_next =   depth + 1'h1;
+        else if (~wr_en & rd_en) depth_next  = depth - 1'h1;
+        if(pass_din_to_out_reg) out_reg_next = din;
+        else if(bram_out_is_valid)   out_reg_next = bram_dout;
+    end
+
+
+
+
+    wire empty;
+    assign full                         = depth == MAX_DEPTH [DEPTH_DATA_WIDTH-1            :   0];
+    assign nearly_full              = depth >= MAX_DEPTH [DEPTH_DATA_WIDTH-1            :   0] -1'b1;
+    assign empty     = depth == {DEPTH_DATA_WIDTH{1'b0}};
+    assign recieve_more_than_0  = ~ empty;
+    assign recieve_more_than_1  = ~( depth == {DEPTH_DATA_WIDTH{1'b0}} ||  depth== 1 );
+
+
+
+
+    //synthesis translate_off
+    //synopsys  translate_off
+    always @(posedge clk)
+    begin
+        if (wr_en & ~rd_en & full) begin
+            $display("%t: ERROR: Attempt to write to full FIFO:FIFO size is %d. %m",$time,MAX_DEPTH);
+            $finish;
+        end
+        /* verilator lint_off WIDTH */
+        if (rd_en & !recieve_more_than_0 & IGNORE_SAME_LOC_RD_WR_WARNING == "NO") begin
+            $display("%t ERROR: Attempt to read an empty FIFO: %m", $time);
+            $finish;
+        end
+        if (rd_en & ~wr_en & !recieve_more_than_0 & (IGNORE_SAME_LOC_RD_WR_WARNING == "YES")) begin
+            $display("%t ERROR: Attempt to read an empty FIFO: %m", $time);
+            $finish;
+        end
+        /* verilator lint_on WIDTH */
+    end // always @ (posedge clk)
+
+    //synopsys  translate_on
+    //synthesis translate_on
+
+
+
+
+endmodule
+
+
+
+/**********************************
+
+            bram_based_fifo
+
+ *********************************/
+
+
+module hbm_delay_bram_based_fifo  #(
+        parameter Dw = 72,//data_width
+        parameter B  = 10// buffer num
+        )(
+        din,
+        wr_en,
+        rd_en,
+        dout,
+        full,
+        nearly_full,
+        empty,
+        reset,
+        clk
+        );
+
+
+    function integer log2;
+        input integer number; begin
+            log2=(number <=1) ? 1: 0;
+            while(2**log2<number) begin
+                log2=log2+1;
+            end
+        end
+    endfunction // log2
+
+    localparam  B_1 = B-1,
+        Bw = log2(B),
+        DEPTHw=log2(B+1);
+    localparam  [Bw-1   :   0] Bint =   B_1[Bw-1    :   0];
+
+    input [Dw-1:0] din;     // Data in
+    input          wr_en;   // Write enable
+    input          rd_en;   // Read the next word
+
+    output reg [Dw-1:0]  dout;    // Data out
+    output         full;
+    output         nearly_full;
+    output         empty;
+
+    input          reset;
+    input          clk;
+
+
+
+    reg [Dw-1       :   0] queue [B-1 : 0] /* synthesis ramstyle = "no_rw_check" */;
+    reg [Bw- 1      :   0] rd_ptr;
+    reg [Bw- 1      :   0] wr_ptr;
+    reg [DEPTHw-1   :   0] depth;
+
+    // Sample the data
+    always @(posedge clk)
+    begin
+        if (wr_en)
+            queue[wr_ptr] <= din;
+        if (rd_en)
+            dout <=   queue[rd_ptr];
+    end
+
+    always @(posedge clk)
+    begin
+        if (reset) begin
+            rd_ptr <= {Bw{1'b0}};
+            wr_ptr <= {Bw{1'b0}};
+            depth  <= {DEPTHw{1'b0}};
+        end
+        else begin
+            if (wr_en) wr_ptr <= (wr_ptr==Bint)? {Bw{1'b0}} : wr_ptr + 1'b1;
+            if (rd_en) rd_ptr <= (rd_ptr==Bint)? {Bw{1'b0}} : rd_ptr + 1'b1;
+            if (wr_en & ~rd_en) depth <=  depth + 1'b1;
+            else if (~wr_en & rd_en) depth <=  depth - 1'b1;
+        end
+    end
+
+    //assign dout = queue[rd_ptr];
+    localparam  [DEPTHw-1   :   0] Bint2 =   B_1[DEPTHw-1   :   0];
+
+
+    assign full = depth == B [DEPTHw-1   :   0];
+    assign nearly_full = depth >=Bint2; //  B-1
+    assign empty = depth == {DEPTHw{1'b0}};
+
+    //synthesis translate_off
+    //synopsys  translate_off
+    always @(posedge clk)
+    begin
+        if(~reset)begin
+            if (wr_en && depth == B[DEPTHw-1   :   0] && !rd_en) begin
+                $display(" %t: ERROR: Attempt to write to full FIFO: %m",$time);
+                $finish;
+            end
+            if (rd_en && depth == {DEPTHw{1'b0}}) begin
+                $display("%t: ERROR: Attempt to read an empty FIFO: %m",$time);
+                $finish;
+            end
+        end//~reset
+    end
+    //synopsys  translate_on
+    //synthesis translate_on
+
+endmodule // fifo
+
+
+
+module hbm_delay_register
+        #(
+        parameter W=1,
+        parameter  RESET_TO={W{1'b0}}
+
+        )(
+        input [W-1:0] in,
+        input reset,
+        input clk,
+        output [W-1:0] out
+        );
+
+    hbm_register_reset_init #(
+            .W(W)
+        )reg1(
+            .in(in),
+            .reset(reset),
+            .clk(clk),
+            .out(out),
+            .reset_to(RESET_TO[W-1 : 0])
+        );
+endmodule
+
+
+
+
+
+module hbm_register_reset_init 
+        #(
+        parameter W=1       
+        )( 
+        input [W-1:0] in,
+        input reset,    
+        input clk,      
+        output reg [W-1:0] out,
+        input [W-1 : 0] reset_to
+        );
+    
+    
+    always @ (posedge clk )begin 
+        if(reset)   out<=reset_to;
+        else        out<=in;
+    end   
+        
+endmodule
+
+
+
+
+
+
+
+
+
diff --git a/piton/verif/env/common/hbm_delay_pck.sv b/piton/verif/env/common/hbm_delay_pck.sv
new file mode 100644
index 00000000..906c805d
--- /dev/null
+++ b/piton/verif/env/common/hbm_delay_pck.sv
@@ -0,0 +1,96 @@
+/****************************************************************************
+ * hbm_delay_pck.sv
+ ****************************************************************************/
+
+package hbm_delay_pck;
+
+	`include "define.tmp.h"
+	
+	/*
+	 * Design						Write Latency (clock cycles)	Read Latency (clock cycles)	Write Throughput (GB/s)	Read Throughput (GB/s)	Bandwidth (GB/s)
+HBM in AXI 0 accessing PSCH0	14	                            48	                          0.58	4.65	
+HBM in AXI 0 accessing PSCH4	16	                            50	                          0.52	4.65	
+HBM in AXI 0 accessing PSCH8	18	                            52	                          0.46	4.65	
+HBM in AXI 0 accessing PSCH12	20	                            54	                          0.42	4.65	
+HBM in AXI 0 accessing PSCH16	31	                            67	                          0.28	4.65	
+HBM in AXI 0 accessing PSCH20	33	                            69	                          0.27	4.65	
+HBM in AXI 0 accessing PSCH24	35	                            71	                          0.25	4.65	
+HBM in AXI 0 accessing PSCH28	37	                            73	                          0.24	4.65	
+	 */	
+	
+	typedef enum bit [1:0] {HEADER, BODY,TAIL} flit_type_t; 
+	
+	
+	localparam TOTAL_CHAN_NUM = 32;
+	localparam CHANNEL_WITH_SAME_DELAY=4;
+	
+	
+	localparam INTERLEAVE_ADDR_RANGE= 'h1000_0000;                 //
+	/*
+	  'h1000_0000;   //256 M (default no interlevaing)
+	  'h100_000;     //1   M
+	  
+	*/
+	
+	
+	
+	
+    localparam CHAN_GROUP= TOTAL_CHAN_NUM/CHANNEL_WITH_SAME_DELAY;    
+	localparam CHAN_GROUPw= (CHAN_GROUP>1) ? $clog2(CHAN_GROUP) : 1;	
+	localparam CHAN_BASE_ADDR = $clog2(INTERLEAVE_ADDR_RANGE*4); //Each four phy chan has same lat
+	
+`ifdef CUSTOM_HBM_DELAY
+ 	localparam TIMERw=10;
+ 	localparam MAX_RD_DELAY = 73;  // maximum RD pipeline stage delay	
+        localparam DELAYw = (MAX_RD_DELAY>1) ? $clog2(MAX_RD_DELAY) : 1;
+	localparam [DELAYw-1 : 0] HBM_CHAN_DELAYS [CHAN_GROUP-1 : 0]='{73,71,69,67,54,52,50,48};   
+	localparam DELAY_FIFO_NUM = 2;
+	localparam DELAY_FIFO_DEPTH = 200; // 200/9 = 22 packets 
+	
+	localparam MIN_LAT = HBM_CHAN_DELAYS [0];
+	localparam MAX_LAT = HBM_CHAN_DELAYS [CHAN_GROUP-1];
+	localparam LAT_STEP= (MAX_LAT - MIN_LAT)/DELAY_FIFO_NUM; 
+	
+`else
+`ifdef PITON_HBM_LAT 
+	
+	localparam MAX_RD_DELAY = `PITON_HBM_LAT;  // maximum RD pipeline stage delay	
+	localparam DELAYw = (MAX_RD_DELAY>1) ? $clog2(MAX_RD_DELAY+1) : 1;
+	localparam TIMERw= 32;
+	localparam [DELAYw-1 : 0] HBM_CHAN_DELAYS [CHAN_GROUP-1 : 0]='{`PITON_HBM_LAT,`PITON_HBM_LAT,`PITON_HBM_LAT,`PITON_HBM_LAT,`PITON_HBM_LAT,`PITON_HBM_LAT,`PITON_HBM_LAT,`PITON_HBM_LAT};   
+	localparam DELAY_FIFO_NUM = 1;
+	localparam DELAY_FIFO_DEPTH = 400; // 400/9 = 44 packets 
+	localparam MIN_LAT = `PITON_HBM_LAT;
+	localparam MAX_LAT = `PITON_HBM_LAT;
+	localparam LAT_STEP= (MAX_LAT - MIN_LAT)/DELAY_FIFO_NUM; 
+`else //Realstic delay model
+	localparam DELAYw =32;
+	localparam TIMERw= 32;
+	localparam [TIMERw-1 : 0] HBM_CHAN_DELAYS [CHAN_GROUP-1 : 0]='{100,100,100,100,100,100,100,100};   
+	localparam DELAY_FIFO_NUM = 1;
+	localparam DELAY_FIFO_DEPTH = 400; // 400/9 = 44 packets
+	localparam MIN_LAT = 1;
+	localparam MAX_LAT = 'hFFFFFFFF;
+	localparam LAT_STEP= (MAX_LAT - MIN_LAT)/DELAY_FIFO_NUM; 
+	
+`endif
+`endif
+
+
+	
+	
+	
+	
+	
+	typedef struct packed {
+		logic [`PITON_NOC3_WIDTH-1:0] flit;
+		bit head;
+		bit tail;
+		logic [TIMERw-1:0] exp_time;		
+	} fifo_dat_t ;		
+	localparam FIFO_DW = $bits(fifo_dat_t);
+	
+	
+	
+
+endpackage
diff --git a/piton/verif/env/manycore/ciop_iob.v.pyv b/piton/verif/env/manycore/ciop_iob.v.pyv
index fc68679d..eb371f85 100644
--- a/piton/verif/env/manycore/ciop_iob.v.pyv
+++ b/piton/verif/env/manycore/ciop_iob.v.pyv
@@ -69,7 +69,11 @@ reg [7:0] out_write_index_next;
 
 integer i;
 
+`ifndef METRO_CHIPSET
 always @ (posedge `CHIP.clk_muxed)
+`else // ifndef METRO_CHIPSET
+always @ (posedge `TOP_MOD_INST.chipset_clk)
+`endif // ifndef METRO_CHIPSET
 begin
     if (!rst_n)
         out_write_index <= 0;
@@ -209,7 +213,11 @@ integer cpx_driven;
 // cmp clock domain
 // trin bug #65: use reference clock from the chip b/c the fake iob
 // needs to monitor the core PC
+`ifndef METRO_CHIPSET
 always @(negedge `CHIP.clk_muxed)
+`else // ifndef METRO_CHIPSET
+always @(negedge `TOP_MOD_INST.chipset_clk)
+`endif // ifndef METRO_CHIPSET
 begin
     if(ok_iob)
     begin
diff --git a/piton/verif/env/manycore/cmp_l15_messages_mon.v.pyv b/piton/verif/env/manycore/cmp_l15_messages_mon.v.pyv
index 20b2ef33..729ca2c8 100644
--- a/piton/verif/env/manycore/cmp_l15_messages_mon.v.pyv
+++ b/piton/verif/env/manycore/cmp_l15_messages_mon.v.pyv
@@ -63,6 +63,16 @@ reg [7:0] pcx_interrupt_dst_x;
 reg  pcx_interrupt_threadid;
 reg [5:0] pcx_interrupt_vector;
 
+
+<%
+    from pyhplib import *
+    if os.environ['PITON_METRO_MPI'] == '1':
+        LOOP_NUM = 1
+    else :
+        LOOP_NUM = PITON_NUM_TILES
+%>
+
+
 task decode_predecode_reqtype;
 input [`L15_REQTYPE_WIDTH-1:0] reqtype;
 begin
@@ -1387,7 +1397,7 @@ end
 //CORE0 END
 '''
 
-for i in range (PITON_NUM_TILES):
+for i in range (LOOP_NUM):
     text2 = text;
     text2 = text2.replace("L15_PIPE0", "L15_PIPE" + repr(i));
     text2 = text2.replace("RTL_SPARC0", "RTL_SPARC" + repr(i));
diff --git a/piton/verif/env/manycore/cross_module.h.pyv b/piton/verif/env/manycore/cross_module.h.pyv
index 71d2ae2e..fe62137e 100644
--- a/piton/verif/env/manycore/cross_module.h.pyv
+++ b/piton/verif/env/manycore/cross_module.h.pyv
@@ -69,9 +69,24 @@
     `define SIM_TOP     jtag_testbench_top.helper
     `define TOP_MOD_INST `TOP_MOD
 `else
+`ifdef METRO_CHIPSET
+    `define TOP_MOD     metro_chipset
+    `define SIM_TOP     metro_chipset
+    `define TOP_MOD_INST `TOP_MOD.chipset
+    `define CHIPSET      `TOP_MOD_INST
+`else // ifdef METRO_CHIPSET
+`ifdef METRO_TILE
+    `define TOP_MOD     metro_tile
+    `define SIM_TOP     metro_tile
+    `define TOP_MOD_INST `TOP_MOD.L_[0].the_tile
+    `define CHIPSET      `TOP_MOD_INST
+`else // ifdef METRO_TILE
     `define TOP_MOD     cmp_top
     `define SIM_TOP     cmp_top
     `define TOP_MOD_INST `TOP_MOD.system
+    `define CHIPSET      `TOP_MOD_INST.chipset
+`endif // ifdef METRO_TILE
+`endif // ifdef METRO_CHIPSET
 // TODO: Alexey: use PITON_PROTO define ?
 //`define TOP_MOD      fpga_top.cmp_top
 `endif
@@ -80,9 +95,21 @@
 
     // `define TOP_SHELL    cmp_top_shell
 `define CHIP         `TOP_MOD_INST.chip
+
+
+`ifdef METRO_CHIPSET
+`define CHIP_INT_CLK `TOP_MOD.chipset_clk
+`else // ifdef METRO_CHIPSET
+`ifdef METRO_TILE
+`define CHIP_INT_CLK core_ref_clk
+`else // ifdef METRO_TILE
 `define CHIP_INT_CLK `CHIP.clk_muxed
+`endif // ifdef METRO_TILE
+`endif // ifdef METRO_CHIPSET
+
 `define TOP_DESIGN   `TOP_MOD.chip
-`define FAKE_IOB     `TOP_MOD.system.chipset.chipset_impl.ciop_fake_iob
+`define FAKE_IOB     `CHIPSET.chipset_impl.ciop_fake_iob
+
 // `define TOP_MEMORY   `TOP_MOD.cmp
 
 `define JTAG_CTAP    `CHIP.jtag_port.ctap
@@ -98,7 +125,11 @@
 <%
 for i in range(PITON_NUM_TILES):
     printstring = """
+    `ifdef METRO_TILE
+    `define TILE%d            `TOP_MOD_INST
+    `else // ifdef METRO_TILE
     `define TILE%d            `CHIP.tile%d
+    `endif // ifdef METRO_TILE
     `define ARIANE_CORE%d     `TILE%d.g_ariane_core.core.ariane.i_cva6
     `define SARG_CORE%d       `TILE%d.g_sarg_core.core.core_inst.sargantana_inst.datapath_inst
     `define LOX_CORE%d        `TILE%d.g_lox_core.core.core_inst.core_system_inst.ooo_data_path_inst
@@ -196,12 +227,28 @@ for i in range(PITON_NUM_TILES):
 `endif
     `define CFG_ASI_PATH%d    `SPARC_CORE%d.sparc0.cfg_asi
 
+`ifdef METRO_CHIPSET
+    `define PITON_CORE%d_INST_DONE  1'b0
+    `define PITON_CORE%d_PC_W%d     49'b0
+`else // ifdef METRO_CHIPSET
+
+    `ifndef DISABLE_ALL_MONITORS
     `define PITON_CORE%d_INST_DONE  `TOP_MOD.monitor.pc_cmp.spc%d_0_inst_done
-`ifdef RTL_SPARC%d
-    `define PITON_CORE%d_PC_W%d     `PCPATH%d.fdp.pc_w
-`else
-    `define PITON_CORE%d_PC_W%d     `TOP_MOD.monitor.pc_cmp.spc%d_0_phy_pc_w
-`endif
+    `else 
+    	`define PITON_CORE%d_INST_DONE  1'b0
+    `endif    
+    
+    `ifdef RTL_SPARC%d
+        `define PITON_CORE%d_PC_W%d     `PCPATH%d.fdp.pc_w
+    `else
+
+        `ifndef DISABLE_ALL_MONITORS
+            `define PITON_CORE%d_PC_W%d     `TOP_MOD.monitor.pc_cmp.spc%d_0_phy_pc_w
+        `else 
+        	 `define PITON_CORE%d_PC_W%d     49'b0
+        `endif
+    `endif
+`endif // ifdef METRO_CHIPSET
 
     """
     printstring = printstring.replace("%d", str(i))
diff --git a/piton/verif/env/manycore/dmbr_mon.v.pyv b/piton/verif/env/manycore/dmbr_mon.v.pyv
index 86049485..7e7da145 100644
--- a/piton/verif/env/manycore/dmbr_mon.v.pyv
+++ b/piton/verif/env/manycore/dmbr_mon.v.pyv
@@ -44,11 +44,16 @@ localparam TOTAL_CREDIT_WIDTH = `CREDIT_WIDTH + 4;	// 10 bins > 2^4 increasing i
     from pyhplib import *
     
     BIN_NUMBER = 10
+    if os.environ['PITON_METRO_MPI'] == '1':
+        LOOP_NUM = 1
+    else :
+        LOOP_NUM = PITON_NUM_TILES
+
 %>
 
 <%
 	# declaration of wires and registers
-	for i in range(PITON_NUM_TILES):
+	for i in range(LOOP_NUM):
 		print("    wire [TOTAL_CREDIT_WIDTH - 1 : 0]	total_credit_num%d;" % i)
 		print("	   reg	[TOTAL_CREDIT_WIDTH - 1 : 0]	used_credits%d;" % i)
 		print("    reg 	[`REPLENISH_WIDTH - 1 : 0]		rep_cnt%d;" % i)
@@ -56,7 +61,7 @@ localparam TOTAL_CREDIT_WIDTH = `CREDIT_WIDTH + 4;	// 10 bins > 2^4 increasing i
 	#print "\n\n\n"
 
 	# calculation of total number of credits for each tile
-	for i in range(PITON_NUM_TILES):
+	for i in range(LOOP_NUM):
 		print("    assign total_credit_num%d = " % i,end="")
 		for j in range(BIN_NUMBER):
 			if j != 0:
@@ -68,7 +73,7 @@ localparam TOTAL_CREDIT_WIDTH = `CREDIT_WIDTH + 4;	// 10 bins > 2^4 increasing i
 
 
 	<%
-		for i in range(PITON_NUM_TILES):
+		for i in range(LOOP_NUM):
 			print("""
 			always @(posedge `DMBR%d.clk)
 			begin
@@ -94,7 +99,7 @@ localparam TOTAL_CREDIT_WIDTH = `CREDIT_WIDTH + 4;	// 10 bins > 2^4 increasing i
 // bins isn't exceeded
 `ifdef DMBR_CHECKER
 <%
-for i in range(PITON_NUM_TILES):
+for i in range(LOOP_NUM):
 	print("""
 	always @*
 	begin
diff --git a/piton/verif/env/manycore/manycore_top.v.pyv b/piton/verif/env/manycore/manycore_top.v.pyv
index dd225655..2d6f586b 100644
--- a/piton/verif/env/manycore/manycore_top.v.pyv
+++ b/piton/verif/env/manycore/manycore_top.v.pyv
@@ -305,10 +305,14 @@ system system(
 `endif // endif PITON_CHIPSET_DIFF_CLK
 `else // ifndef PITON_CHIPSET_CLKS_GEN
 `ifndef VERILATOR
-`ifndef PITON_NO_CHIP_BRIDGE
-    .chipset_clk(chipset_clk),
-`else
+`ifdef PITON_EXTRA_MEMS
+    .chipset_clk(core_ref_clk),
+`elsif PITON_MANYGUI
     .chipset_clk(core_ref_clk),
+`elsif PITON_NO_CHIP_BRIDGE
+    .chipset_clk(core_ref_clk),
+`else
+    .chipset_clk(chipset_clk),
 `endif // endif PITON_NO_CHIP_BRIDGE
 `else
     .chipset_clk(core_ref_clk),
diff --git a/piton/verif/env/manycore/monitor.v.pyv b/piton/verif/env/manycore/monitor.v.pyv
index 2926182d..30657d19 100644
--- a/piton/verif/env/manycore/monitor.v.pyv
+++ b/piton/verif/env/manycore/monitor.v.pyv
@@ -52,7 +52,7 @@ module monitor(/*AUTOARG*/
 	err_f  = 1;
 	bad    = 0;
 `ifndef VERILATOR
-	max_cycle = 30000;
+	max_cycle = 6000000;
 `else // ifndef VERILATOR
 	max_cycle = 100000000;
 `endif // ifndef VERILATOR
@@ -1281,12 +1281,15 @@ module monitor(/*AUTOARG*/
 
 `endif // ifdef GATE_SIM
 
+`ifndef METRO_CHIPSET
+`ifndef METRO_TILE
 `ifdef RTL_TILE0
    //monitor good trap and bad trap.
    pc_cmp pc_cmp(clk, rst_l); // Sumti - Shifting it back to clk, sas race with +fast_boot.
 //dump cache
 `endif // ifdef RTL_TILE0
-
+`endif
+`endif
 	// dump_cache dump_cache();
 
 	// Don't include this section if compiling for DRAM SAT Environment
diff --git a/piton/verif/env/metro_chipset/metro_chipset.flist b/piton/verif/env/metro_chipset/metro_chipset.flist
new file mode 100644
index 00000000..12938ccf
--- /dev/null
+++ b/piton/verif/env/metro_chipset/metro_chipset.flist
@@ -0,0 +1,41 @@
++incdir+../../../design/include
++incdir+../../../design/chipset/include
++incdir+../manycore
++incdir+.
+
+../manycore/cross_module.h
+../manycore/manycore_network_mon.v
+../manycore/sas_intf.v
+../manycore/monitor.v
+../manycore/sas_tasks.v
+../manycore/pc_cmp.v
+../manycore/sas_task.v
+../manycore/l_cache_mon.v
+../manycore/thrfsm_mon.v // monitors for X's in the processor states
+../manycore/sparc_pipe_flow.v
+../manycore/multicycle_mon.v
+../manycore/dmbr_mon.v
+../manycore/cmp_pcxandcpx.v
+../manycore/tso_mon.v
+../manycore/lsu_mon.v
+../manycore/lsu_mon2.v
+../manycore/exu_mon.v
+../manycore/mask_mon.v
+../manycore/pc_muxsel_mon.v
+../manycore/nukeint_mon.v
+../manycore/stb_ovfl_mon.v
+../manycore/icache_mutex_mon.v
+../manycore/nc_inv_chk.v
+../manycore/tlu_mon.v
+../manycore/softint_mon.v
+../manycore/slam_init.v
+../manycore/ciop_iob.v
+../manycore/cmp_l15_messages_mon.v
+../manycore/jtag_mon.v
+../manycore/l2_mon.v
+../manycore/async_fifo_mon.v
+../manycore/iob_mon.v
+../manycore/fake_pll.v
+../manycore/fake_uart.v
+../../../design/chipset/rtl/test_end_checker.v
+metro_chipset.sv
diff --git a/piton/verif/env/metro_chipset/metro_chipset.sv.pyv b/piton/verif/env/metro_chipset/metro_chipset.sv.pyv
new file mode 100644
index 00000000..8e775f05
--- /dev/null
+++ b/piton/verif/env/metro_chipset/metro_chipset.sv.pyv
@@ -0,0 +1,1044 @@
+// Modified by Princeton University on June 9th, 2015
+// ========== Copyright Header Begin ==========================================
+//
+// OpenSPARC T1 Processor File: cmp_top.v
+// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
+// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
+//
+// The above named program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU General Public
+// License version 2 as published by the Free Software Foundation.
+//
+// The above named program is distributed in the hope that it will be
+// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// General Public License for more details.
+//
+// You should have received a copy of the GNU General Public
+// License along with this work; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+//
+// ========== Copyright Header End ============================================
+////////////////////////////////////////////////////////
+
+`ifndef USE_TEST_TOP // don't compile if user wants to use deprecated TOPs
+`include "sys.h"
+`include "iop.h"
+`include "cross_module.tmp.h"
+`include "ifu.tmp.h"
+`include "define.tmp.h"
+`include "piton_system.vh"
+`include "jtag.vh"
+
+
+<%
+    from pyhplib import *
+%>
+
+<%
+DMBR_BIN_NUM = 10
+import pyhplib
+from riscvlib import *
+import os
+from pyhplib import *
+import riscvlib
+import time
+
+if PITON_ARIANE:
+  devices = pyhplib.ReadDevicesXMLFile()
+  core = "Ariane"
+
+  # just use a default frequency for device tree generation if not defined
+  sysFreq = 50000000
+  if 'CONFIG_SYS_FREQ' in os.environ:
+    sysFreq = int(os.environ['CONFIG_SYS_FREQ'])
+
+  timeStamp = time.strftime("%b %d %Y %H:%M:%S", time.localtime())
+  gen_riscv_dts(devices, PITON_X_TILES*PITON_Y_TILES, sysFreq, sysFreq/128, sysFreq, os.environ['DV_ROOT']+"/design/chipset/rv64_platform/bootrom/", timeStamp) 
+  get_bootrom_info(devices, PITON_X_TILES*PITON_Y_TILES, sysFreq, sysFreq/128, sysFreq, os.environ['DV_ROOT']+"/design/chipset/rv64_platform/bootrom/", timeStamp)
+  
+ 
+
+if PITON_SARG:
+  devices = pyhplib.ReadDevicesXMLFile()
+  core = "Sargantana"
+   
+  # just use a default frequency for device tree generation if not defined
+  sysFreq = 50000000
+  if 'CONFIG_SYS_FREQ' in os.environ:
+    sysFreq = int(os.environ['CONFIG_SYS_FREQ'])
+
+  timeStamp = time.strftime("%b %d %Y %H:%M:%S", time.localtime())
+  
+  gen_riscv_dts(devices, PITON_X_TILES*PITON_Y_TILES, sysFreq, sysFreq/128, sysFreq, os.environ['DV_ROOT']+"/design/chipset/rv64_platform/bootrom/", timeStamp) 
+ 
+  
+  get_bootrom_info(devices, PITON_X_TILES*PITON_Y_TILES, sysFreq, sysFreq/128, sysFreq, os.environ['DV_ROOT']+"/design/chipset/rv64_platform/bootrom/", timeStamp)
+  
+%>
+
+`ifdef PITON_DPI
+import "DPI-C" function longint read_64b_call (input longint addr);
+import "DPI-C" function void write_64b_call (input longint addr, input longint data);
+import "DPI-C" function int drive_iob ();
+import "DPI-C" function int get_cpx_word (int index);
+import "DPI-C" function void report_pc (longint thread_pc);
+import "DPI-C" function void init_jbus_model_call(string str, int oram);
+
+`ifndef VERILATOR
+// MPI Yummy functions
+import "DPI-C" function void initialize();
+import "DPI-C" function void finalize();
+import "DPI-C" function int getRank();
+import "DPI-C" function int getSize();
+
+import "DPI-C" function void mpi_send_yummy(input byte unsigned message, input int dest, input int rank, input int flag);
+import "DPI-C" function byte unsigned mpi_receive_yummy(input int origin, input int flag);
+
+import "DPI-C" function longint unsigned mpi_receive_data(input int origin, output byte unsigned valid, input int flag);
+import "DPI-C" function void mpi_send_data(input longint unsigned data, input byte unsigned valid, input int dest, input int rank, input int flag);
+
+import "DPI-C" function void barrier();
+//add metro_stuff
+`endif // ifndef VERILATOR
+`endif // ifdef PITON_DPI
+
+
+
+
+
+
+`timescale 1ps/1ps
+module metro_chipset (
+`ifdef VERILATOR
+	core_ref_clk,
+
+	sys_rst_n,
+
+	pll_rst_n,
+
+	clk_en,
+
+	pll_bypass,
+	pll_rangea,
+	pll_lock,
+	clk_mux_sel,
+	async_mux,
+	diag_done,
+	ok_iob,
+
+	noc_chanel_in	,
+	noc_chanel_out	,
+	smart_max,
+    flit_o_cnts,
+    flit_i_cnts,
+
+/*
+input wire                            processor_offchip_noc1_valid,
+input wire [`PITON_NOC1_WIDTH-1:0]    processor_offchip_noc1_data,
+output wire                           processor_offchip_noc1_yummy,
+input wire                            processor_offchip_noc2_valid,
+input wire [`PITON_NOC2_WIDTH-1:0]    processor_offchip_noc2_data,
+output wire                           processor_offchip_noc2_yummy,
+input wire                            processor_offchip_noc3_valid,
+input wire [`PITON_NOC3_WIDTH-1:0]    processor_offchip_noc3_data,
+output wire                           processor_offchip_noc3_yummy,
+
+output wire                           offchip_processor_noc1_valid,
+output wire [`PITON_NOC1_WIDTH-1:0]   offchip_processor_noc1_data,
+input  wire                           offchip_processor_noc1_yummy,
+output wire                           offchip_processor_noc2_valid,
+output wire [`PITON_NOC2_WIDTH-1:0]   offchip_processor_noc2_data,
+input  wire                           offchip_processor_noc2_yummy,
+output wire                           offchip_processor_noc3_valid,
+output wire [`PITON_NOC3_WIDTH-1:0]   offchip_processor_noc3_data,
+input  wire                           offchip_processor_noc3_yummy,
+*/
+
+	good_end,
+	bad_end,
+	test_ena
+`endif
+);
+
+
+`ifdef PITON_PRONOC
+	`include "pronoc_def.v"
+ 	`NOC_CONF
+	
+	typedef struct packed {	
+		smartflit_chanel_t  [2:0] smartflit_chanel;  		
+	} noc_chanel_t;
+
+`else
+
+	typedef struct packed {	
+		logic  [`PITON_NOC1_WIDTH-1:0] data1;
+		logic  [`PITON_NOC2_WIDTH-1:0] data2;
+		logic  [`PITON_NOC3_WIDTH-1:0] data3;
+		logic  [2:0] valid;
+		logic  [2:0] yummy;		
+	} noc_chanel_t;
+
+`endif
+
+localparam NOC_CHANEL_w = $bits(noc_chanel_t); 	
+
+
+`ifdef VERILATOR
+
+input reg                             core_ref_clk;
+input reg                             sys_rst_n;
+input reg                             pll_rst_n;
+input reg                             clk_en;
+input reg                             pll_bypass;
+input reg [4:0]                       pll_rangea;
+output wire                           pll_lock;
+input reg [1:0]                       clk_mux_sel;
+input reg                             async_mux;
+input                                 diag_done;
+input                                 ok_iob;
+
+input  noc_chanel_t noc_chanel_in;
+output noc_chanel_t noc_chanel_out;
+output [31 : 0] smart_max;
+output [63 : 0]   flit_o_cnts,flit_i_cnts;
+
+
+output wire                           good_end;
+output wire                           bad_end;
+input  wire                           test_ena;
+`endif
+
+
+
+
+
+
+
+
+
+//////////////////////
+// Type Declarations
+//////////////////////
+
+`ifndef VERILATOR
+reg                             core_ref_clk;
+reg                             sys_rst_n;
+reg                             pll_rst_n;
+reg                             clk_en;
+reg                             pll_bypass;
+reg [4:0]                       pll_rangea;
+wire                            pll_lock = 1'b1;
+reg [1:0]                       clk_mux_sel;
+reg                             async_mux;
+// For simulation only, monitor stuff.  Only cross-module referenced
+// do not delete.
+reg                             diag_done;
+`endif // ifndef VERILATOR
+
+reg                             io_clk;
+reg                             jtag_clk;
+reg                             chipset_clk_osc_p;
+reg                             chipset_clk_osc_n;
+reg                             chipset_clk_osc;
+reg                             chipset_clk;
+reg                             mem_clk;
+reg                             spi_sys_clk;
+reg                             chipset_passthru_clk_p;
+reg                             chipset_passthru_clk_n;
+reg                             passthru_clk_osc_p;
+reg                             passthru_clk_osc_n;
+reg                             passthru_chipset_clk_p;
+reg                             passthru_chipset_clk_n;
+
+reg                             jtag_rst_l;
+
+reg                             jtag_modesel;
+reg                             jtag_datain;
+wire                            jtag_dataout;
+
+
+// For simulation only, monitor stuff.  Only cross-module referenced
+// do not delete.
+reg                             fail_flag;
+reg [3:0]                       stub_done;
+reg [3:0]                       stub_pass;
+
+`ifndef VERILATOR
+reg                       processor_offchip_noc1_valid;
+reg [`PITON_NOC1_WIDTH-1:0] processor_offchip_noc1_data;
+reg                       processor_offchip_noc1_yummy;
+reg                       processor_offchip_noc2_valid;
+reg [`PITON_NOC2_WIDTH-1:0] processor_offchip_noc2_data;
+reg                       processor_offchip_noc2_yummy;
+reg                       processor_offchip_noc3_valid;
+reg [`PITON_NOC3_WIDTH-1:0] processor_offchip_noc3_data;
+reg                       processor_offchip_noc3_yummy;
+
+reg                       offchip_processor_noc1_valid;
+reg [`PITON_NOC1_WIDTH-1:0] offchip_processor_noc1_data;
+reg                       offchip_processor_noc1_yummy;
+reg                       offchip_processor_noc2_valid;
+reg [`PITON_NOC2_WIDTH-1:0] offchip_processor_noc2_data;
+reg                       offchip_processor_noc2_yummy;
+reg                       offchip_processor_noc3_valid;
+reg [`PITON_NOC3_WIDTH-1:0] offchip_processor_noc3_data;
+reg                       offchip_processor_noc3_yummy;
+
+`else 
+
+wire                            processor_offchip_noc1_valid;
+wire [`PITON_NOC1_WIDTH-1:0]      processor_offchip_noc1_data;
+wire                            processor_offchip_noc1_yummy;
+wire                            processor_offchip_noc2_valid;
+wire [`PITON_NOC2_WIDTH-1:0]      processor_offchip_noc2_data;
+wire                            processor_offchip_noc2_yummy;
+wire                            processor_offchip_noc3_valid;
+wire [`PITON_NOC3_WIDTH-1:0]      processor_offchip_noc3_data;
+wire                            processor_offchip_noc3_yummy;
+
+wire                            offchip_processor_noc1_valid;
+wire [`PITON_NOC1_WIDTH-1:0]      offchip_processor_noc1_data;
+wire                            offchip_processor_noc1_yummy;
+wire                            offchip_processor_noc2_valid;
+wire [`PITON_NOC2_WIDTH-1:0]      offchip_processor_noc2_data;
+wire                            offchip_processor_noc2_yummy;
+wire                            offchip_processor_noc3_valid;
+wire [`PITON_NOC3_WIDTH-1:0]      offchip_processor_noc3_data;
+wire                            offchip_processor_noc3_yummy;
+
+
+
+`endif // VERILATOR
+
+////////////////////
+// Simulated Clocks
+////////////////////
+
+`ifndef VERILATOR
+`ifndef USE_FAKE_PLL_AND_CLKMUX
+always #5000 core_ref_clk = ~core_ref_clk;                      // 100MHz
+`else
+always #500 core_ref_clk = ~core_ref_clk;                       // 1000MHz
+`endif
+`endif
+
+`ifndef VERILATOR
+`ifndef SYNC_MUX
+always #1429 io_clk = ~io_clk;                                  // 350MHz
+`else
+always @ * io_clk = core_ref_clk;
+`endif
+`endif
+
+`ifndef VERILATOR
+always #50000 jtag_clk = ~jtag_clk;                             // 10MHz
+
+always #2500 chipset_clk_osc_p = ~chipset_clk_osc_p;            // 200MHz
+always @ * chipset_clk_osc_n = ~chipset_clk_osc_p;
+
+always #5000 chipset_clk_osc = ~chipset_clk_osc;                // 100MHz
+
+always #2500 chipset_clk = ~chipset_clk;                        // 200MHz
+
+always #3333 passthru_clk_osc_p = ~passthru_clk_osc_p;          // 150MHz
+always @ * passthru_clk_osc_n = ~passthru_clk_osc_p;
+
+always #1429 passthru_chipset_clk_p = ~passthru_chipset_clk_p;  // 350MHz
+always @ * passthru_chipset_clk_n = ~passthru_chipset_clk_p;
+
+always #1000 mem_clk = ~mem_clk;                                // 500MHz
+
+always #25000 spi_sys_clk = ~spi_sys_clk;                       // 20MHz
+`else
+
+always @(*)    chipset_clk = core_ref_clk;
+
+`endif
+
+
+initial begin 
+ $display("Cache Configuration:");
+ $display("\tL2   size:%d,\t associativity:%d",`L2_SIZE,`L2_WAYS);
+ $display("\tL1.5 size:%d,\t associativity:%d",`CONFIG_L15_SIZE,`CONFIG_L15_ASSOCIATIVITY);
+ $display("\tL1D  size:%d,\t associativity:%d",`CONFIG_L1D_SIZE,`CONFIG_L1D_ASSOCIATIVITY);
+ $display("\tL1I  size:%d,\t associativity:%d",`CONFIG_L1I_SIZE,`CONFIG_L1I_ASSOCIATIVITY);
+ 
+ $display("NoC Configuration:");
+ $display("\tNOC1 Width:%d",`PITON_NOC1_WIDTH);
+ $display("\tNOC2 Width:%d",`PITON_NOC2_WIDTH);
+ $display("\tNOC3 Width:%d",`PITON_NOC3_WIDTH);
+`ifdef PITON_NO_CHIP_BRIDGE
+    $display("**Warning: Chip Bridge Disable"); 
+    $display("\t     Only one clock is used in the system"); 
+    $display("Clock frequency = 1000 MHz"); 
+`endif // PITON_NO_CHIP_BRIDGE
+end
+
+
+
+////////////////////////////////////////////////////////
+// SIMULATED BOOT SEQUENCE
+////////////////////////////////////////////////////////
+
+int rank;
+int size;
+int dest;
+byte unsigned valid_aux;
+
+int YUMMY_NOC_1 ;
+int DATA_NOC_1  ;
+int YUMMY_NOC_2 ;
+int DATA_NOC_2  ;
+int YUMMY_NOC_3 ;
+int DATA_NOC_3  ;
+
+`ifndef VERILATOR
+initial
+begin
+    $dumpfile("metro_chipset.vcd");
+    $dumpvars(0, metro_chipset);
+
+    YUMMY_NOC_1 = 0;
+    DATA_NOC_1  = 1;
+    YUMMY_NOC_2 = 2;
+    DATA_NOC_2  = 3;
+    YUMMY_NOC_3 = 4;
+    DATA_NOC_3  = 5;
+
+    //metro initialization
+    initialize();
+    //barrier();
+    rank = getRank();
+    size = getSize();
+    $display("METRO_CHIPSET INITIALIZING...");
+    $display("size: %d", size);
+    $display("rank: %d", rank);
+    if (rank==0) begin
+            dest = 1;
+    end else begin
+            dest = 0;
+    end
+    // These are not referenced elsewhere in this module,
+    // but are cross referenced from monitor.v.pyv.  Do not
+    // delete
+    fail_flag = 1'b0;
+    stub_done = 4'b0;
+    stub_pass = 4'b0;
+
+    // Clocks initial value
+    core_ref_clk = 1'b0;
+    io_clk = 1'b0;
+    jtag_clk = 1'b0;
+    chipset_clk_osc_p = 1'b0;
+    chipset_clk_osc_n = 1'b1;
+    chipset_clk_osc = 1'b0;
+    chipset_clk = 1'b0;
+    mem_clk = 1'b0;
+    spi_sys_clk = 1'b0;
+    chipset_passthru_clk_p = 1'b0;
+    chipset_passthru_clk_n = 1'b1;
+    passthru_clk_osc_p = 1'b0;
+    passthru_clk_osc_n = 1'b1;
+    passthru_chipset_clk_p = 1'b0;
+    passthru_chipset_clk_n = 1'b1;
+
+    // Resets are held low at start of boot
+    sys_rst_n = 1'b0;
+    jtag_rst_l = 1'b0;
+    pll_rst_n = 1'b0;
+
+    // Mostly DC signals set at start of boot
+    clk_en = 1'b0;
+    if ($test$plusargs("pll_en"))
+    begin
+        // PLL is disabled by default
+        pll_bypass = 1'b0; // trin: pll_bypass is a switch in the pll; not reliable
+        clk_mux_sel[1:0] = 2'b10; // selecting pll
+    end
+    else
+    begin
+        pll_bypass = 1'b1; // trin: pll_bypass is a switch in the pll; not reliable
+        clk_mux_sel[1:0] = 2'b00; // selecting ref clock
+    end
+    // rangeA = x10 ? 5'b1 : x5 ? 5'b11110 : x2 ? 5'b10100 : x1 ? 5'b10010 : x20 ? 5'b0 : 5'b1;
+    pll_rangea = 5'b00001; // 10x ref clock
+    // pll_rangea = 5'b11110; // 5x ref clock
+    // pll_rangea = 5'b00000; // 20x ref clock
+
+    // JTAG simulation currently not supported here
+    jtag_modesel = 1'b1;
+    jtag_datain = 1'b0;
+
+`ifndef SYNC_MUX
+    async_mux = 1'b1;
+`else
+    async_mux = 1'b0;
+`endif
+
+    // Init JBUS model plus some ORAM stuff
+    if ($test$plusargs("oram"))
+    begin
+`ifndef PITON_DPI
+        $init_jbus_model("mem.image", 1);
+`else // ifndef PITON_DPI
+        init_jbus_model_call("mem.image", 1);
+`endif // ifndef PITON_DPI
+`ifndef METRO_CHIPSET
+`ifndef __ICARUS__
+        force system.chip.ctap_oram_clk_en = 1'b1;
+`endif
+`endif //METRO_CHIPSET
+    end
+    else
+    begin
+`ifndef PITON_DPI
+        $init_jbus_model("mem.image", 0);
+`else // ifndef PITON_DPI
+        $display("init_jbus_model_call");
+        init_jbus_model_call("mem.image", 0);
+`endif // ifndef PITON_DPI
+    end
+
+    processor_offchip_noc1_valid = 0;
+    processor_offchip_noc1_data  = 0;
+    offchip_processor_noc1_yummy = 0;
+    processor_offchip_noc2_valid = 0;
+    processor_offchip_noc2_data  = 0;
+    offchip_processor_noc2_yummy = 0;
+    processor_offchip_noc3_valid = 0;
+    processor_offchip_noc3_data  = 0;
+    offchip_processor_noc3_yummy = 0;
+
+    // Reset PLL for 100 cycles
+    repeat(100)@(posedge core_ref_clk);
+    pll_rst_n = 1'b1;
+
+    // Wait for PLL lock
+    wait( pll_lock == 1'b1 );
+
+    // After 10 cycles turn on chip-level clock enable
+    repeat(10)@(posedge `CHIP_INT_CLK);
+    clk_en = 1'b1;
+
+    // After 100 cycles release reset
+    repeat(100)@(posedge `CHIP_INT_CLK);
+    sys_rst_n = 1'b1;
+    jtag_rst_l = 1'b1;
+
+    // Wait for SRAM init
+    // trin: 5000 cycles is about the lowest for 64KB L2
+    // 128KB L2 requires at least 10000
+    repeat(5000)@(posedge `CHIP_INT_CLK); // trin: supports at least 512KB L2 per-tile
+
+    diag_done = 1'b1;
+`ifndef METRO_CHIPSET
+`ifndef PITONSYS_IOCTRL
+    // Signal fake IOB to send wake up packet to first tile
+    cmp_top.system.chipset.chipset_impl.ciop_fake_iob.ok_iob = 1'b1;
+`endif // endif PITONSYS_IOCTRL
+`endif // ifndef METRO_CHIPSET
+
+//ok_iob = 1;
+
+//metro code
+
+
+// send data
+$display("CHIPSET INITIALIZED");
+@(posedge core_ref_clk);
+for(int i = 0; i < 350000; i = i + 1)
+begin
+    #500;
+// send data
+    //$display("sending_chipset");
+    mpi_send_data(offchip_processor_noc1_data, offchip_processor_noc1_valid, dest, rank, DATA_NOC_1);
+    // send yummy
+    mpi_send_yummy(processor_offchip_noc1_yummy, dest, rank, YUMMY_NOC_1);
+
+    // send data
+    mpi_send_data(offchip_processor_noc2_data, offchip_processor_noc2_valid, dest, rank, DATA_NOC_2);
+    // send yummy
+    mpi_send_yummy(processor_offchip_noc2_yummy, dest, rank, YUMMY_NOC_2);
+
+    // send data
+    mpi_send_data(offchip_processor_noc3_data, offchip_processor_noc3_valid, dest, rank, DATA_NOC_3);
+    // send yummy
+    mpi_send_yummy(processor_offchip_noc3_yummy, dest, rank, YUMMY_NOC_3);
+    //$display("receiving_chipset");
+    // receive data
+    processor_offchip_noc1_data = mpi_receive_data(dest, valid_aux, DATA_NOC_1);
+    processor_offchip_noc1_valid = valid_aux;
+    // receive yummy
+    offchip_processor_noc1_yummy = mpi_receive_yummy(dest, YUMMY_NOC_1);
+
+    processor_offchip_noc2_data = mpi_receive_data(dest, valid_aux, DATA_NOC_2);
+    processor_offchip_noc2_valid = valid_aux;
+    // receive yummy
+    offchip_processor_noc2_yummy = mpi_receive_yummy(dest, YUMMY_NOC_2);
+
+    processor_offchip_noc3_data = mpi_receive_data(dest, valid_aux, DATA_NOC_3);
+    processor_offchip_noc3_valid = valid_aux;
+    // receive yummy
+    offchip_processor_noc3_yummy = mpi_receive_yummy(dest, YUMMY_NOC_3);
+    #500;
+end
+$display("Trace done: METRO_CHIPSET");
+finalize();
+$finish;
+end
+`endif
+
+`ifdef VERILATOR
+`ifndef METRO_CHIPSET
+always @(posedge ok_iob) begin
+    cmp_top.system.chipset.chipset_impl.ciop_fake_iob.ok_iob = 1'b1;
+end
+`endif // ifndef METRO_CHIPSET
+`endif
+
+////////////////////////////////////////////////////////
+// SYNTHESIZABLE CHIPSET
+///////////////////////////////////////////////////////
+
+/*
+integer j;
+always @( posedge core_ref_clk )begin
+		for(j=0;j<3;j++) begin 
+			if(noc_chanel_in.valid[j] )  $display("noc%d_dat_in=%h",j,noc_chanel_in .data[j]); 
+			if(noc_chanel_out.valid[j] )  $display("noc%d_dat_out=%h",j,noc_chanel_out .data[j]); 
+		end
+end
+*/
+
+/*
+always @(posedge core_ref_clk)begin 
+	if(processor_offchip_noc1_valid) $display("noc1_dat_in=%h",processor_offchip_noc1_data); 
+	if(processor_offchip_noc2_valid) $display("noc2_dat_in=%h",processor_offchip_noc2_data); 
+	if(processor_offchip_noc3_valid) $display("noc3_dat_in=%h",processor_offchip_noc3_data); 
+	
+end
+*/
+
+`ifdef PITON_PRONOC
+
+
+assign smart_max = SMART_MAX;
+
+localparam CHIP_SET_ID = T1*T2*T3+2*T1; // endp connected  of west port of router 0-0
+localparam CHIP_SET_PORT = 3; //west port of first router
+
+//off chip connection 
+
+//NOC1
+	wire [RAw-1 : 0] tile_0_0_current_r_addr1;
+	wire pronoc_reset = ~sys_rst_n;
+	
+	
+    piton_to_pronoc_wrapper #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(1),.CHIP_SET_PORT(CHIP_SET_PORT)) pi2pr_wrapper1
+	(
+	.default_chipid({`NOC_CHIPID_WIDTH{1'b0}}), .default_coreid_x({`NOC_X_WIDTH{1'b0}}), .default_coreid_y({`NOC_Y_WIDTH{1'b0}}), .flat_tileid({`JTAG_FLATID_WIDTH{1'b0}}),	
+	.reset(pronoc_reset),
+    .clk (core_ref_clk),
+	.dataIn(offchip_processor_noc1_data),
+    .validIn(offchip_processor_noc1_valid),
+    .yummyIn(processor_offchip_noc1_yummy),
+	.chan_out(noc_chanel_out.smartflit_chanel[0]),
+	.current_r_addr_i(tile_0_0_current_r_addr1)
+	);	
+
+	pronoc_to_piton_wrapper  #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(1),.PORT_NUM(CHIP_SET_PORT)) pr2pi_wrapper1
+	(
+	.default_chipid({`NOC_CHIPID_WIDTH{1'b0}}), .default_coreid_x({`NOC_X_WIDTH{1'b0}}), .default_coreid_y({`NOC_Y_WIDTH{1'b0}}), .flat_tileid({`JTAG_FLATID_WIDTH{1'b0}}),	
+	.reset(pronoc_reset),
+    .clk (core_ref_clk),
+	.dataOut(processor_offchip_noc1_data),
+	.validOut(processor_offchip_noc1_valid),
+	.yummyOut(offchip_processor_noc1_yummy),
+	.chan_in(noc_chanel_in.smartflit_chanel[0]),
+	.current_r_addr_o(tile_0_0_current_r_addr1)
+	);	
+
+//NOC2
+     wire [RAw-1 : 0] tile_0_0_current_r_addr2;
+    
+     piton_to_pronoc_wrapper #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(2),.CHIP_SET_PORT(CHIP_SET_PORT)) pi2pr_wrapper2
+	(
+	.default_chipid({`NOC_CHIPID_WIDTH{1'b0}}), .default_coreid_x({`NOC_X_WIDTH{1'b0}}), .default_coreid_y({`NOC_Y_WIDTH{1'b0}}), .flat_tileid({`JTAG_FLATID_WIDTH{1'b0}}),	
+	.reset(pronoc_reset),
+    .clk (core_ref_clk),
+	.dataIn(offchip_processor_noc2_data),
+    .validIn(offchip_processor_noc2_valid),
+    .yummyIn(processor_offchip_noc2_yummy),
+	.chan_out(noc_chanel_out.smartflit_chanel[1]),
+	.current_r_addr_i(tile_0_0_current_r_addr2)
+	);	
+
+	pronoc_to_piton_wrapper  #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(2),.PORT_NUM(CHIP_SET_PORT)) pr2pi_wrapper2
+	(
+	.default_chipid({`NOC_CHIPID_WIDTH{1'b0}}), .default_coreid_x({`NOC_X_WIDTH{1'b0}}), .default_coreid_y({`NOC_Y_WIDTH{1'b0}}), .flat_tileid({`JTAG_FLATID_WIDTH{1'b0}}),	
+	.reset(pronoc_reset),
+    .clk (core_ref_clk),
+	.dataOut(processor_offchip_noc2_data),
+	.validOut(processor_offchip_noc2_valid),
+	.yummyOut(offchip_processor_noc2_yummy),
+	.chan_in(noc_chanel_in.smartflit_chanel[1]),
+	.current_r_addr_o(tile_0_0_current_r_addr2)
+	);	
+
+
+//NOC3
+
+	wire [RAw-1 : 0] tile_0_0_current_r_addr3;
+
+     piton_to_pronoc_wrapper #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(3),.CHIP_SET_PORT(CHIP_SET_PORT))  pi2pr_wrapper3
+	(
+	.default_chipid({`NOC_CHIPID_WIDTH{1'b0}}), .default_coreid_x({`NOC_X_WIDTH{1'b0}}), .default_coreid_y({`NOC_Y_WIDTH{1'b0}}), .flat_tileid({`JTAG_FLATID_WIDTH{1'b0}}),	
+	.reset(pronoc_reset),
+    .clk (core_ref_clk),
+	.dataIn(offchip_processor_noc3_data),
+    .validIn(offchip_processor_noc3_valid),
+    .yummyIn(processor_offchip_noc3_yummy),
+	.chan_out(noc_chanel_out.smartflit_chanel[2]),
+	.current_r_addr_i(tile_0_0_current_r_addr3)
+	);	
+
+	pronoc_to_piton_wrapper  #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(3),.PORT_NUM(CHIP_SET_PORT)) pr2pi_wrapper3
+	(
+	.default_chipid({`NOC_CHIPID_WIDTH{1'b0}}), .default_coreid_x({`NOC_X_WIDTH{1'b0}}), .default_coreid_y({`NOC_Y_WIDTH{1'b0}}), .flat_tileid({`JTAG_FLATID_WIDTH{1'b0}}),	
+	.reset(pronoc_reset),
+    .clk (core_ref_clk),
+	.dataOut(processor_offchip_noc3_data),
+	.validOut(processor_offchip_noc3_valid),
+	.yummyOut(offchip_processor_noc3_yummy),
+	.chan_in(noc_chanel_in.smartflit_chanel[2]),
+	.current_r_addr_o(tile_0_0_current_r_addr3)
+	);	
+
+
+
+
+
+`else
+
+	assign smart_max = 0;
+
+    assign processor_offchip_noc1_valid  =noc_chanel_in.valid [0]      ;
+    assign processor_offchip_noc1_data   =noc_chanel_in.data1      ;
+    assign noc_chanel_out.yummy[0]       =processor_offchip_noc1_yummy ;
+                                         
+    assign processor_offchip_noc2_valid  =noc_chanel_in.valid [1]      ;
+    assign processor_offchip_noc2_data   =noc_chanel_in.data2      ;
+    assign noc_chanel_out.yummy[1]       =processor_offchip_noc2_yummy ;
+                                         
+    assign processor_offchip_noc3_valid  =noc_chanel_in.valid [2]      ;
+    assign processor_offchip_noc3_data   =noc_chanel_in.data3      ;
+    assign noc_chanel_out.yummy[2]       =processor_offchip_noc3_yummy ;
+                                         
+    assign noc_chanel_out.valid[0]       =offchip_processor_noc1_valid ;
+    assign noc_chanel_out.data1       =offchip_processor_noc1_data  ;
+	assign offchip_processor_noc1_yummy  =noc_chanel_in.yummy [0]      ;
+	                                     
+	assign noc_chanel_out.valid[1]       =offchip_processor_noc2_valid ;
+    assign noc_chanel_out.data2       =offchip_processor_noc2_data  ;
+	assign offchip_processor_noc2_yummy  =noc_chanel_in.yummy [1]      ;
+	                                     
+	assign noc_chanel_out.valid[2]       =offchip_processor_noc3_valid ;
+    assign noc_chanel_out.data3     =offchip_processor_noc3_data  ;
+	assign offchip_processor_noc3_yummy  =noc_chanel_in.yummy [2]      ;
+	
+`endif
+  
+
+
+
+
+
+chipset chipset(
+    .chipset_clk(core_ref_clk),
+
+    .rst_n(sys_rst_n),
+
+    .piton_prsnt_n(1'b0),
+    .piton_ready_n(1'b0),
+
+`ifndef PITON_BOARD
+    .chipset_prsnt_n (),
+`endif  // PITON_BOARD
+
+    // Synchronous with core_ref_clk (same as io_clk in this case) and no virtual channels
+    .processor_offchip_noc1_valid   (processor_offchip_noc1_valid),
+    .processor_offchip_noc1_data    (processor_offchip_noc1_data),
+    .processor_offchip_noc1_yummy   (processor_offchip_noc1_yummy),
+    .processor_offchip_noc2_valid   (processor_offchip_noc2_valid),
+    .processor_offchip_noc2_data    (processor_offchip_noc2_data),
+    .processor_offchip_noc2_yummy   (processor_offchip_noc2_yummy),
+    .processor_offchip_noc3_valid   (processor_offchip_noc3_valid),
+    .processor_offchip_noc3_data    (processor_offchip_noc3_data),
+    .processor_offchip_noc3_yummy   (processor_offchip_noc3_yummy),
+
+    .offchip_processor_noc1_valid   (offchip_processor_noc1_valid),
+    .offchip_processor_noc1_data    (offchip_processor_noc1_data),
+    .offchip_processor_noc1_yummy   (offchip_processor_noc1_yummy),
+    .offchip_processor_noc2_valid   (offchip_processor_noc2_valid),
+    .offchip_processor_noc2_data    (offchip_processor_noc2_data),
+    .offchip_processor_noc2_yummy   (offchip_processor_noc2_yummy),
+    .offchip_processor_noc3_valid   (offchip_processor_noc3_valid),
+    .offchip_processor_noc3_data    (offchip_processor_noc3_data),
+    .offchip_processor_noc3_yummy   (offchip_processor_noc3_yummy),
+    
+`ifdef PITON_EXTRA_MEMS //extra mems are connected using metro_fake_mem.  
+    .processor_mcx_noc2_data ( ),
+    .processor_mcx_noc2_valid( ),
+    .processor_mcx_noc2_yummy( ),
+
+    .mcx_processor_noc3_data ( ),
+    .mcx_processor_noc3_valid( ),
+    .mcx_processor_noc3_yummy( ),
+`endif
+    
+
+    // DRAM and I/O interfaces
+`ifndef PITONSYS_NO_MC
+`ifdef PITON_FPGA_MC_DDR3
+    // FPGA DDR MC interface, currently not supported in simulation
+    .init_calib_complete(),
+    .ddr_addr(),
+    .ddr_ba(),
+    .ddr_cas_n(),
+    .ddr_ck_n(),
+    .ddr_ck_p(),
+    .ddr_cke(),
+    .ddr_ras_n(),
+    .ddr_reset_n(),
+    .ddr_we_n(),
+    .ddr_dq(),
+    .ddr_dqs_n(),
+    .ddr_dqs_p(),
+    .ddr_cs_n(),
+    .ddr_dm(),
+    .ddr_odt(),
+`endif // endif PITON_FPGA_MC_DDR3
+`endif // endif PITONSYS_NO_MC
+
+`ifdef PITONSYS_IOCTRL
+`ifdef PITONSYS_UART
+    // UART interface for bootloading and
+    // serial port interface.  Currently
+    // not supported in simulation
+    .uart_tx(),
+    .uart_rx(),
+`endif // endif PITONSYS_UART
+
+`ifdef PITONSYS_SPI
+    // SPI interface for boot device and disk.
+    // Currently not supported in simulation
+    .spi_data_in(),
+    .spi_data_out(),
+    .spi_clk_out(),
+    .spi_cs_n(),
+`endif // endif PITONSYS_SPI
+`endif // endif PITONSYS_IOCTRL
+
+    // Switches
+`ifdef PITON_NOC_POWER_CHIPSET_TEST
+    .sw({4'bz, 4'd`PITON_NOC_POWER_CHIPSET_TEST_HOP_COUNT}),
+`else // ifndef PITON_NOC_POWER_CHIPSET_TEST
+    .sw(),
+`endif // endif PITON_NOC_POWER_CHIPSET_TEST
+
+    // Do not provide any functionality
+    .leds()
+
+`ifdef PITON_ARIANE
+    ,
+    // Debug
+    .ndmreset_o                     (                   ), // non-debug module reset
+    .dmactive_o                     (                   ), // debug module is active
+    .debug_req_o                    (                   ), // async debug request
+    .unavailable_i                  ( '0                ), // communicate whether the hart is unavailable (e.g.: power down)
+    // JTAG
+    .tck_i                          ( '0                    ),
+    .tms_i                          ( '0                    ),
+    .trst_ni                        ( '0                    ),
+    .td_i                           ( '0                    ),
+    .td_o                           (                        ),
+    .tdo_oe_o                       (                            ),
+    //CLINT
+    .rtc_i                          ( '0                        ), // Real-time clock in (usually 32.768 kHz)
+    .timer_irq_o                    (                   ), // Timer interrupts
+    .ipi_o                          (                   ), // software interrupt (a.k.a inter-process-interrupt)
+    // PLIC
+    .irq_o                          (                  )  // level sensitive IR lines, mip & sip (async)
+`endif
+`ifdef PITON_LAGARTO
+    ,
+    // Debug
+    .ndmreset_o                     (                   ), // non-debug module reset
+    .dmactive_o                     (                   ), // debug module is active
+    .debug_req_o                    (                   ), // async debug request
+    .unavailable_i                  ( '0                ), // communicate whether the hart is unavailable (e.g.: power down)
+    // JTAG
+    .tck_i                          ( '0                    ),
+    .tms_i                          ( '0                    ),
+    .trst_ni                        ( '0                    ),
+    .td_i                           ( '0                    ),
+    .td_o                           (                        ),
+    .tdo_oe_o                       (                            ),
+    //CLINT
+    .rtc_i                          ( '0                        ), // Real-time clock in (usually 32.768 kHz)
+    .timer_irq_o                    (                   ), // Timer interrupts
+    .ipi_o                          (                   ), // software interrupt (a.k.a inter-process-interrupt)
+    // PLIC
+    .irq_o                          (                  )  // level sensitive IR lines, mip & sip (async)
+`endif
+);
+
+////////////////////////////////////////////////////////
+// MONITOR STUFF
+////////////////////////////////////////////////////////
+
+
+`ifndef DISABLE_ALL_MONITORS
+
+    // this is the T1 sparc core monitor
+    monitor   monitor(
+        .clk    (`CHIP_INT_CLK),
+        .cmp_gclk  (`CHIP_INT_CLK),
+        .rst_l     (sys_rst_n)
+        );
+
+`ifndef MINIMAL_MONITORING
+
+    iob_mon iob_mon(
+        .clk (core_ref_clk)
+    );
+
+    integer j;
+
+    // Tri: slam init is taken out because it's too complicated to extend to 64 cores
+    // slam_init slam_init () ;
+
+    // The only thing that we will "slam init" is the integer register file
+    //  and it is randomized. For some reason if we left it as X's some tests will fail
+
+`ifndef METRO_CHIPSET
+`ifndef VERILATOR
+    // T1's TSO monitor, stripped of all L2 references
+    tso_mon tso_mon(`CHIP_INT_CLK, `CHIP.rst_n_inter_sync);
+`endif
+`endif //METRO_CHIPSET
+
+`ifndef METRO_CHIPSET
+    // L15 MONITORS
+    cmp_l15_messages_mon l15_messages_mon(
+        .clk (`CHIP_INT_CLK)
+        );
+
+    // DMBR MONITOR
+    dmbr_mon dmbr_mon (
+        .clk(`CHIP_INT_CLK)
+     );
+
+    //L2 MONITORS
+    `ifdef FAKE_L2
+    `else
+    l2_mon l2_mon(
+        .clk (`CHIP_INT_CLK)
+    );
+    `endif
+
+    //only works if clk == chipset_clk
+    //async_fifo_mon async_fifo_mon(
+    //   .clk (core_ref_clk)
+    //);
+
+    jtag_mon jtag_mon(
+        .clk (jtag_clk)
+        );
+
+    iob_mon iob_mon(
+        .clk (chipset_clk)
+    );
+    // sas, more debug info
+`endif // ifndef METRO_CHIPSET
+
+    // turn on sas interface after a delay
+//    reg   need_sas_sparc_intf_update;
+//    initial begin
+//        need_sas_sparc_intf_update  = 0;
+//        #12500;
+//        need_sas_sparc_intf_update  = 1;
+//    end // initial begin
+
+`ifdef PITON_OST1
+    sas_intf  sas_intf(/*AUTOINST*/
+        // Inputs
+        .clk       (`CHIP_INT_CLK),      // Templated
+        .rst_l     (`CHIP.rst_n_inter_sync));       // Templated
+`endif
+
+`ifdef PITON_OST1
+    // create sas tasks
+    sas_tasks sas_tasks(/*AUTOINST*/
+        // Inputs
+        .clk      (`CHIP_INT_CLK),      // Templated
+        .rst_l        (`CHIP.rst_n_inter_sync));       // Templated
+`endif
+
+`ifdef PITON_OST1
+    // sparc pipe flow monitor
+    sparc_pipe_flow sparc_pipe_flow(/*AUTOINST*/
+        // Inputs
+        .clk  (`CHIP_INT_CLK));         // Templated
+`endif
+
+`ifndef METRO_CHIPSET
+    manycore_network_mon network_mon (`CHIP_INT_CLK);
+`endif // ifndef METRO_CHIPSET
+
+`endif // MINIMAL_MONITORING
+`endif // DISABLE_ALL_MONITORS
+    // Alexey
+    // UART monitor
+    /*reg      prev_tx_state;
+    always @(posedge core_ref_clk)
+        prev_tx_state <= tx;
+
+    always @(posedge core_ref_clk)
+        if (prev_tx_state != tx) begin
+            $display("UART: TX changed to %d at", tx, $time);
+        end*/
+
+
+
+`ifdef VERILATOR
+`ifdef METRO_CHIPSET
+
+
+`define MY_CHIPSET  `TOP_MOD_INST.chipset_impl 
+ test_end_checker test_end_checker(
+            .clk                    (`MY_CHIPSET.chipset_clk),
+            .rst_n                  (`MY_CHIPSET.chipset_rst_n),
+
+            .src_checker_noc2_val   (`MY_CHIPSET.chip_filter_noc2_valid),
+            .src_checker_noc2_data  (`MY_CHIPSET.chip_filter_noc2_data),
+            .src_checker_noc2_rdy   (`MY_CHIPSET.filter_chip_noc2_ready),
+
+            .uart_boot_en           (test_ena),
+            .test_good_end          (good_end),
+            .test_bad_end           (bad_end)
+        );
+ 
+`endif // METRO_CHIPSET
+
+    assign flit_o_cnts=`MY_CHIPSET.fake_mem_ctrl.flit_o_cnts;
+    assign flit_i_cnts=`MY_CHIPSET.fake_mem_ctrl.flit_i_cnts;
+
+`endif // VERILATOR
+
+
+endmodule // cmp_top
+
+`endif
diff --git a/piton/verif/env/metro_chipset/metro_fake_mem.flist b/piton/verif/env/metro_chipset/metro_fake_mem.flist
new file mode 100644
index 00000000..43273f28
--- /dev/null
+++ b/piton/verif/env/metro_chipset/metro_fake_mem.flist
@@ -0,0 +1,41 @@
++incdir+../../../design/include
++incdir+../../../design/chipset/include
++incdir+../manycore
++incdir+.
+
+../manycore/cross_module.h
+../manycore/manycore_network_mon.v
+../manycore/sas_intf.v
+../manycore/monitor.v
+../manycore/sas_tasks.v
+../manycore/pc_cmp.v
+../manycore/sas_task.v
+../manycore/l_cache_mon.v
+../manycore/thrfsm_mon.v // monitors for X's in the processor states
+../manycore/sparc_pipe_flow.v
+../manycore/multicycle_mon.v
+../manycore/dmbr_mon.v
+../manycore/cmp_pcxandcpx.v
+../manycore/tso_mon.v
+../manycore/lsu_mon.v
+../manycore/lsu_mon2.v
+../manycore/exu_mon.v
+../manycore/mask_mon.v
+../manycore/pc_muxsel_mon.v
+../manycore/nukeint_mon.v
+../manycore/stb_ovfl_mon.v
+../manycore/icache_mutex_mon.v
+../manycore/nc_inv_chk.v
+../manycore/tlu_mon.v
+../manycore/softint_mon.v
+../manycore/slam_init.v
+../manycore/ciop_iob.v
+../manycore/cmp_l15_messages_mon.v
+../manycore/jtag_mon.v
+../manycore/l2_mon.v
+../manycore/async_fifo_mon.v
+../manycore/iob_mon.v
+../manycore/fake_pll.v
+../manycore/fake_uart.v
+../../../design/chipset/rtl/test_end_checker.v
+metro_fake_mem.v
diff --git a/piton/verif/env/metro_chipset/metro_fake_mem.v b/piton/verif/env/metro_chipset/metro_fake_mem.v
new file mode 100644
index 00000000..9b3eae78
--- /dev/null
+++ b/piton/verif/env/metro_chipset/metro_fake_mem.v
@@ -0,0 +1,286 @@
+`include "sys.h"
+`include "iop.h"
+`include "cross_module.tmp.h"
+`include "ifu.tmp.h"
+`include "define.tmp.h"
+`include "piton_system.vh"
+`include "jtag.vh"
+
+`ifdef PITON_DPI
+import "DPI-C" function longint read_64b_call (input longint addr);
+import "DPI-C" function void write_64b_call (input longint addr, input longint data);
+import "DPI-C" function int drive_iob ();
+import "DPI-C" function int get_cpx_word (int index);
+import "DPI-C" function void report_pc (longint thread_pc);
+import "DPI-C" function void init_jbus_model_call(string str, int oram);
+`endif
+
+
+`timescale 1ps/1ps
+module metro_fake_mem (
+	core_ref_clk,
+	sys_rst_n,
+	noc_chanel_in	,
+	noc_chanel_out	,
+    smart_max,
+    mem_valid_out,
+    mem_valid_in,
+    flit_o_cnts,
+    flit_i_cnts,
+	default_chipid,
+	default_coreid_x,
+	default_coreid_y,
+	flat_tileid
+`ifdef  PITON_LAT_FILE
+`ifdef  METRO_CHIPSET
+`ifdef  PITON_EXTRA_MEMS
+	,
+	got_rd,
+	got_wr,
+	rd_lat_in
+`endif 
+`endif 
+`endif
+);
+
+
+`ifdef PITON_PRONOC
+	`include "pronoc_def.v"
+ 	`NOC_CONF
+	
+	typedef struct packed {	
+		smartflit_chanel_t  [2:0] smartflit_chanel;  		
+	} noc_chanel_t;
+
+`else
+
+	typedef struct packed {	
+		logic  [`PITON_NOC1_WIDTH-1:0] data1;
+		logic  [`PITON_NOC2_WIDTH-1:0] data2;
+		logic  [`PITON_NOC3_WIDTH-1:0] data3;
+		logic  [2:0] valid;
+		logic  [2:0] yummy;		
+	} noc_chanel_t;
+
+`endif
+
+localparam NOC_CHANEL_w = $bits(noc_chanel_t); 	
+
+
+
+
+input                              core_ref_clk;
+input                              sys_rst_n;
+input  noc_chanel_t noc_chanel_in;
+output noc_chanel_t noc_chanel_out;
+output [31: 0 ] smart_max;
+output [63 : 0] flit_o_cnts,flit_i_cnts;
+
+output mem_valid_out;
+output mem_valid_in;
+
+input wire [13:0]                     default_chipid  ;
+input wire [7:0]                      default_coreid_x;
+input wire [7:0]                      default_coreid_y;
+input wire [`JTAG_FLATID_WIDTH-1:0]   flat_tileid;
+
+`ifdef  PITON_LAT_FILE
+`ifdef  METRO_CHIPSET
+`ifdef  PITON_EXTRA_MEMS
+	output 	got_rd,	got_wr;
+	input [31 : 0] rd_lat_in;
+`endif 
+`endif 
+`endif
+
+    wire  [`PITON_NOC2_WIDTH -1:0] processor_mcx_noc2_data ; //input
+    wire                         processor_mcx_noc2_valid; //input
+    wire                         processor_mcx_noc2_yummy; //output
+
+    wire  [`PITON_NOC3_WIDTH -1:0] mcx_processor_noc3_data; //output
+    wire                         mcx_processor_noc3_valid;//output
+    wire                         mcx_processor_noc3_yummy;//input
+    
+    wire  [`PITON_NOC2_WIDTH -1:0] intf_mcx_data_noc2; //input
+    wire                         intf_mcx_val_noc2; //input
+    wire                         intf_mcx_rdy_noc2; //output
+
+    wire  [`PITON_NOC3_WIDTH -1:0] mcx_intf_data_noc3; //output
+    wire                         mcx_intf_val_noc3;  //output
+    wire                         mcx_intf_rdy_noc3;  //input 
+
+
+
+wire                            processor_offchip_noc1_valid;
+wire [`PITON_NOC1_WIDTH-1:0]    processor_offchip_noc1_data;
+wire                            processor_offchip_noc1_yummy;
+wire                            processor_offchip_noc2_valid;
+wire [`PITON_NOC2_WIDTH-1:0]    processor_offchip_noc2_data;
+wire                            processor_offchip_noc2_yummy;
+wire                            processor_offchip_noc3_valid;
+wire [`PITON_NOC3_WIDTH-1:0]    processor_offchip_noc3_data;
+wire                            processor_offchip_noc3_yummy;
+
+wire                            offchip_processor_noc1_valid;
+wire [`PITON_NOC1_WIDTH-1:0]    offchip_processor_noc1_data;
+wire                            offchip_processor_noc1_yummy;
+wire                            offchip_processor_noc2_valid;
+wire [`PITON_NOC2_WIDTH-1:0]    offchip_processor_noc2_data;
+wire                            offchip_processor_noc2_yummy;
+wire                            offchip_processor_noc3_valid;
+wire [`PITON_NOC3_WIDTH-1:0]    offchip_processor_noc3_data;
+wire                            offchip_processor_noc3_yummy;
+
+
+`ifdef PITON_PRONOC
+
+    assign smart_max = SMART_MAX;
+	wire pronoc_reset = ~ sys_rst_n;
+
+    localparam CHIP_SET_ID = T1*T2*T3+2*T1; // endp connected  of west port of router 0-0
+    localparam CHIP_SET_PORT = 3; //west port of first router
+
+    //NOC2
+     wire [RAw-1 : 0] tile_0_0_current_r_addr2;
+    
+     piton_to_pronoc_wrapper #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(2),.CHIP_SET_PORT(CHIP_SET_PORT)) pi2pr_wrapper2
+	(
+	.default_chipid(default_chipid), .default_coreid_x(default_coreid_x), .default_coreid_y(default_coreid_y), .flat_tileid(flat_tileid),	
+	.reset(pronoc_reset),
+	.clk (core_ref_clk),
+	.dataIn({`NOC_DATA_WIDTH{1'b0}} ),
+	.validIn(1'b0),
+	.yummyIn(processor_mcx_noc2_yummy),
+	.chan_out(noc_chanel_out.smartflit_chanel[1]),
+	.current_r_addr_i(tile_0_0_current_r_addr2)
+	);	
+
+	pronoc_to_piton_wrapper  #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(2),.PORT_NUM(CHIP_SET_PORT)) pr2pi_wrapper2
+	(
+	.default_chipid(default_chipid), .default_coreid_x(default_coreid_x), .default_coreid_y(default_coreid_y), .flat_tileid(flat_tileid),		
+	.reset(pronoc_reset),
+	.clk (core_ref_clk),
+	.dataOut(processor_mcx_noc2_data),
+	.validOut(processor_mcx_noc2_valid),
+	.yummyOut( ),
+	.chan_in(noc_chanel_in.smartflit_chanel[1]),
+	.current_r_addr_o(tile_0_0_current_r_addr2)
+	);	
+
+
+       //NOC3
+
+	wire [RAw-1 : 0] tile_0_0_current_r_addr3;
+
+	piton_to_pronoc_wrapper #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(3),.CHIP_SET_PORT(CHIP_SET_PORT))  pi2pr_wrapper3
+	(
+		.default_chipid(default_chipid), .default_coreid_x(default_coreid_x), .default_coreid_y(default_coreid_y), .flat_tileid(flat_tileid),	
+		.reset(pronoc_reset),
+		.clk (core_ref_clk),
+		.dataIn(mcx_processor_noc3_data),
+		.validIn(mcx_processor_noc3_valid),
+		.yummyIn(1'b0),
+		.chan_out(noc_chanel_out.smartflit_chanel[2]),
+		.current_r_addr_i(tile_0_0_current_r_addr3)
+	);	
+
+	pronoc_to_piton_wrapper  #(.FLATID_WIDTH(`JTAG_FLATID_WIDTH),.NOC_NUM(3),.PORT_NUM(CHIP_SET_PORT)) pr2pi_wrapper3
+	(
+		.default_chipid(default_chipid), .default_coreid_x(default_coreid_x), .default_coreid_y(default_coreid_y), .flat_tileid(flat_tileid),	
+		.reset(pronoc_reset),
+		.clk (core_ref_clk),
+		.dataOut( ),
+		.validOut( ),
+		.yummyOut(mcx_processor_noc3_yummy),
+		.chan_in(noc_chanel_in.smartflit_chanel[2]),
+		.current_r_addr_o(tile_0_0_current_r_addr3)
+	);	
+
+
+
+
+
+`else
+
+    assign smart_max = 0;
+    assign processor_mcx_noc2_data = noc_chanel_in.data2;
+    assign processor_mcx_noc2_valid= noc_chanel_in.valid [1];
+    assign noc_chanel_out.yummy[1] =  processor_mcx_noc2_yummy;
+
+    assign noc_chanel_out.data3 = mcx_processor_noc3_data;  
+    assign noc_chanel_out.valid  [2] = mcx_processor_noc3_valid;
+    assign mcx_processor_noc3_yummy = noc_chanel_in.yummy[2];
+
+`endif
+
+valrdy_to_credit #(
+	.BUFFER_SIZE(4),
+    .BUFFER_BITS(3),
+    .FLIT_WIDTH(`PITON_NOC3_WIDTH)
+) mc_processor_noc3_v2c( 
+    .clk      (core_ref_clk), 
+    .reset    (~sys_rst_n),  
+
+    .data_in (mcx_intf_data_noc3), 
+    .valid_in(mcx_intf_val_noc3 ), 
+    .ready_in(mcx_intf_rdy_noc3 ), 
+
+    .data_out (mcx_processor_noc3_data ), 
+    .valid_out(mcx_processor_noc3_valid), 
+    .yummy_out(mcx_processor_noc3_yummy) 
+); 
+
+credit_to_valrdy #(.FLIT_WIDTH(`PITON_NOC2_WIDTH)) processor_mc_noc2_c2v( 
+    .clk      (core_ref_clk), 
+    .reset    (~sys_rst_n),  
+
+    .data_in (processor_mcx_noc2_data ), 
+    .valid_in(processor_mcx_noc2_valid), 
+    .yummy_in(processor_mcx_noc2_yummy),
+
+    .data_out (intf_mcx_data_noc2), 
+    .valid_out(intf_mcx_val_noc2 ), 
+    .ready_out(intf_mcx_rdy_noc2 ) 
+);
+
+
+
+// Fake Memory Controller
+fake_mem_ctrl fake_mc  ( 
+    .clk      (core_ref_clk), 
+    .rst_n     (sys_rst_n),  
+    .noc_valid_in       ( intf_mcx_val_noc2  ), 
+    .noc_data_in        ( intf_mcx_data_noc2 ), 
+    .noc_ready_in       ( intf_mcx_rdy_noc2  ), 
+    .noc_valid_out      ( mcx_intf_val_noc3  ), 
+    .noc_data_out       ( mcx_intf_data_noc3 ), 
+    .noc_ready_out      ( mcx_intf_rdy_noc3  ) 
+`ifdef  PITON_LAT_FILE
+`ifdef  METRO_CHIPSET
+`ifdef  PITON_EXTRA_MEMS
+	,.rd_lat_in(rd_lat_in)
+`endif 
+`endif 
+`endif
+);
+
+
+assign mem_valid_out = mcx_intf_val_noc3 & mcx_intf_rdy_noc3;
+assign mem_valid_in  = intf_mcx_val_noc2 & intf_mcx_rdy_noc2;
+
+assign flit_o_cnts=fake_mc.flit_o_cnts;
+assign flit_i_cnts=fake_mc.flit_i_cnts;
+
+
+`ifdef  PITON_LAT_FILE
+`ifdef  METRO_CHIPSET
+`ifdef  PITON_EXTRA_MEMS
+	assign got_rd = fake_mc.got_rd;
+	assign got_wr = fake_mc.got_wr;
+`endif 
+`endif 
+`endif
+
+endmodule // cmp_top
+
+
diff --git a/piton/verif/env/metro_tile/cache_st.flist b/piton/verif/env/metro_tile/cache_st.flist
new file mode 100644
index 00000000..390ff53f
--- /dev/null
+++ b/piton/verif/env/metro_tile/cache_st.flist
@@ -0,0 +1 @@
+cache_st.sv
diff --git a/piton/verif/env/metro_tile/cache_st.sv b/piton/verif/env/metro_tile/cache_st.sv
new file mode 100644
index 00000000..b73a2608
--- /dev/null
+++ b/piton/verif/env/metro_tile/cache_st.sv
@@ -0,0 +1,54 @@
+module cache_st #(
+	parameter NAME ="",
+	parameter Aw = 10	
+)(
+	input [Aw-1 : 0] addr,
+	input wr_en,
+	input rd_en,
+	input clk
+	
+);
+
+	reg [31 : 0] ram_wr [2**Aw-1 : 0];
+	reg [31 : 0] ram_rd [2**Aw-1 : 0];
+	
+	initial begin 
+		for (int i=0;i<2** Aw;i++) begin 
+		 	ram_wr [i]=0;
+		 	ram_rd [i]=0;
+		end	
+	end
+	
+	integer sum_wr =0;
+	integer total;
+	assign  total = 2** Aw;
+
+	always @(posedge clk) begin 
+		if(wr_en && ram_wr [addr] != {32{1'b1}} ) begin 
+			if(ram_wr [addr] == 0) sum_wr ++;
+			ram_wr [addr] = ram_wr [addr] +1;			
+		end
+		if(rd_en && ram_rd [addr] != {32{1'b1}} ) ram_rd [addr] = ram_rd [addr] +1;
+	end
+
+/*
+
+integer sum;
+real percent;
+
+
+
+final begin
+    sum =0;
+    percent = 0;
+	for (int i=0;i<2** Aw;i++) begin 
+		 	if (ram_wr [i] !=0 ) sum++;
+	end
+	percent = real'(sum) * 100 / (2**Aw); 
+    $display("%s , %m , %0t : percent=%f  \n",NAME, $time,percent);
+end
+
+*/
+
+
+endmodule
diff --git a/piton/verif/env/metro_tile/metro_hpm.sv b/piton/verif/env/metro_tile/metro_hpm.sv
new file mode 100644
index 00000000..f7ff2c43
--- /dev/null
+++ b/piton/verif/env/metro_tile/metro_hpm.sv
@@ -0,0 +1,521 @@
+module metro_hpm (
+    flat_tileid,
+    clk,
+    rst_n,
+    hpm_st,
+    cache_st,
+    flit_st,
+    pck_st,
+    roi_start,// RIO (resion of interest) started by reading instruction count in csr
+    roi_en,    // ROI Enabled until reading instruction count in csr again.
+    inst_done, //for checking trap
+    phy_pc_w
+);
+
+input clk,rst_n;
+output roi_start,  roi_en;
+input wire [7:0]   flat_tileid;
+output [31 : 0] cache_st [11: 0];
+output reg [63 : 0] flit_st  [0: 5]; // count flit in/out to/from processor for 3 NoCs 
+output reg [63 : 0] pck_st   [0: 5][0:11]; // packet sizes histogram in/out to/from processor for 3 NoCs 
+output inst_done;
+output [63:0] phy_pc_w;
+
+//HPM EVENTS
+localparam 
+  HPM_BRANCH_MISS=0,
+  HPM_IS_BRANCH=1,
+  HPM_BRANCH_TAKEN=2,
+  HPM_EXE_STORE=3,
+  HPM_EXE_LOAD=4,
+  HPM_ICACHE_REQ=5,
+  HPM_ICACHE_KILL=6,
+  HPM_STALL_IF=7,
+  HPM_STALL_ID=8,
+  HPM_STALL_RR=9,
+  HPM_STALL_EXE=10,
+  HPM_STALL_WB=11,
+  HPM_ICACHE_MISS_L2_HIT=12,
+  HPM_ICACHE_MISS_KILL=13,
+  HPM_ICACHE_BUSY=14,
+  HPM_ICACHE_MISS_TIME=15,
+  HPM_LOAD_STORE=16,
+  HPM_DATA_DEPEND=17,
+  HPM_STRUCT_DEPEND=18,
+  HPM_GRAD_LIST_FULL=19,
+  HPM_FREE_LIST_EMPTY=20,
+  HPM_ITLB_ACCESS=21,
+  HPM_ITLB_MISS=22,
+  HPM_DTLB_ACCESS=23,
+  HPM_DTLB_MISS=24,
+  HPM_PTW_BUFFER_HIT=25,
+  HPM_PTW_BUFFER_MISS=26,
+  HPM_ITLB_STALL=27,
+  HPM_DCACHE_STALL=28,
+  HPM_DCACHE_STALL_REFILL=29,
+  HPM_DCACHE_RTAB_ROLLBACK=30,
+  HPM_DCACHE_REQ_ONHOLD=31,
+  HPM_DCACHE_PREFETCH_REQ=32,
+  HPM_DCACHE_READ_REQ=33,
+  HPM_DCACHE_WRITE_REQ=34,
+  HPM_DCACHE_CMO_REQ=35,
+  HPM_DCACHE_UNCACHED_REQ=36,
+  HPM_DCACHE_MISS_READ_REQ=37,
+  HPM_DCACHE_MISS_WRITE_REQ=38,
+  HPM_STALL_IR=39,
+  HPM_L2_MISS=40,
+  HPM_L2_ACCESS=41,
+  HPM_L15_MISS=42,
+  HPM_L15_ACCESS=43,
+  HPM_CNT_NUM = 44;
+
+ output reg [31 : 0] hpm_st [HPM_CNT_NUM-1 : 0];
+ logic  [HPM_CNT_NUM-1 : 0] hpm_st_incr;
+ reg  hpm_en;
+ wire hpm_reset;
+
+
+wire csr_read;
+wire rd_instruction;
+
+
+
+`ifdef PITON_ARIANE
+  import ariane_pkg::*;
+  assign csr_read = `TOP_MOD_INST.g_ariane_core.core.ariane.i_cva6.csr_regfile_i.csr_read;
+  assign rd_instruction = (`TOP_MOD_INST.g_ariane_core.core.ariane.i_cva6.csr_regfile_i.csr_addr.address == riscv::CSR_MINSTRET);
+  always @(*) begin 
+    hpm_st_incr = 'h0;
+    hpm_st_incr [HPM_L15_ACCESS]= `TOP_MOD_INST.hpm_l15_access & hpm_en;
+    hpm_st_incr [HPM_L15_MISS]  = `TOP_MOD_INST.hpm_l15_miss & hpm_en;
+    hpm_st_incr [HPM_L2_ACCESS] = `TOP_MOD_INST.hpm_l2_access & hpm_en;
+    hpm_st_incr [HPM_L2_MISS]   = `TOP_MOD_INST.hpm_l2_miss & hpm_en;
+  end
+`endif
+
+`ifdef PITON_SARG
+  import riscv_pkg::*;
+  assign csr_read = `TOP_MOD_INST.g_sarg_core.core.core_inst.sargantana_inst.csr_inst.csr_read;
+  assign rd_instruction = (`TOP_MOD_INST.g_sarg_core.core.core_inst.sargantana_inst.csr_inst.csr_addr.address == riscv_pkg::CSR_MINSTRET);
+  integer i;
+  always @(*) begin 
+    for(i=0;i<HPM_CNT_NUM;i++) hpm_st_incr[i] = `TOP_MOD_INST.g_sarg_core.core.core_inst.sargantana_inst.hpm_events_d[i+1] & hpm_en;
+  end
+`endif
+
+always @ (posedge clk)begin
+    if(!rst_n) begin 
+        hpm_en<=1'b0;
+    end
+    else if(csr_read & rd_instruction ) begin   
+      if(flat_tileid=='h0) begin     
+         if(hpm_en==1'b0 ) $display("**********START OF ROI*************** ");
+         else      $display("***********END OF ROI**************** ");
+      end
+      hpm_en<=!hpm_en;
+    end
+end
+
+/****************
+    cache_st
+*****************/
+
+`define PATH1 `TOP_MOD_INST.l15.l15.dtag.sram_l15_tag.st
+`define PATH2 `TOP_MOD_INST.l15.l15.dcache.sram_l15_data.st
+`define PATH3 `TOP_MOD_INST.l2.tag_wrap.l2_tag.l2_tag_array.sram_l2_tag.st 
+`define PATH4 `TOP_MOD_INST.l2.data_wrap.l2_data.l2_data_array.sram_l2_data.st 
+
+wire [63 : 0]   lat_sum , req_num;
+
+    
+piton_lat_monitor #(
+    .REQ_FLIT_WIDTH(`PITON_NOC1_WIDTH),
+    .RSP_FLIT_WIDTH(`PITON_NOC2_WIDTH)
+)lat_mon(
+    .id (`TOP_MOD_INST.flat_tileid),    
+    .req_valid(`TOP_MOD_INST.processor_router_valid_noc1),
+    .req_flit_in(`TOP_MOD_INST.processor_router_data_noc1),
+    .req_ready(`TOP_MOD_INST.router_processor_ready_noc1),
+    .rsp_valid(`TOP_MOD_INST.buffer_processor_valid_noc2),
+    .rsp_flit_in(`TOP_MOD_INST.buffer_processor_data_noc2),
+    .rsp_ready(`TOP_MOD_INST.processor_router_ready_noc2),
+    .lat_sum (lat_sum), 
+    .req_num (req_num),
+    .reset(!rst_n),
+    .clk(clk)
+);
+
+assign  cache_st [0] = `PATH1.sum_wr;
+assign  cache_st [1] = `PATH1.total;
+assign  cache_st [2] = `PATH2.sum_wr;
+assign  cache_st [3] = `PATH2.total;
+assign  cache_st [4] = `PATH3.sum_wr;
+assign  cache_st [5] = `PATH3.total;
+assign  cache_st [6] = `PATH4.sum_wr;
+assign  cache_st [7] = `PATH4.total;  
+assign  cache_st [8] = hpm_st[HPM_L2_ACCESS];
+assign  cache_st [9] = hpm_st[HPM_L2_MISS];
+assign  cache_st [10] = lat_sum [31 : 0];
+assign  cache_st [11] = req_num [31 : 0];
+
+
+/**********************
+   flit_st  & pck_st
+**********************/
+integer cnt,siz;
+
+wire [5: 0] is_header;
+wire [`MSG_LENGTH_WIDTH-1       :0] length [0: 5];
+
+wire [5: 0] flit_in_valid;
+wire [`PITON_NOC1_WIDTH-1 : 0] data_1;
+wire [`PITON_NOC2_WIDTH-1 : 0] data_2;
+wire [`PITON_NOC3_WIDTH-1 : 0] data_3;
+wire [`PITON_NOC1_WIDTH-1 : 0] data_4;
+wire [`PITON_NOC2_WIDTH-1 : 0] data_5;
+wire [`PITON_NOC3_WIDTH-1 : 0] data_6;
+
+ 
+assign  flit_in_valid[0] =`TOP_MOD_INST.router_buffer_data_val_noc1;
+assign  flit_in_valid[1] =`TOP_MOD_INST.router_buffer_data_val_noc2;
+assign  flit_in_valid[2] =`TOP_MOD_INST.router_buffer_data_val_noc3;
+assign  flit_in_valid[3] =`TOP_MOD_INST.buffer_router_valid_noc1;
+assign  flit_in_valid[4] =`TOP_MOD_INST.buffer_router_valid_noc2;
+assign  flit_in_valid[5] =`TOP_MOD_INST.buffer_router_valid_noc3;
+
+assign  data_1 = `TOP_MOD_INST.router_buffer_data_noc1;
+assign  data_2 = `TOP_MOD_INST.router_buffer_data_noc2;
+assign  data_3 = `TOP_MOD_INST.router_buffer_data_noc3;
+assign  data_4 = `TOP_MOD_INST.buffer_router_data_noc1;
+assign  data_5 = `TOP_MOD_INST.buffer_router_data_noc2;
+assign  data_6 = `TOP_MOD_INST.buffer_router_data_noc3;
+
+hdr_pck_size_detect #(
+    .FLIT_WIDTH(`PITON_NOC1_WIDTH)
+)d0(
+    .reset(!rst_n),
+    .clk(clk),
+    .flit_in(data_1),
+    .valid(flit_in_valid[0]),
+    .ready(1'b1),
+    .is_header(is_header[0]),
+    .length(length[0])
+);
+
+hdr_pck_size_detect #(
+    .FLIT_WIDTH(`PITON_NOC2_WIDTH)
+)d1(
+    .reset(!rst_n),
+    .clk(clk),
+    .flit_in(data_2),
+    .valid(flit_in_valid[1]),
+    .ready(1'b1),
+    .is_header(is_header[1]),
+    .length(length[1])
+);
+hdr_pck_size_detect #(
+    .FLIT_WIDTH(`PITON_NOC3_WIDTH)
+)d2(
+    .reset(!rst_n),
+    .clk(clk),
+    .flit_in(data_3),
+    .valid(flit_in_valid[2]),
+    .ready(1'b1),
+    .is_header(is_header[2]),
+    .length(length[2])
+);
+hdr_pck_size_detect #(
+    .FLIT_WIDTH(`PITON_NOC1_WIDTH)
+)d3(
+    .reset(!rst_n),
+    .clk(clk),
+    .flit_in(data_4),
+    .valid(flit_in_valid[3]),
+    .ready(1'b1),
+    .is_header(is_header[3]),
+    .length(length[3])
+);
+
+hdr_pck_size_detect #(
+    .FLIT_WIDTH(`PITON_NOC2_WIDTH)
+)d4(
+    .reset(!rst_n),
+    .clk(clk),
+    .flit_in(data_5),
+    .valid(flit_in_valid[4]),
+    .ready(1'b1),
+    .is_header(is_header[4]),
+    .length(length[4])
+);
+hdr_pck_size_detect #(
+    .FLIT_WIDTH(`PITON_NOC3_WIDTH)
+)d5(
+    .reset(!rst_n),
+    .clk(clk),
+    .flit_in(data_6),
+    .valid(flit_in_valid[5]),
+    .ready(1'b1),
+    .is_header(is_header[5]),
+    .length(length[5])
+);
+
+
+always @ (posedge clk)begin 
+  if(!rst_n) begin 
+    for(cnt=0;cnt<6;cnt++) begin 
+      flit_st[cnt] <=64'd0;  
+      for(siz=0;siz<12;siz++) pck_st [cnt][siz] <=64'd0;          
+    end
+  end else begin 
+    if(roi_start)begin 
+      //$display("*****RESET FLIT COUNTERS !***************");
+      for(cnt=0;cnt<6;cnt++) begin 
+        flit_st[cnt] <=64'd0;
+        for(siz=0;siz<12;siz++) pck_st [cnt][siz] <=64'd0;        
+      end
+    end else if(roi_en) begin   
+      for(cnt=0;cnt<6;cnt++) begin
+        if(flit_in_valid[cnt])begin 
+          flit_st[cnt]<=flit_st[cnt]+1;
+          if(is_header[cnt] )  pck_st [cnt][length[cnt][3:0]] <= pck_st [cnt][length[cnt][3:0]]+1;
+        end
+      end   
+    end
+  end
+end
+
+/**********************
+  hpm_st
+**********************/
+
+
+always @ (posedge clk)begin 
+    if(!rst_n) begin 
+        for(cnt=0;cnt<HPM_CNT_NUM;cnt++) begin
+            hpm_st[cnt] <=32'd0;
+        end
+    end else begin 
+        for(cnt=0;cnt<HPM_CNT_NUM;cnt++) begin 
+            if(hpm_reset) hpm_st[cnt] <=32'd0;  
+            else if(hpm_st_incr[cnt]) hpm_st[cnt] <= hpm_st[cnt] +1'b1;
+        end
+    end
+end
+
+assign hpm_reset = (csr_read & rd_instruction) && (hpm_en == 1'b0);
+assign roi_en = hpm_en;
+assign roi_start = hpm_reset;
+
+/**********************
+     Check Traps
+**********************/
+reg spc0_0_inst_done;
+reg [63:0] spc0_0_phy_pc_w;
+always @ (posedge clk)begin 
+    if(!rst_n) begin 
+        spc0_0_inst_done         <= 0;
+        spc0_0_phy_pc_w          <= 0;
+    end else begin
+        `ifdef RTL_ARIANE0          
+            spc0_0_inst_done         <= `ARIANE_CORE0.piton_pc_vld;
+            spc0_0_phy_pc_w          <= `ARIANE_CORE0.piton_pc;
+        `endif
+        `ifdef RTL_SARG0           
+            spc0_0_inst_done         <= `SARG_CORE0.piton_pc_vld;
+            spc0_0_phy_pc_w          <= `SARG_CORE0.piton_pc;
+        `endif
+        `ifdef RTL_LOX0
+            spc0_0_inst_done         <= `LOX_CORE0.debug_commit_valid[0] & ~`LOX_CORE0.core_csr_xcptn_valid_o & ~`LOX_CORE0.csr_core_xcptn_valid_i;
+            spc0_0_phy_pc_w          <= `LOX_CORE0.debug_commit_pc[0];
+         `endif 
+    end
+end
+
+assign inst_done = spc0_0_inst_done;
+assign phy_pc_w  = spc0_0_phy_pc_w;
+
+
+
+
+endmodule
+
+
+
+/***************
+     piton_lat_monitor
+****************/
+
+
+module  piton_lat_monitor #(
+    parameter REQ_FLIT_WIDTH = 64,
+    parameter RSP_FLIT_WIDTH =64
+    )(
+    input  [7:0]   id,
+    input req_valid ,
+    input [REQ_FLIT_WIDTH-1 : 0]  req_flit_in,
+    input req_ready,
+
+    input rsp_valid,
+    input [RSP_FLIT_WIDTH-1 : 0] rsp_flit_in,
+    input rsp_ready,
+    output reg [63 : 0] lat_sum, req_num,
+    input reset,
+    input clk
+    );
+
+    wire req_header;
+    hdr_pck_size_detect #(
+        .FLIT_WIDTH(REQ_FLIT_WIDTH)
+    ) req_detect_in (
+        .reset      (reset),
+        .clk        (clk ),
+        .flit_in    (req_flit_in),
+        .valid      (req_valid ),
+        .ready      (req_ready ),
+        .is_header  (req_header),
+        .length     ()
+    );
+
+
+    wire rsp_header;
+    hdr_pck_size_detect #(
+        .FLIT_WIDTH(RSP_FLIT_WIDTH)
+    ) rsp_detect_in (
+        .reset      (reset),
+        .clk        (clk ),
+        .flit_in    (rsp_flit_in),
+        .valid      (rsp_valid ),
+        .ready      (rsp_ready ),
+        .is_header  (rsp_header),
+        .length     ()
+    );
+
+
+    wire [`MSG_TYPE_WIDTH-1:0]   req_msg_type = req_flit_in [`MSG_TYPE];
+    wire [`MSG_TYPE_WIDTH-1:0]   rsp_msg_type = rsp_flit_in [`MSG_TYPE];
+    wire [`MSG_MSHRID_WIDTH-1 : 0] req_id     = req_flit_in [`MSG_MSHRID];
+    wire [`MSG_MSHRID_WIDTH-1 : 0] rsp_id     = rsp_flit_in [`MSG_MSHRID];
+
+    reg [63 : 0] clk_counter;
+ 
+    always @ (posedge clk) begin
+        if(reset) clk_counter<=0;
+        else clk_counter<=clk_counter+1;
+    end
+
+    reg [63 : 0] time_stamp [2**`MSG_MSHRID_WIDTH-1 : 0];
+    reg [2**`MSG_MSHRID_WIDTH-1 : 0] valid;
+   
+
+    always @ (posedge clk) begin 
+        if(reset) begin 
+            valid <=0; 
+            lat_sum <=64'd0;
+            req_num <=64'd0;
+        end else begin 
+        if(req_valid & req_ready & req_header) begin             
+            if(req_msg_type == `MSG_TYPE_LOAD_REQ ) begin 
+             //  $display("MSG_TYPE_LOAD_REQ id:%d",req_id );
+                time_stamp [req_id]<=clk_counter;
+                valid      [req_id]<=1'b1;
+            end
+            if(req_msg_type == `MSG_TYPE_NC_LOAD_REQ ) begin 
+             //   $display("MSG_TYPE_NC_LOAD_REQ id:%d ",req_id );
+                time_stamp [req_id]<=clk_counter;
+                valid      [req_id]<=1'b1;
+            end
+
+            if(req_msg_type == `MSG_TYPE_STORE_REQ ) begin 
+             //   $display("MSG_TYPE_STORE_REQ id:%d ",req_id );
+            end
+        end
+
+        if(rsp_valid & rsp_ready & rsp_header) begin 
+            if(rsp_msg_type == `MSG_TYPE_DATA_ACK ) begin 
+               // $display(" id:%d ", rsp_id );
+                if(valid  [rsp_id ]) begin 
+                    valid [rsp_id ] <= 1'b0;
+                    lat_sum   <= lat_sum + (clk_counter-time_stamp [rsp_id]);
+                    req_num   <= req_num + 1;
+                 //   $display(" lat_sum:%d  req_num:%d ", lat_sum,  req_num );    
+                end
+            end
+        end
+        end//reset
+    end
+
+endmodule
+
+
+/**************************
+hdr_pck_size_detect
+**************************/
+
+
+module hdr_pck_size_detect  #(
+    parameter FLIT_WIDTH=64
+)(
+    reset,
+    clk,
+    flit_in,
+    valid,
+    ready,
+    is_header,
+    length
+);
+    input reset,clk;
+    input valid,ready;
+    input [FLIT_WIDTH-1 : 0] flit_in;
+    output  is_header;
+    output [`MSG_LENGTH_WIDTH-1       :0] length;
+
+    localparam 
+        CHANEL_WORLD_NUM = FLIT_WIDTH/64;
+
+    localparam  [1:0] 
+		HEADER = 1,
+		BODY   = 2;
+    reg [1:0] flit_type,flit_type_next; 
+    wire [`MSG_LENGTH_WIDTH-1       :0] length_in      =  flit_in [ `MSG_LENGTH ];
+    reg  [`MSG_LENGTH_WIDTH-1       :0] remain, remain_next;    
+
+    always @ (*) begin        
+        remain_next = remain;
+        flit_type_next = flit_type; 
+        if(valid & ready) begin
+            case(flit_type) 
+            HEADER: begin 
+                if (length_in >= CHANEL_WORLD_NUM ) begin 
+                        flit_type_next = BODY;
+                        remain_next = length_in  - CHANEL_WORLD_NUM;                                    
+                end                 
+            end //HEADER
+            BODY: begin 
+                if(remain < CHANEL_WORLD_NUM) begin                 
+                        flit_type_next = HEADER;                     
+                end else if (remain >= CHANEL_WORLD_NUM ) begin             
+                        remain_next = remain  - CHANEL_WORLD_NUM;                    
+                end
+            end //BODY
+	    default : begin
+		remain_next = remain;
+               flit_type_next = flit_type; 
+	    end
+            endcase
+        end
+    end//always
+
+    always @ (posedge clk) begin
+        if (reset)  begin  
+            remain <= {`MSG_LENGTH_WIDTH{1'b0}};
+            flit_type <=HEADER;
+        end else begin 
+            remain <= remain_next;
+            flit_type <= flit_type_next;
+        end
+    end
+
+    assign length    = (length_in > 11) ? 11 : length_in;
+    assign is_header = (flit_type == HEADER);
+
+endmodule
diff --git a/piton/verif/env/metro_tile/metro_tile.flist b/piton/verif/env/metro_tile/metro_tile.flist
new file mode 100644
index 00000000..e7903b7d
--- /dev/null
+++ b/piton/verif/env/metro_tile/metro_tile.flist
@@ -0,0 +1,42 @@
++incdir+../../../design/include
++incdir+../../../design/chipset/include
++incdir+../manycore
++incdir+.
+
+../manycore/cross_module.h
+../manycore/manycore_network_mon.v
+../manycore/sas_intf.v
+../manycore/monitor.v
+../manycore/sas_tasks.v
+../manycore/pc_cmp.v
+../manycore/sas_task.v
+../manycore/l_cache_mon.v
+../manycore/thrfsm_mon.v // monitors for X's in the processor states
+../manycore/sparc_pipe_flow.v
+../manycore/multicycle_mon.v
+../manycore/dmbr_mon.v
+../manycore/cmp_pcxandcpx.v
+../manycore/tso_mon.v
+../manycore/lsu_mon.v
+../manycore/lsu_mon2.v
+../manycore/exu_mon.v
+../manycore/mask_mon.v
+../manycore/pc_muxsel_mon.v
+../manycore/nukeint_mon.v
+../manycore/stb_ovfl_mon.v
+../manycore/icache_mutex_mon.v
+../manycore/nc_inv_chk.v
+../manycore/tlu_mon.v
+../manycore/softint_mon.v
+../manycore/slam_init.v
+../manycore/ciop_iob.v
+../manycore/cmp_l15_messages_mon.v
+../manycore/jtag_mon.v
+../manycore/l2_mon.v
+../manycore/async_fifo_mon.v
+../manycore/iob_mon.v
+../manycore/fake_pll.v
+../manycore/fake_uart.v
+metro_tile.sv
+metro_hpm.sv
+
diff --git a/piton/verif/env/metro_tile/metro_tile.sv.pyv b/piton/verif/env/metro_tile/metro_tile.sv.pyv
new file mode 100644
index 00000000..1098942e
--- /dev/null
+++ b/piton/verif/env/metro_tile/metro_tile.sv.pyv
@@ -0,0 +1,1269 @@
+// Modified by Princeton University on June 9th, 2015
+// ========== Copyright Header Begin ==========================================
+//
+// OpenSPARC T1 Processor File: cmp_top.v
+// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
+// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
+//
+// The above named program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU General Public
+// License version 2 as published by the Free Software Foundation.
+//
+// The above named program is distributed in the hope that it will be
+// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// General Public License for more details.
+//
+// You should have received a copy of the GNU General Public
+// License along with this work; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
+//
+// ========== Copyright Header End ============================================
+////////////////////////////////////////////////////////
+
+`ifndef USE_TEST_TOP // don't compile if user wants to use deprecated TOPs
+`include "sys.h"
+`include "iop.h"
+`include "cross_module.tmp.h"
+`include "ifu.tmp.h"
+`include "define.tmp.h"
+`include "piton_system.vh"
+`include "jtag.vh"
+
+<%
+    from pyhplib import *
+%>
+
+`ifdef PITON_DPI
+import "DPI-C" function longint read_64b_call (input longint addr);
+import "DPI-C" function void write_64b_call (input longint addr, input longint data);
+import "DPI-C" function int drive_iob ();
+import "DPI-C" function int get_cpx_word (int index);
+import "DPI-C" function void report_pc (longint thread_pc);
+import "DPI-C" function void init_jbus_model_call(string str, int oram);
+
+`ifndef VERILATOR
+// MPI Yummy functions
+import "DPI-C" function void initialize();
+import "DPI-C" function void finalize();
+import "DPI-C" function int getRank();
+import "DPI-C" function int getSize();
+
+import "DPI-C" function void mpi_send_yummy(input byte unsigned message, input int dest, input int rank, input int flag);
+import "DPI-C" function byte unsigned mpi_receive_yummy(input int origin, input int flag);
+
+import "DPI-C" function longint unsigned mpi_receive_data(input int origin, output byte unsigned valid, input int flag);
+import "DPI-C" function void mpi_send_data(input longint unsigned data, input byte unsigned valid, input int dest, input int rank, input int flag);
+
+import "DPI-C" function void barrier();
+//add metro_stuff
+`endif // ifndef VERILATOR
+`endif // ifdef PITON_DPI
+
+
+
+`timescale 1ps/1ps
+module metro_tile (
+
+`ifdef VERILATOR
+	core_ref_clk,
+	sys_rst_n,
+	pll_rst_n,
+	clk_en,
+	pll_bypass,
+	pll_rangea,
+	pll_lock,
+	clk_mux_sel,
+	async_mux,
+	diag_done,
+	ok_iob,
+
+	default_chipid,
+	default_coreid_x,
+	default_coreid_y,
+	flat_tileid,
+    cpu_enable,
+    current_r_id,
+
+	noc_chanel_in,
+	noc_chanel_out,
+	
+    //parameter as output
+    smart_max,
+    pronoc_T1,
+    pronoc_T2,
+
+    //statistic
+    hpm_st,
+    cache_st, 
+    flit_st,
+    pck_st,
+    
+    //To check trap
+    inst_done,
+    phy_pc_w
+
+`endif
+
+);
+
+
+
+`ifdef PITON_PRONOC
+	
+	`include "pronoc_def.v"
+ 	`NOC_CONF
+	
+	typedef struct packed {	
+		smartflit_chanel_t  [2:0] smartflit_chanel;  		
+	} noc_chanel_t;
+
+	localparam CHIP_SET_ID = T1*T2*T3+2*T1; // endp connected  of west port of router 0-0
+	localparam CHIP_SET_PORT = 3; //west port of first router
+
+	localparam CONCENTRATION = T3;
+
+`else
+
+    
+
+	typedef struct packed {	
+		logic  [`PITON_NOC1_WIDTH-1:0] data1;
+		logic  [`PITON_NOC2_WIDTH-1:0] data2;
+		logic  [`PITON_NOC3_WIDTH-1:0] data3;
+		logic  [2:0] valid;
+		logic  [2:0] yummy;		
+	} noc_chanel_t;
+
+    localparam CONCENTRATION = 1;
+	localparam SMARTFLIT_CHANEL_w=1;
+	localparam CHIP_SET_ID = 0; // endp connected  of west port of router 0-0
+	localparam CHIP_SET_PORT = 3; //west port of first router
+	localparam RAw=0;
+	
+	
+`endif
+
+
+localparam NOC_CHANEL_w = $bits(noc_chanel_t); 	
+
+
+localparam 
+	PITON_EAST    =   0,
+	PITON_NORTH   =   1, 
+	PITON_WEST    =   2,
+	PITON_SOUTH   =   3,
+    PITON_P       =   4;   
+
+localparam 
+    PRONOC_LOCAL   =   0,
+    PRONOC_EAST    =   1,
+    PRONOC_NORTH   =   2, 
+    PRONOC_WEST    =   3,
+    PRONOC_SOUTH   =   4,
+    PRONOC_P       =   5;
+
+
+
+`ifdef VERILATOR
+input reg                             core_ref_clk;
+input reg                             sys_rst_n;
+input reg                             pll_rst_n;
+input reg                             clk_en;
+input reg                             pll_bypass;
+input reg [4:0]                       pll_rangea;
+output wire                           pll_lock;
+input reg [1:0]                       clk_mux_sel;
+input reg                             async_mux;
+input                                 diag_done;
+input                                 ok_iob;
+
+input      [31 : 0]                   current_r_id;
+input wire [13:0]                     default_chipid ;
+input wire [7:0]                      default_coreid_x [CONCENTRATION-1 : 0];
+input wire [7:0]                      default_coreid_y [CONCENTRATION-1 : 0];
+input wire [`JTAG_FLATID_WIDTH-1:0]   flat_tileid [CONCENTRATION-1 : 0];
+input  cpu_enable [CONCENTRATION-1 : 0];
+
+
+input  noc_chanel_t noc_chanel_in	[PITON_P-1 : 0];
+output noc_chanel_t noc_chanel_out	[PITON_P-1 : 0];
+output [31 : 0] smart_max;
+output [31 : 0 ] pronoc_T1;
+output [31 : 0 ] pronoc_T2;
+
+output [31 : 0] cache_st [11: 0];
+output [63 : 0] flit_st  [0: 5]; // count flit in/out to/from processor for 3 NoCs 
+output [63 : 0] pck_st   [0: 5][0:11]; // packet sizes histogram in/out to/from processor for 3 NoCs 
+output reg [31 : 0] hpm_st [43 : 0];
+output inst_done;
+output [63:0] phy_pc_w;  
+ 
+metro_hpm hpm (
+    .flat_tileid(flat_tileid[0]),
+    .hpm_st(hpm_st),
+    .cache_st(cache_st),
+    .flit_st(flit_st),
+    .pck_st(pck_st),
+    .clk(core_ref_clk),
+    .rst_n(sys_rst_n),
+    .inst_done(inst_done),
+    .phy_pc_w(phy_pc_w),
+    .roi_start(),
+    .roi_en()
+);
+
+
+`endif
+
+
+
+
+
+//////////////////////
+// Type Declarations
+//////////////////////
+
+`ifndef VERILATOR
+reg                             core_ref_clk;
+reg                             sys_rst_n;
+reg                             pll_rst_n;
+reg                             clk_en;
+reg                             pll_bypass;
+reg [4:0]                       pll_rangea;
+wire                            pll_lock = 1'b1;
+reg [1:0]                       clk_mux_sel;
+reg                             async_mux;
+// For simulation only, monitor stuff.  Only cross-module referenced
+// do not delete.
+reg                             diag_done;
+`endif // ifndef VERILATOR
+
+reg                             io_clk;
+reg                             jtag_clk;
+reg                             chipset_clk_osc_p;
+reg                             chipset_clk_osc_n;
+reg                             chipset_clk_osc;
+reg                             chipset_clk;
+reg                             mem_clk;
+reg                             spi_sys_clk;
+reg                             chipset_passthru_clk_p;
+reg                             chipset_passthru_clk_n;
+reg                             passthru_clk_osc_p;
+reg                             passthru_clk_osc_n;
+reg                             passthru_chipset_clk_p;
+reg                             passthru_chipset_clk_n;
+
+reg                             jtag_rst_l;
+
+reg                             jtag_modesel;
+reg                             jtag_datain;
+wire                            jtag_dataout;
+
+
+// For simulation only, monitor stuff.  Only cross-module referenced
+// do not delete.
+reg                             fail_flag;
+reg [3:0]                       stub_done;
+reg [3:0]                       stub_pass;
+
+`ifndef VERILATOR
+reg [`PITON_NOC1_WIDTH-1:0] in_N_noc1_data;
+reg [`PITON_NOC1_WIDTH-1:0] in_E_noc1_data;
+reg [`PITON_NOC1_WIDTH-1:0] in_W_noc1_data;
+reg [`PITON_NOC1_WIDTH-1:0] in_S_noc1_data;
+reg                       in_N_noc1_valid;
+reg                       in_E_noc1_valid;
+reg                       in_W_noc1_valid;
+reg                       in_S_noc1_valid;
+reg                       in_N_noc1_yummy;
+reg                       in_E_noc1_yummy;
+reg                       in_W_noc1_yummy;
+reg                       in_S_noc1_yummy;
+
+reg [`PITON_NOC1_WIDTH-1:0] out_N_noc1_data;
+reg [`PITON_NOC1_WIDTH-1:0] out_E_noc1_data;
+reg [`PITON_NOC1_WIDTH-1:0] out_W_noc1_data;
+reg [`PITON_NOC1_WIDTH-1:0] out_S_noc1_data;
+reg                       out_N_noc1_valid;
+reg                       out_E_noc1_valid;
+reg                       out_W_noc1_valid;
+reg                       out_S_noc1_valid;
+reg                       out_N_noc1_yummy;
+reg                       out_E_noc1_yummy;
+reg                       out_W_noc1_yummy;
+reg                       out_S_noc1_yummy;
+
+reg [`PITON_NOC2_WIDTH-1:0] in_N_noc2_data;
+reg [`PITON_NOC2_WIDTH-1:0] in_E_noc2_data;
+reg [`PITON_NOC2_WIDTH-1:0] in_W_noc2_data;
+reg [`PITON_NOC2_WIDTH-1:0] in_S_noc2_data;
+reg                       in_N_noc2_valid;
+reg                       in_E_noc2_valid;
+reg                       in_W_noc2_valid;
+reg                       in_S_noc2_valid;
+reg                       in_N_noc2_yummy;
+reg                       in_E_noc2_yummy;
+reg                       in_W_noc2_yummy;
+reg                       in_S_noc2_yummy;
+
+reg [`PITON_NOC2_WIDTH-1:0] out_N_noc2_data;
+reg [`PITON_NOC2_WIDTH-1:0] out_E_noc2_data;
+reg [`PITON_NOC2_WIDTH-1:0] out_W_noc2_data;
+reg [`PITON_NOC2_WIDTH-1:0] out_S_noc2_data;
+reg                       out_N_noc2_valid;
+reg                       out_E_noc2_valid;
+reg                       out_W_noc2_valid;
+reg                       out_S_noc2_valid;
+reg                       out_N_noc2_yummy;
+reg                       out_E_noc2_yummy;
+reg                       out_W_noc2_yummy;
+reg                       out_S_noc2_yummy;
+
+reg [`PITON_NOC3_WIDTH-1:0] in_N_noc3_data;
+reg [`PITON_NOC3_WIDTH-1:0] in_E_noc3_data;
+reg [`PITON_NOC3_WIDTH-1:0] in_W_noc3_data;
+reg [`PITON_NOC3_WIDTH-1:0] in_S_noc3_data;
+reg                       in_N_noc3_valid;
+reg                       in_E_noc3_valid;
+reg                       in_W_noc3_valid;
+reg                       in_S_noc3_valid;
+reg                       in_N_noc3_yummy;
+reg                       in_E_noc3_yummy;
+reg                       in_W_noc3_yummy;
+reg                       in_S_noc3_yummy;
+
+reg [`PITON_NOC3_WIDTH-1:0] out_N_noc3_data;
+reg [`PITON_NOC3_WIDTH-1:0] out_E_noc3_data;
+reg [`PITON_NOC3_WIDTH-1:0] out_W_noc3_data;
+reg [`PITON_NOC3_WIDTH-1:0] out_S_noc3_data;
+reg                       out_N_noc3_valid;
+reg                       out_E_noc3_valid;
+reg                       out_W_noc3_valid;
+reg                       out_S_noc3_valid;
+reg                       out_N_noc3_yummy;
+reg                       out_E_noc3_yummy;
+reg                       out_W_noc3_yummy;
+reg                       out_S_noc3_yummy;
+
+reg [13:0]                     default_chipid = 14'b0;
+reg [7:0]                      default_coreid_x = 8'b0;
+reg [7:0]                      default_coreid_y = 8'b0;
+reg [`JTAG_FLATID_WIDTH-1:0]   flat_tileid = `JTAG_FLATID_WIDTH'b0;
+
+`endif // ifndef VERILATOR
+
+
+////////////////////
+// Simulated Clocks
+////////////////////
+
+`ifndef VERILATOR
+`ifndef USE_FAKE_PLL_AND_CLKMUX
+always #5000 core_ref_clk = ~core_ref_clk;                      // 100MHz
+`else
+always #500 core_ref_clk = ~core_ref_clk;                       // 1000MHz
+`endif
+`endif
+
+`ifndef SYNC_MUX
+always #1429 io_clk = ~io_clk;                                  // 350MHz
+`else
+always @ * io_clk = core_ref_clk;
+`endif
+
+`ifndef VERILATOR
+always #50000 jtag_clk = ~jtag_clk;                             // 10MHz
+
+always #2500 chipset_clk_osc_p = ~chipset_clk_osc_p;            // 200MHz
+always @ * chipset_clk_osc_n = ~chipset_clk_osc_p;
+
+always #5000 chipset_clk_osc = ~chipset_clk_osc;                // 100MHz
+
+always #2500 chipset_clk = ~chipset_clk;                        // 200MHz
+
+always #3333 passthru_clk_osc_p = ~passthru_clk_osc_p;          // 150MHz
+always @ * passthru_clk_osc_n = ~passthru_clk_osc_p;
+
+always #1429 passthru_chipset_clk_p = ~passthru_chipset_clk_p;  // 350MHz
+always @ * passthru_chipset_clk_n = ~passthru_chipset_clk_p;
+
+always #1000 mem_clk = ~mem_clk;                                // 500MHz
+
+always #25000 spi_sys_clk = ~spi_sys_clk;                       // 20MHz
+`endif
+
+////////////////////////////////////////////////////////
+// SIMULATED BOOT SEQUENCE
+////////////////////////////////////////////////////////
+
+int           rank; 
+int           size; 
+int           dest;
+byte unsigned valid_aux;
+
+int           tile_x; 
+int           tile_y;
+int           rankN; 
+int           rankE; 
+int           rankS; 
+int           rankW;
+
+
+int YUMMY_NOC_1 ;
+int DATA_NOC_1  ;
+int YUMMY_NOC_2 ;
+int DATA_NOC_2  ;
+int YUMMY_NOC_3 ;
+int DATA_NOC_3  ;
+
+`ifndef VERILATOR
+initial
+begin
+    string filerank;
+
+    YUMMY_NOC_1 = 0;
+    DATA_NOC_1  = 1;
+    YUMMY_NOC_2 = 2;
+    DATA_NOC_2  = 3;
+    YUMMY_NOC_3 = 4;
+    DATA_NOC_3  = 5;
+
+    //metro initialization
+    initialize();
+    //barrier();
+    rank = getRank();
+    size = getSize();
+    filerank.itoa(rank);
+    $dumpfile({"metro_tile_",filerank,".vcd"});
+    $dumpvars(0, metro_tile);
+
+    $display("METRO_TILE INITIALIZING...");
+    $display("size: %d", size);
+    $display("rank: %d", rank);
+    if (rank==0) begin
+            dest = 1;
+    end else begin
+            dest = 0;
+    end
+
+    //Guillem's functions that I'm hardcoding in
+    //int get_rank_fromXY(int x, int y) { return 1 + ((x)+((`PITON_X_TILES)*y));}
+    //int getRankN () {
+    //if (tile_y == 0)
+    //    return -1;
+    //else
+    //    return get_rank_fromXY(tile_x, tile_y-1);
+    //}
+    //int getRankS () {
+    //    if (tile_y+1 == `PITON_Y_TILES)
+    //        return -1;
+    //    else
+    //        return get_rank_fromXY(tile_x, tile_y+1);
+    //}
+    //int getRankE () {
+    //    if (tile_x+1 == `PITON_X_TILES)
+    //        return -1;
+    //    else
+    //        return get_rank_fromXY(tile_x+1, tile_y);
+    //}
+    //int getRankW () {
+    //    if (rank==1) { // go to chipset
+    //        return 0;
+    //    }
+    //    else if (tile_x == 0) {
+    //        return -1;
+    //    }
+    //    else {
+    //        return get_rank_fromXY(tile_x-1, tile_y);
+    //    }
+    //}
+
+    tile_x = (rank-1)%`PITON_X_TILES;
+    tile_y = (rank-1)/`PITON_X_TILES;
+
+    //rankN
+    if (tile_y == 0) begin
+        rankN = -1;
+    end else begin
+        rankN = 1 + ((tile_x)+((`PITON_X_TILES)*(tile_y-1)));
+    end
+    
+    //rankE
+    if (tile_x+1 == `PITON_X_TILES) begin
+        rankE = -1;
+    end else begin
+        rankE = 1 + ((tile_x+1)+((`PITON_X_TILES)*tile_y));
+    end
+
+    //rankS
+    if (tile_y+1 == `PITON_Y_TILES) begin
+        rankS = -1;
+    end else begin
+        rankS = 1 + ((tile_x)+((`PITON_X_TILES)*(tile_y+1)));
+    end
+
+    //rankW
+    if (rank==1) begin
+        rankW = 0;
+    end else if (tile_x == 0) begin
+        rankW = -1;
+    end else begin
+        rankW = 1 + ((tile_x-1)+((`PITON_X_TILES)*tile_y));
+    end
+
+    default_chipid   = 14'b0;
+    default_coreid_x = tile_x;
+    default_coreid_y = tile_y;
+    flat_tileid = rank-1;
+
+    // These are not referenced elsewhere in this module,
+    // but are cross referenced from monitor.v.pyv.  Do not
+    // delete
+    fail_flag = 1'b0;
+    stub_done = 4'b0;
+    stub_pass = 4'b0;
+
+    // Clocks initial value
+    core_ref_clk = 1'b0;
+    io_clk = 1'b0;
+    jtag_clk = 1'b0;
+    chipset_clk_osc_p = 1'b0;
+    chipset_clk_osc_n = 1'b1;
+    chipset_clk_osc = 1'b0;
+    chipset_clk = 1'b0;
+    mem_clk = 1'b0;
+    spi_sys_clk = 1'b0;
+    chipset_passthru_clk_p = 1'b0;
+    chipset_passthru_clk_n = 1'b1;
+    passthru_clk_osc_p = 1'b0;
+    passthru_clk_osc_n = 1'b1;
+    passthru_chipset_clk_p = 1'b0;
+    passthru_chipset_clk_n = 1'b1;
+
+    // Resets are held low at start of boot
+    sys_rst_n = 1'b0;
+    jtag_rst_l = 1'b0;
+    pll_rst_n = 1'b0;
+
+    // Mostly DC signals set at start of boot
+    clk_en = 1'b0;
+    if ($test$plusargs("pll_en"))
+    begin
+        // PLL is disabled by default
+        pll_bypass = 1'b0; // trin: pll_bypass is a switch in the pll; not reliable
+        clk_mux_sel[1:0] = 2'b10; // selecting pll
+    end
+    else
+    begin
+        pll_bypass = 1'b1; // trin: pll_bypass is a switch in the pll; not reliable
+        clk_mux_sel[1:0] = 2'b00; // selecting ref clock
+    end
+    // rangeA = x10 ? 5'b1 : x5 ? 5'b11110 : x2 ? 5'b10100 : x1 ? 5'b10010 : x20 ? 5'b0 : 5'b1;
+    pll_rangea = 5'b00001; // 10x ref clock
+    // pll_rangea = 5'b11110; // 5x ref clock
+    // pll_rangea = 5'b00000; // 20x ref clock
+
+    // JTAG simulation currently not supported here
+    jtag_modesel = 1'b1;
+    jtag_datain = 1'b0;
+
+`ifndef SYNC_MUX
+    async_mux = 1'b1;
+`else
+    async_mux = 1'b0;
+`endif
+
+`ifndef METRO_TILE
+    // Init JBUS model plus some ORAM stuff
+    if ($test$plusargs("oram"))
+    begin
+`ifndef PITON_DPI
+        $init_jbus_model("mem.image", 1);
+`else // ifndef PITON_DPI
+        init_jbus_model_call("mem.image", 1);
+`endif // ifndef PITON_DPI
+`ifndef __ICARUS__
+        force system.chip.ctap_oram_clk_en = 1'b1;
+`endif
+    end
+    else
+    begin
+`ifndef PITON_DPI
+        $init_jbus_model("mem.image", 0);
+`else // ifndef PITON_DPI
+        $display("init_jbus_model_call");
+        init_jbus_model_call("mem.image", 0);
+`endif // ifndef PITON_DPI
+    end
+`endif //METRO_TILE
+
+    in_N_noc1_data  = 0;
+    in_E_noc1_data  = 0;
+    in_W_noc1_data  = 0;
+    in_S_noc1_data  = 0;
+    in_N_noc1_valid = 0;
+    in_E_noc1_valid = 0;
+    in_W_noc1_valid = 0;
+    in_S_noc1_valid = 0;
+    in_N_noc1_yummy = 0;
+    in_E_noc1_yummy = 0;
+    in_W_noc1_yummy = 0;
+    in_S_noc1_yummy = 0;
+
+    in_N_noc2_data  = 0;
+    in_E_noc2_data  = 0;
+    in_W_noc2_data  = 0;
+    in_S_noc2_data  = 0;
+    in_N_noc2_valid = 0;
+    in_E_noc2_valid = 0;
+    in_W_noc2_valid = 0;
+    in_S_noc2_valid = 0;
+    in_N_noc2_yummy = 0;
+    in_E_noc2_yummy = 0;
+    in_W_noc2_yummy = 0;
+    in_S_noc2_yummy = 0;
+
+    in_N_noc3_data  = 0;
+    in_E_noc3_data  = 0;
+    in_W_noc3_data  = 0;
+    in_S_noc3_data  = 0;
+    in_N_noc3_valid = 0;
+    in_E_noc3_valid = 0;
+    in_W_noc3_valid = 0;
+    in_S_noc3_valid = 0;
+    in_N_noc3_yummy = 0;
+    in_E_noc3_yummy = 0;
+    in_W_noc3_yummy = 0;
+    in_S_noc3_yummy = 0;
+
+    // Reset PLL for 100 cycles
+    repeat(100)@(posedge core_ref_clk);
+    pll_rst_n = 1'b1;
+
+    // Wait for PLL lock
+    wait( pll_lock == 1'b1 );
+
+    // After 10 cycles turn on chip-level clock enable
+    repeat(10)@(posedge `CHIP_INT_CLK);
+    clk_en = 1'b1;
+
+    // After 100 cycles release reset
+    repeat(100)@(posedge `CHIP_INT_CLK);
+    sys_rst_n = 1'b1;
+    jtag_rst_l = 1'b1;
+
+    // Wait for SRAM init
+    // trin: 5000 cycles is about the lowest for 64KB L2
+    // 128KB L2 requires at least 10000
+    repeat(5000)@(posedge `CHIP_INT_CLK); // trin: supports at least 512KB L2 per-tile
+
+    diag_done = 1'b1;
+`ifndef METRO_TILE
+`ifndef PITONSYS_IOCTRL
+    // Signal fake IOB to send wake up packet to first tile
+    cmp_top.system.chipset.chipset_impl.ciop_fake_iob.ok_iob = 1'b1;
+`endif // endif PITONSYS_IOCTRL
+`endif // ifndef METRO_TILE
+
+//ok_iob = 1;
+
+//metro code
+$display("TILE INITIALIZED");
+$display("tile_y: %d",tile_y);
+$display("tile_x: %d",tile_x);
+$display("rankN: %d",rankN);
+$display("rankS: %d",rankS);
+$display("rankW: %d",rankW);
+$display("rankE: %d",rankE);
+
+@(posedge core_ref_clk);
+for(int i = 0; i < 350000; i = i + 1)
+begin
+    if (i % 10000 == 0) begin
+        $display("TIME: %d", i);
+    end
+    #500;
+    if(rankN != -1) begin
+        //SENDING
+        //$display("sending N");
+        mpi_send_data(out_N_noc1_data, out_N_noc1_valid, rankN, rank, DATA_NOC_1);
+        // send yummy
+        mpi_send_yummy(out_N_noc1_yummy, rankN, rank, YUMMY_NOC_1);
+
+        // send data
+        mpi_send_data(out_N_noc2_data, out_N_noc2_valid, rankN, rank, DATA_NOC_2);
+        // send yummy
+        mpi_send_yummy(out_N_noc2_yummy, rankN, rank, YUMMY_NOC_2);
+
+        // send data
+        mpi_send_data(out_N_noc3_data, out_N_noc3_valid, rankN, rank, DATA_NOC_3);
+        // send yummy
+        mpi_send_yummy(out_N_noc3_yummy, rankN, rank, YUMMY_NOC_3);
+
+        // RECEIVING
+        //$display("receiving N");
+        in_N_noc1_data = mpi_receive_data(rankN, valid_aux, DATA_NOC_1);
+        in_N_noc1_valid = valid_aux;
+        // receive yummy
+        in_N_noc1_yummy = mpi_receive_yummy(rankN, YUMMY_NOC_1);
+        
+        in_N_noc2_data = mpi_receive_data(rankN, valid_aux, DATA_NOC_2);
+        in_N_noc2_valid = valid_aux;
+        // receive yummy
+        in_N_noc2_yummy = mpi_receive_yummy(rankN, YUMMY_NOC_2);
+
+        in_N_noc3_data = mpi_receive_data(rankN, valid_aux, DATA_NOC_3);
+        in_N_noc3_valid = valid_aux;
+        // receive yummy
+        in_N_noc3_yummy = mpi_receive_yummy(rankN, YUMMY_NOC_3);
+    end
+
+    if(rankE != -1) begin
+        //SENDING
+        //$display("sending E");
+        mpi_send_data(out_E_noc1_data, out_E_noc1_valid, rankE, rank, DATA_NOC_1);
+        // send yummy
+        mpi_send_yummy(out_E_noc1_yummy, rankE, rank, YUMMY_NOC_1);
+
+        // send data
+        mpi_send_data(out_E_noc2_data, out_E_noc2_valid, rankE, rank, DATA_NOC_2);
+        // send yummy
+        mpi_send_yummy(out_E_noc2_yummy, rankE, rank, YUMMY_NOC_2);
+
+        // send data
+        mpi_send_data(out_E_noc3_data, out_E_noc3_valid, rankE, rank, DATA_NOC_3);
+        // send yummy
+        mpi_send_yummy(out_E_noc3_yummy, rankE, rank, YUMMY_NOC_3);
+
+        // RECEIVING
+        //$display("receiving E");
+        in_E_noc1_data = mpi_receive_data(rankE, valid_aux, DATA_NOC_1);
+        in_E_noc1_valid = valid_aux;
+        // receive yummy
+        in_E_noc1_yummy = mpi_receive_yummy(rankE, YUMMY_NOC_1);
+        
+        in_E_noc2_data = mpi_receive_data(rankE, valid_aux, DATA_NOC_2);
+        in_E_noc2_valid = valid_aux;
+        // receive yummy
+        in_E_noc2_yummy = mpi_receive_yummy(rankE, YUMMY_NOC_2);
+
+        in_E_noc3_data = mpi_receive_data(rankE, valid_aux, DATA_NOC_3);
+        in_E_noc3_valid = valid_aux;
+        // receive yummy
+        in_E_noc3_yummy = mpi_receive_yummy(rankE, YUMMY_NOC_3);
+    end
+
+    if(rankS != -1) begin
+        //SENDING
+        //$display("sending S");
+        mpi_send_data(out_S_noc1_data, out_S_noc1_valid, rankS, rank, DATA_NOC_1);
+        // send yummy
+        mpi_send_yummy(out_S_noc1_yummy, rankS, rank, YUMMY_NOC_1);
+
+        // send data
+        mpi_send_data(out_S_noc2_data, out_S_noc2_valid, rankS, rank, DATA_NOC_2);
+        // send yummy
+        mpi_send_yummy(out_S_noc2_yummy, rankS, rank, YUMMY_NOC_2);
+
+        // send data
+        mpi_send_data(out_S_noc3_data, out_S_noc3_valid, rankS, rank, DATA_NOC_3);
+        // send yummy
+        mpi_send_yummy(out_S_noc3_yummy, rankS, rank, YUMMY_NOC_3);
+
+        // RECEIVING
+        //$display("receiving S");
+        in_S_noc1_data = mpi_receive_data(rankS, valid_aux, DATA_NOC_1);
+        in_S_noc1_valid = valid_aux;
+        // receive yummy
+        in_S_noc1_yummy = mpi_receive_yummy(rankS, YUMMY_NOC_1);
+        
+        in_S_noc2_data = mpi_receive_data(rankS, valid_aux, DATA_NOC_2);
+        in_S_noc2_valid = valid_aux;
+        // receive yummy
+        in_S_noc2_yummy = mpi_receive_yummy(rankS, YUMMY_NOC_2);
+
+        in_S_noc3_data = mpi_receive_data(rankS, valid_aux, DATA_NOC_3);
+        in_S_noc3_valid = valid_aux;
+        // receive yummy
+        in_S_noc3_yummy = mpi_receive_yummy(rankS, YUMMY_NOC_3);
+    end
+
+    if(rankW != -1) begin
+        //SENDING
+        //$display("sending W");
+        mpi_send_data(out_W_noc1_data, out_W_noc1_valid, rankW, rank, DATA_NOC_1);
+        // send yummy
+        mpi_send_yummy(out_W_noc1_yummy, rankW, rank, YUMMY_NOC_1);
+
+        // send data
+        mpi_send_data(out_W_noc2_data, out_W_noc2_valid, rankW, rank, DATA_NOC_2);
+        // send yummy
+        mpi_send_yummy(out_W_noc2_yummy, rankW, rank, YUMMY_NOC_2);
+
+        // send data
+        mpi_send_data(out_W_noc3_data, out_W_noc3_valid, rankW, rank, DATA_NOC_3);
+        // send yummy
+        mpi_send_yummy(out_W_noc3_yummy, rankW, rank, YUMMY_NOC_3);
+
+        // RECEIVING
+        //$display("receiving W");
+        in_W_noc1_data = mpi_receive_data(rankW, valid_aux, DATA_NOC_1);
+        in_W_noc1_valid = valid_aux;
+        // receive yummy
+        in_W_noc1_yummy = mpi_receive_yummy(rankW, YUMMY_NOC_1);
+        
+        in_W_noc2_data = mpi_receive_data(rankW, valid_aux, DATA_NOC_2);
+        in_W_noc2_valid = valid_aux;
+        // receive yummy
+        in_W_noc2_yummy = mpi_receive_yummy(rankW, YUMMY_NOC_2);
+
+        in_W_noc3_data = mpi_receive_data(rankW, valid_aux, DATA_NOC_3);
+        in_W_noc3_valid = valid_aux;
+        // receive yummy
+        in_W_noc3_yummy = mpi_receive_yummy(rankW, YUMMY_NOC_3);
+    end
+    #500;
+end
+
+$display("Trace done: METRO_TILE_%d",rank);
+finalize();
+$finish;
+end
+`endif
+
+`ifdef VERILATOR
+`ifndef METRO_TILE
+always @(posedge ok_iob) begin
+    cmp_top.system.chipset.chipset_impl.ciop_fake_iob.ok_iob = 1'b1;
+end
+`endif // ifndef METRO_TILE
+`endif
+
+////////////////////////////////////////////////////////
+// SYNTHESIZABLE TILE
+///////////////////////////////////////////////////////
+
+
+`ifdef PITON_PRONOC 
+	wire  pronoc_reset = ~sys_rst_n;
+
+	assign smart_max = SMART_MAX;
+	assign pronoc_T1 = T1;
+    assign pronoc_T2 = T2;
+	
+	wire [`DATA_WIDTH-1:0]   dataIn [2:0] [CONCENTRATION-1 : 0];  
+	wire validIn [2:0] [CONCENTRATION-1 : 0];
+	wire yummyIn [2:0] [CONCENTRATION-1 : 0];
+        
+	wire [`DATA_WIDTH-1:0]   dataOut [2:0] [CONCENTRATION-1 : 0];  
+	wire validOut [2:0] [CONCENTRATION-1 : 0];
+	wire yummyOut [2:0] [CONCENTRATION-1 : 0]; 
+        
+	
+	smartflit_chanel_t  tile_chan_i [2:0] [CONCENTRATION-1 : 0];  
+	smartflit_chanel_t  tile_chan_o [2:0] [CONCENTRATION-1 : 0];  
+
+	smartflit_chanel_t router_chan_in  [2:0] [MAX_P-1 : 0];
+	smartflit_chanel_t router_chan_out [2:0] [MAX_P-1 : 0];
+	
+	wire [RAw-1 : 0] current_r_addr;
+	wire [RAw-1 : 0] current_r_addr_wire [2:0] [CONCENTRATION-1 : 0];
+	
+	
+	genvar n,p,l;
+	generate
+    
+	for(n=0;n<3;n++) begin: N_
+	
+        for(l=0;l<CONCENTRATION;l++) begin : L_
+            pronoc_to_piton_wrapper 
+            #(
+                .NOC_NUM(n),
+                .PORT_NUM(0),
+                .FLATID_WIDTH(`JTAG_FLATID_WIDTH)
+            )pr2pi
+            (
+                .default_chipid(default_chipid),
+                .default_coreid_x(default_coreid_x[l]), 
+                .default_coreid_y(default_coreid_y[l]),
+                .flat_tileid(flat_tileid[l]),    
+                .reset(pronoc_reset),
+                .clk(core_ref_clk),
+                .dataOut(dataIn[n][l]),
+                .validOut(validIn[n][l]),
+                .yummyOut(yummyIn[n][l]),
+                .current_r_addr_o(current_r_addr_wire[n][l]),
+                .chan_in(tile_chan_i [n][l])
+            );    
+            
+            piton_to_pronoc_wrapper      
+            #(
+                .NOC_NUM(n),
+                .CHIP_SET_PORT(CHIP_SET_PORT),
+                .FLATID_WIDTH(`JTAG_FLATID_WIDTH)
+            )pi2pr
+            (
+                .default_chipid (default_chipid),
+                .default_coreid_x(default_coreid_x[l]),
+                .default_coreid_y(default_coreid_y[l]),
+                .flat_tileid(flat_tileid[l]),    
+                .reset(pronoc_reset),
+                .clk(core_ref_clk),
+                .dataIn(dataOut[n][l]),
+                .validIn(validOut[n][l]),
+                .yummyIn(yummyOut[n][l]),
+                .current_r_addr_i(current_r_addr ),
+                .chan_out(tile_chan_o [n][l])
+            );    
+		end//  CONCENTRATION 
+		
+		
+		router_top #(
+		   .P               (MAX_P)
+		) the_router (
+			.current_r_id    (current_r_id),
+			.current_r_addr  (current_r_addr), 
+			.chan_in         (router_chan_in[n]), 
+			.chan_out        (router_chan_out[n]), 
+			.router_event    (),
+			.clk             (core_ref_clk ), 
+			.reset           (pronoc_reset )
+		);
+		
+		//first tile localport connection
+		assign router_chan_in[n][0]=	tile_chan_o[n][0];
+		assign tile_chan_i[n][0] = router_chan_out[n][0];
+
+        //other tiles localport connection
+        for(l=1;l<CONCENTRATION;l++) begin : L_1
+            assign router_chan_in[n][4+l]=	tile_chan_o[n][l];
+		    assign tile_chan_i[n][l] = router_chan_out[n][4+l];
+        end
+
+
+		
+		//always @(posedge core_ref_clk) begin 
+					//if(router_chan_in[n][0].flit_chanel.flit_wr) $display("in ROUTER %d CHAN %d PORT %d out=%h",current_r_addr,n,0,router_chan_in[n][0].flit_chanel.flit);
+					//if(router_chan_out[n][0].flit_chanel.flit_wr) $display("out ROUTER %d CHAN %d PORT %d out=%h",current_r_addr,n,0,router_chan_out[n][0].flit_chanel.flit);
+					
+		//end
+			
+		for(p=0;p<4;p++) begin: P_
+				assign router_chan_in[n][p+1]= noc_chanel_in[p].smartflit_chanel[n];
+				assign noc_chanel_out[p].smartflit_chanel[n] = router_chan_out[n][p+1];
+				
+				//always @(posedge core_ref_clk) begin 
+					//if(router_chan_in[n][p+1].flit_chanel.flit_wr) $display("in ROUTER %d CHAN %d PORT %d out=%h",current_r_addr,n,p,router_chan_in[n][p+1].flit_chanel.flit);
+					
+					
+					//if(router_chan_out[n][p+1].flit_chanel.flit_wr) $display("out ROUTER %d CHAN %d PORT %d out=%h",current_r_addr,n,p,router_chan_out[n][p+1].flit_chanel.flit);
+					
+					
+				//end
+				
+				
+		end
+	end//for
+	endgenerate
+	
+
+endp_addr_encoder #( .TOPOLOGY("MESH"), .T1(T1), .T2(T2), .T3(1), .EAw(EAw),  .NE(NE)) encode1 ( .id(current_r_id), .code(current_r_addr));
+	
+`else 
+
+	assign smart_max = 0;
+    assign pronoc_T1 = `PITON_X_TILES;
+    assign pronoc_T2 = `PITON_Y_TILES;
+
+`endif
+
+wire [31:0] default_total_num_tiles;
+assign default_total_num_tiles = `PITON_NUM_TILES;
+
+// Generate tile instances
+genvar ll;
+generate
+for(ll=0;ll<CONCENTRATION;ll++) begin : L_
+    tile #(
+    `ifdef PITON_ARIANE
+        .TILE_TYPE(`ARIANE_RV64_TILE)
+    `endif
+    `ifdef PITON_LITE_TILE
+        .TILE_TYPE(`RISCV_LITE_TILE)
+    `endif
+    `ifdef PITON_SARG
+        .TILE_TYPE(`SARGANTANA_RV64_TILE)
+    `endif   
+    `ifdef PITON_LOX
+        .TILE_TYPE(`LAGARTO_OX_RV64_TILE)
+    `endif 
+    ) the_tile (
+        .clk                (core_ref_clk),
+        .rst_n              (sys_rst_n),
+        .clk_en             (clk_en & cpu_enable[ll]),
+        .default_chipid     (default_chipid),    // the first chip
+        .default_coreid_x   (default_coreid_x[ll]),
+        .default_coreid_y   (default_coreid_y[ll]),
+        .flat_tileid        (flat_tileid[ll]),
+        .default_total_num_tiles(default_total_num_tiles),
+    `ifdef PITON_ARIANE
+        .debug_req_i        ( 1'b0 ),
+        .unavailable_o      (      ),
+        .timer_irq_i        ( 1'b0 ),
+        .ipi_i              ( 1'b0 ),
+        .irq_i              ( 1'b0 ),
+    `endif
+    `ifdef PITON_LAGARTO
+        .debug_req_i        ( 1'b0 ),
+        .unavailable_o      (      ),
+        .timer_irq_i        ( 1'b0 ),
+        .ipi_i              ( 1'b0 ),
+        .irq_i              ( 1'b0 ),
+        .pmu_sig_o (),
+    `endif
+        // ucb from tiles to jtag
+        .tile_jtag_ucb_val   (      ),
+        .tile_jtag_ucb_data  (      ),
+        // ucb from jtag to tiles
+        .jtag_tiles_ucb_val  ( 1'b0 ),
+        .jtag_tiles_ucb_data ( 1'b0 ),
+
+    `ifdef PITON_PRONOC 
+                
+        .dataIn1         (dataIn[0][ll]),
+        .validIn1        (validIn[0][ll]),
+        .yummyIn1        (yummyIn[0][ll]),
+        
+        .dataOut1        (dataOut[0][ll]),
+        .validOut1       (validOut[0][ll]),
+        .yummyOut1       (yummyOut[0][ll]), 
+        
+        .dataIn2         (dataIn[1][ll]),
+        .validIn2        (validIn[1][ll]),
+        .yummyIn2        (yummyIn[1][ll]),
+        
+        .dataOut2        (dataOut[1][ll]),
+        .validOut2       (validOut[1][ll]),
+        .yummyOut2       (yummyOut[1][ll]), 
+        
+        .dataIn3         (dataIn[2][ll]),
+        .validIn3        (validIn[2][ll]),
+        .yummyIn3        (yummyIn[2][ll]),
+        
+        .dataOut3        (dataOut[2][ll]),
+        .validOut3       (validOut[2][ll]),
+        .yummyOut3       (yummyOut[2][ll])   
+        
+
+    `else
+        .dyn0_dataIn_N       ( noc_chanel_in [PITON_NORTH].data1), // ( in_N_noc1_data   ),
+        .dyn0_dataIn_E       ( noc_chanel_in [PITON_EAST ].data1), // ( in_E_noc1_data   ),
+        .dyn0_dataIn_W       ( noc_chanel_in [PITON_WEST ].data1), // ( in_W_noc1_data   ),
+        .dyn0_dataIn_S       ( noc_chanel_in [PITON_SOUTH].data1), // ( in_S_noc1_data   ),
+        .dyn0_validIn_N      ( noc_chanel_in [PITON_NORTH].valid[0]), // ( in_N_noc1_valid  ),
+        .dyn0_validIn_E      ( noc_chanel_in [PITON_EAST ].valid[0]), // ( in_E_noc1_valid  ),
+        .dyn0_validIn_W      ( noc_chanel_in [PITON_WEST ].valid[0]), // ( in_W_noc1_valid  ),
+        .dyn0_validIn_S      ( noc_chanel_in [PITON_SOUTH].valid[0]), // ( in_S_noc1_valid  ),
+        .dyn0_dNo_yummy      ( noc_chanel_in [PITON_NORTH].yummy[0]), // ( in_N_noc1_yummy  ),           
+        .dyn0_dEo_yummy      ( noc_chanel_in [PITON_EAST ].yummy[0]), // ( in_E_noc1_yummy  ),
+        .dyn0_dWo_yummy      ( noc_chanel_in [PITON_WEST ].yummy[0]), // ( in_W_noc1_yummy  ),
+        .dyn0_dSo_yummy      ( noc_chanel_in [PITON_SOUTH].yummy[0]), // ( in_S_noc1_yummy  ),
+                                            
+        .dyn0_dNo            ( noc_chanel_out[PITON_NORTH].data1), //( out_N_noc1_data  ),
+        .dyn0_dEo            ( noc_chanel_out[PITON_EAST ].data1), //( out_E_noc1_data  ),
+        .dyn0_dWo            ( noc_chanel_out[PITON_WEST ].data1), //( out_W_noc1_data  ),
+        .dyn0_dSo            ( noc_chanel_out[PITON_SOUTH].data1), //( out_S_noc1_data  ),
+        .dyn0_dNo_valid      ( noc_chanel_out[PITON_NORTH].valid[0]), //( out_N_noc1_valid ),
+        .dyn0_dEo_valid      ( noc_chanel_out[PITON_EAST ].valid[0]), //( out_E_noc1_valid ),
+        .dyn0_dWo_valid      ( noc_chanel_out[PITON_WEST ].valid[0]), //( out_W_noc1_valid ),
+        .dyn0_dSo_valid      ( noc_chanel_out[PITON_SOUTH].valid[0]), //( out_S_noc1_valid ),
+        .dyn0_yummyOut_N     ( noc_chanel_out[PITON_NORTH].yummy[0]), //( out_N_noc1_yummy ),
+        .dyn0_yummyOut_E     ( noc_chanel_out[PITON_EAST ].yummy[0]), //( out_E_noc1_yummy ),
+        .dyn0_yummyOut_W     ( noc_chanel_out[PITON_WEST ].yummy[0]), //( out_W_noc1_yummy ),
+        .dyn0_yummyOut_S     ( noc_chanel_out[PITON_SOUTH].yummy[0]), //( out_S_noc1_yummy ),
+                                            
+        .dyn1_dataIn_N       ( noc_chanel_in [PITON_NORTH].data2), // ( in_N_noc2_data   ),
+        .dyn1_dataIn_E       ( noc_chanel_in [PITON_EAST ].data2), // ( in_E_noc2_data   ),
+        .dyn1_dataIn_W       ( noc_chanel_in [PITON_WEST ].data2), // ( in_W_noc2_data   ),
+        .dyn1_dataIn_S       ( noc_chanel_in [PITON_SOUTH].data2), // ( in_S_noc2_data   ),
+        .dyn1_validIn_N      ( noc_chanel_in [PITON_NORTH].valid[1]), // ( in_N_noc2_valid  ),
+        .dyn1_validIn_E      ( noc_chanel_in [PITON_EAST ].valid[1]), // ( in_E_noc2_valid  ),
+        .dyn1_validIn_W      ( noc_chanel_in [PITON_WEST ].valid[1]), // ( in_W_noc2_valid  ),
+        .dyn1_validIn_S      ( noc_chanel_in [PITON_SOUTH].valid[1]), // ( in_S_noc2_valid  ),
+        .dyn1_dNo_yummy      ( noc_chanel_in [PITON_NORTH].yummy[1]), // ( in_N_noc2_yummy  ),
+        .dyn1_dEo_yummy      ( noc_chanel_in [PITON_EAST ].yummy[1]), // ( in_E_noc2_yummy  ),
+        .dyn1_dWo_yummy      ( noc_chanel_in [PITON_WEST ].yummy[1]), // ( in_W_noc2_yummy  ),
+        .dyn1_dSo_yummy      ( noc_chanel_in [PITON_SOUTH].yummy[1]), // ( in_S_noc2_yummy  ),
+                                        
+        .dyn1_dNo            ( noc_chanel_out[PITON_NORTH].data2), //( out_N_noc2_data  ),
+        .dyn1_dEo            ( noc_chanel_out[PITON_EAST ].data2), //( out_E_noc2_data  ),
+        .dyn1_dWo            ( noc_chanel_out[PITON_WEST ].data2), //( out_W_noc2_data  ),
+        .dyn1_dSo            ( noc_chanel_out[PITON_SOUTH].data2), //( out_S_noc2_data  ),
+        .dyn1_dNo_valid      ( noc_chanel_out[PITON_NORTH].valid[1]), //( out_N_noc2_valid ),
+        .dyn1_dEo_valid      ( noc_chanel_out[PITON_EAST ].valid[1]), //( out_E_noc2_valid ),
+        .dyn1_dWo_valid      ( noc_chanel_out[PITON_WEST ].valid[1]), //( out_W_noc2_valid ),
+        .dyn1_dSo_valid      ( noc_chanel_out[PITON_SOUTH].valid[1]), //( out_S_noc2_valid ),
+        .dyn1_yummyOut_N     ( noc_chanel_out[PITON_NORTH].yummy[1]), //( out_N_noc2_yummy ),
+        .dyn1_yummyOut_E     ( noc_chanel_out[PITON_EAST ].yummy[1]), //( out_E_noc2_yummy ),
+        .dyn1_yummyOut_W     ( noc_chanel_out[PITON_WEST ].yummy[1]), //( out_W_noc2_yummy ),
+        .dyn1_yummyOut_S     ( noc_chanel_out[PITON_SOUTH].yummy[1]), //( out_S_noc2_yummy ),
+                                            
+        .dyn2_dataIn_N       ( noc_chanel_in [PITON_NORTH].data3), // ( in_N_noc3_data   ),
+        .dyn2_dataIn_E       ( noc_chanel_in [PITON_EAST ].data3), // ( in_E_noc3_data   ),
+        .dyn2_dataIn_W       ( noc_chanel_in [PITON_WEST ].data3), // ( in_W_noc3_data   ),
+        .dyn2_dataIn_S       ( noc_chanel_in [PITON_SOUTH].data3), // ( in_S_noc3_data   ),
+        .dyn2_validIn_N      ( noc_chanel_in [PITON_NORTH].valid[2]), // ( in_N_noc3_valid  ),
+        .dyn2_validIn_E      ( noc_chanel_in [PITON_EAST ].valid[2]), // ( in_E_noc3_valid  ),
+        .dyn2_validIn_W      ( noc_chanel_in [PITON_WEST ].valid[2]), // ( in_W_noc3_valid  ),
+        .dyn2_validIn_S      ( noc_chanel_in [PITON_SOUTH].valid[2]), // ( in_S_noc3_valid  ),
+        .dyn2_dNo_yummy      ( noc_chanel_in [PITON_NORTH].yummy[2]), // ( in_N_noc3_yummy  ),
+        .dyn2_dEo_yummy      ( noc_chanel_in [PITON_EAST ].yummy[2]), // ( in_E_noc3_yummy  ),
+        .dyn2_dWo_yummy      ( noc_chanel_in [PITON_WEST ].yummy[2]), // ( in_W_noc3_yummy  ),
+        .dyn2_dSo_yummy      ( noc_chanel_in [PITON_SOUTH].yummy[2]), // ( in_S_noc3_yummy  ),
+                                        
+        .dyn2_dNo            ( noc_chanel_out[PITON_NORTH].data3), //( out_N_noc3_data  ),
+        .dyn2_dEo            ( noc_chanel_out[PITON_EAST ].data3), //( out_E_noc3_data  ),
+        .dyn2_dWo            ( noc_chanel_out[PITON_WEST ].data3), //( out_W_noc3_data  ),
+        .dyn2_dSo            ( noc_chanel_out[PITON_SOUTH].data3), //( out_S_noc3_data  ),
+        .dyn2_dNo_valid      ( noc_chanel_out[PITON_NORTH].valid[2]), //( out_N_noc3_valid ),
+        .dyn2_dEo_valid      ( noc_chanel_out[PITON_EAST ].valid[2]), //( out_E_noc3_valid ),
+        .dyn2_dWo_valid      ( noc_chanel_out[PITON_WEST ].valid[2]), //( out_W_noc3_valid ),
+        .dyn2_dSo_valid      ( noc_chanel_out[PITON_SOUTH].valid[2]), //( out_S_noc3_valid ),
+        .dyn2_yummyOut_N     ( noc_chanel_out[PITON_NORTH].yummy[2]), //( out_N_noc3_yummy ),
+        .dyn2_yummyOut_E     ( noc_chanel_out[PITON_EAST ].yummy[2]), //( out_E_noc3_yummy ),
+        .dyn2_yummyOut_W     ( noc_chanel_out[PITON_WEST ].yummy[2]), //( out_W_noc3_yummy ),
+        .dyn2_yummyOut_S     ( noc_chanel_out[PITON_SOUTH].yummy[2])  //( out_S_noc3_yummy )
+        `endif
+    );
+end// concentration
+endgenerate
+
+/*
+integer i,j;
+always @( posedge core_ref_clk )begin
+	for(i=0;i<P;i++) begin 
+		for(j=0;j<3;j++) begin 
+			if(noc_chanel_in[i].valid[j] )  $display("noc%d_dat_in[%d]=%h",j,i,noc_chanel_in [i].data[j]); 
+			if(noc_chanel_out[i].valid[j] )  $display("noc%d_dat_out[%d]=%h",j,i,noc_chanel_out [i].data[j]); 
+		end
+	end
+
+end
+*/
+
+////////////////////////////////////////////////////////
+// MONITOR STUFF
+////////////////////////////////////////////////////////
+
+
+`ifndef DISABLE_ALL_MONITORS
+
+    // this is the T1 sparc core monitor
+    monitor   monitor(
+        .clk    (`CHIP_INT_CLK),
+        .cmp_gclk  (`CHIP_INT_CLK),
+        .rst_l     (sys_rst_n)
+        );
+
+`ifndef MINIMAL_MONITORING
+    //integer j;
+
+    // Tri: slam init is taken out because it's too complicated to extend to 64 cores
+    // slam_init slam_init () ;
+
+    // The only thing that we will "slam init" is the integer register file
+    //  and it is randomized. For some reason if we left it as X's some tests will fail
+
+`ifndef METRO_TILE
+`ifndef VERILATOR
+    // T1's TSO monitor, stripped of all L2 references
+    tso_mon tso_mon(`CHIP_INT_CLK, `CHIP.rst_n_inter_sync);
+`endif
+`endif //METRO_TILE
+
+    // L15 MONITORS
+    cmp_l15_messages_mon l15_messages_mon(
+        .clk (`CHIP_INT_CLK)
+        );
+
+    // DMBR MONITOR
+    dmbr_mon dmbr_mon (
+        .clk(`CHIP_INT_CLK)
+     );
+
+    //L2 MONITORS
+    `ifdef FAKE_L2
+    `else
+    l2_mon l2_mon(
+        .clk (`CHIP_INT_CLK)
+    );
+    `endif
+
+    //only works if clk == chipset_clk
+    //async_fifo_mon async_fifo_mon(
+    //   .clk (core_ref_clk)
+    //);
+
+`ifndef METRO_TILE
+    jtag_mon jtag_mon(
+        .clk (jtag_clk)
+        );
+
+    iob_mon iob_mon(
+        .clk (chipset_clk)
+    );
+    // sas, more debug info
+`endif // ifndef METRO_TILE
+
+    // turn on sas interface after a delay
+//    reg   need_sas_sparc_intf_update;
+//    initial begin
+//        need_sas_sparc_intf_update  = 0;
+//        #12500;
+//        need_sas_sparc_intf_update  = 1;
+//    end // initial begin
+
+`ifdef PITON_OST1
+    sas_intf  sas_intf(/*AUTOINST*/
+        // Inputs
+        .clk       (`CHIP_INT_CLK),      // Templated
+        .rst_l     (`CHIP.rst_n_inter_sync));       // Templated
+`endif
+
+`ifdef PITON_OST1
+    // create sas tasks
+    sas_tasks sas_tasks(/*AUTOINST*/
+        // Inputs
+        .clk      (`CHIP_INT_CLK),      // Templated
+        .rst_l        (`CHIP.rst_n_inter_sync));       // Templated
+`endif
+
+`ifdef PITON_OST1
+    // sparc pipe flow monitor
+    sparc_pipe_flow sparc_pipe_flow(/*AUTOINST*/
+        // Inputs
+        .clk  (`CHIP_INT_CLK));         // Templated
+`endif
+
+`ifndef METRO_TILE
+    manycore_network_mon network_mon (`CHIP_INT_CLK);
+`endif // ifndef METRO_TILE
+
+`endif // MINIMAL_MONITORING
+`endif // DISABLE_ALL_MONITORS
+    // Alexey
+    // UART monitor
+    /*reg      prev_tx_state;
+    always @(posedge core_ref_clk)
+        prev_tx_state <= tx;
+
+    always @(posedge core_ref_clk)
+        if (prev_tx_state != tx) begin
+            $display("UART: TX changed to %d at", tx, $time);
+        end*/
+
+endmodule // cmp_top
+
+`endif
+
diff --git a/tree_br_cmt.sh b/tree_br_cmt.sh
new file mode 100755
index 00000000..69b37e87
--- /dev/null
+++ b/tree_br_cmt.sh
@@ -0,0 +1,132 @@
+#!/usr/bin/env bash
+
+# @title                      Script to obtain the branch name and commit of a git repo and its submodules (tree)
+#
+# **PROJECT:**                General BSC-CS
+#
+# **LANGUAGE:**               Bash script
+#
+# @author                     Noe Bustamante Peralta - noe.bustamante@bsc.es (NB)
+#
+# @version                    0.1 - First version (NB)
+
+### CURRENT DIRECTORY ###
+CURRENT_DIR=$(pwd)
+CURRENT_FLDR_NAME=${PWD##*/}
+
+#----------------------------------------------------------------------#
+# FUNCTIONS
+#----------------------------------------------------------------------#
+
+function git_branch {
+  local git_status="$(git status 2> /dev/null)"
+  local on_branch="On branch ([^${IFS}]*)"
+  local on_commit="HEAD detached at ([^${IFS}]*)"
+
+  if [[ $git_status =~ $on_branch ]]; then
+    local branch=${BASH_REMATCH[1]}
+    echo ":: ($branch) "
+  elif [[ $git_status =~ $on_commit ]]; then
+    local commit=${BASH_REMATCH[1]}
+    echo ":: ($commit) "
+  else
+    echo " "
+  fi
+}
+
+function git_commit {
+  local git_commit_h="$(git rev-parse HEAD 2> /dev/null)"
+  if [[ ${#git_commit_h} -gt 1 ]]; then
+    local git_commit_c=${git_commit_h:0:8}
+    echo ":: ($git_commit_c) "
+  fi
+}
+
+shopt -s nullglob
+shopt -s dotglob
+
+dir_count=0
+file_count=0
+
+traverse() {
+  dir_count=$(($dir_count + 1))
+  local directory=$1
+  local prefix=$2
+
+  local directory=${directory%/}
+
+  local children=("$directory"/*/)
+  local child_count=${#children[@]}
+
+  for idx in "${!children[@]}"; do
+    local child=${children[$idx]}
+    local child=${child%/}
+    bk_dir=$(pwd)
+    full_path=${CURRENT_DIR}${child#.}
+    cd $full_path
+    it_has_git=$(find . -name .git)
+    cd $bk_dir
+
+    if [[ ${#it_has_git} -gt 5 ]]; then
+      local child_prefix="│   "
+      local pointer="├── "
+
+      if [ $idx -eq $((child_count - 1)) ]; then
+        pointer="└── "
+        child_prefix="    "
+      fi
+
+      local child=${child%/}
+      full_path_it=${CURRENT_DIR}${child#.}
+      cd $full_path_it
+      local CURRENT_C=$(git_commit)
+      local CURRENT_B=$(git_branch)
+
+      local BASE_TREE="${prefix}${pointer}${child##*/}"
+      local sz_aux=${#BASE_TREE}
+
+      if [[ -e ".git" ]]
+      then
+        printf "${BASE_TREE}"
+        printf "%$(( ${first_sep}-${sz_aux} ))s%-25s%s" " " "${CURRENT_B}" "${CURRENT_C}"
+        printf '\n'
+      else
+        printf "${BASE_TREE}"
+        printf "%$(( ${first_sep}-${sz_aux} ))s%-25s%s" " " " " " "
+        printf '\n'
+      fi
+
+      cd $bk_dir
+
+      [ -d "$child" ] &&
+        traverse "$child" "${prefix}$child_prefix" ||
+        file_count=$((file_count + 1))
+    else
+      #echo "No gits"
+      continue
+    fi
+  done
+}
+
+#----------------------------------------------------------------------#
+# MAIN
+#----------------------------------------------------------------------#
+
+root="."
+[ "$#" -ne 0 ] && root="$1"
+
+CURRENT_C=$(git_commit)
+CURRENT_B=$(git_branch)
+
+BASE_TREE=${CURRENT_FLDR_NAME}
+first_sep=64
+sz_aux=${#BASE_TREE}
+
+printf "${BASE_TREE}" 
+printf "%$(( ${first_sep}-${sz_aux} ))s%-25s%s" " " "${CURRENT_B}" "${CURRENT_C}"
+printf '\n'
+
+traverse $root ""
+
+shopt -u nullglob
+shopt -u dotglob
